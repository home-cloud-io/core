syntax = "proto3";

package platform.daemon.v1;

option go_package = "github.com/home-cloud-io/core/api/platform/daemon/v1";

import "platform/daemon/v1/system.proto";
import "platform/daemon/v1/wireguard.proto";
import "validate/validate.proto";

service DaemonStreamService {
  rpc Communicate(stream DaemonMessage) returns (stream ServerMessage) {}
}

message DaemonMessage {
  oneof message {
    Heartbeat heartbeat = 1;
    ShutdownAlert shutdown_alert = 2;
    OSUpdateDiff os_update_diff = 3;
    CurrentDaemonVersion current_daemon_version = 4;
    SystemStats system_stats = 5;
    // Deprecated: use SettingsSaved instead
    DeviceInitialized device_initialized = 6;
    UploadFileReady upload_file_ready = 7;
    UploadFileChunkCompleted upload_file_chunk_completed = 8;
    SettingsSaved settings_saved = 9;

    // SecureTunnelling

    WireguardInterfaceAdded wireguard_interface_added = 10;
    WireguardInterfaceRemoved wireguard_interface_removed = 11;
    WireguardPeerAdded wireguard_peer_added = 12;
    STUNServerSet stun_server_set = 13;
    LocatorServerAdded locator_server_added = 14;
    LocatorServerRemoved locator_server_removed = 15;
    // Deprecated
    AllLocatorsDisabled all_locators_disabled = 16;

    ComponentVersions component_versions = 17;
    Logs logs = 18;
  }
}

message ServerMessage {
  oneof message {
    Heartbeat heartbeat = 1;
    ShutdownCommand shutdown = 2;
    RestartCommand restart = 3;
    RequestOSUpdateDiff request_os_update_diff = 4;
    RequestCurrentDaemonVersion request_current_daemon_version = 5;
    ChangeDaemonVersionCommand change_daemon_version_command = 6;
    InstallOSUpdateCommand install_os_update_command = 7;
    SetSystemImageCommand set_system_image_command = 8;
    // Deprecated: use SaveSettingsCommand instead
    SetUserPasswordCommand set_user_password_command = 9;
    // Deprecated: use SaveSettingsCommand instead
    SetTimeZoneCommand set_time_zone_command = 10;
    AddMdnsHostCommand add_mdns_host_command = 11;
    RemoveMdnsHostCommand remove_mdns_host_command = 12;
    // Deprecated: use SaveSettingsCommand instead
    InitializeDeviceCommand initialize_device_command = 13;
    UploadFileRequest upload_file_request = 14;
    SaveSettingsCommand save_settings_command = 15;

    // SecureTunnelling

    AddWireguardInterface add_wireguard_interface = 16;
    RemoveWireguardInterface remove_wireguard_interface = 17;
    AddWireguardPeer add_wireguard_peer = 18;
    SetSTUNServerCommand set_stun_server_command = 19;
    AddLocatorServerCommand add_locator_server_command = 20;
    RemoveLocatorServerCommand remove_locator_server_command = 21;
    // Deprecated
    DisableAllLocatorsCommand disable_all_locators_command = 22;

    RequestComponentVersionsCommand request_component_versions_command = 23;
    RequestLogsCommand request_logs_command = 24;
  }
}

// Bidirectional

message Heartbeat { }

// Daemon -> Server

// ShutdownAlert notifies the Server that the host is about to shutdown
message ShutdownAlert { }

// OSUpdateDiff is the result of the `nvd diff` command
message OSUpdateDiff {
  string description = 1;

  string error = 16;
}

// CurrentDaemonVersion is the current daemon version
message CurrentDaemonVersion {
  string version = 1;
  string vendor_hash = 2;
  string src_hash = 3;

  string error = 16;
}

// Deprecated: use SettingsSaved instead
message DeviceInitialized {
  string error = 16;
}

message DaemonError {
  string error = 1;
}

// UploadFileReady tells the server that the daemon is ready to start receiving file data chunks
message UploadFileReady {
  string id = 1;
}

// UploadFileChunkCompleted tells the server that the daemon is ready for another chunk of data during a file upload
message UploadFileChunkCompleted {
  string file_id = 1;
  uint32 index = 2;
}

message SettingsSaved {
  string error = 16;
}

message WireguardInterfaceAdded {
  string wireguard_interface = 1;
  string public_key = 2;

  string error = 16;
}

message WireguardInterfaceRemoved {
  string wireguard_interface = 1;

  string error = 16;
}

message WireguardPeerAdded {
  string wireguard_interface = 1;
  string client_public_key = 2;
  repeated string addresses = 3;
  repeated string dns_servers = 4;

  string error = 16;
}

message STUNServerSet {
  string server_address = 1;
  string wireguard_interface = 2;

  string error = 16;
}

message LocatorServerAdded {
  string locator_address = 1;
  string wireguard_interface = 2;

  string error = 16;
}

message LocatorServerRemoved {
  string locator_address = 1;
  string wireguard_interface = 2;

  string error = 16;
}

// Deprecated
message AllLocatorsDisabled {
  string error = 16;
}

message ComponentVersions {
  repeated platform.daemon.v1.ComponentVersion components = 1;
}

message Logs {
  string request_id = 1 [(validate.rules).string.uuid = true];
  repeated platform.daemon.v1.Log logs = 2;

  string error = 16;
}

// Server -> Daemon

// ShutdownCommand tells the daemon to shutdown the host
message ShutdownCommand { }

// RestartCommand tells the daemon to restart the host
message RestartCommand { }

// RequestOSUpdateDiff tells the daemon to check for updates to the host and send the result to the server
message RequestOSUpdateDiff { }

// RequestCurrentDaemonVersion tells the daemon to check the current daemon version and send it to the server
message RequestCurrentDaemonVersion { }

message ChangeDaemonVersionCommand {
  string version = 1;
  string vendor_hash = 2;
  string src_hash = 3;
}

message InstallOSUpdateCommand { }

message SetSystemImageCommand {
  string current_image = 1;
  string requested_image = 2;
}

// Deprecated: use SaveSettingsCommand instead
message InitializeDeviceCommand {
  SetUserPasswordCommand user = 1;
  SetTimeZoneCommand time_zone = 2;
}

// Deprecated: use SaveSettingsCommand instead
message SetUserPasswordCommand {
  string username = 1;
  string password = 2;
}

// Deprecated: use SaveSettingsCommand instead
message SetTimeZoneCommand {
  // time_zone must be a valid TZ identifier from: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  string time_zone = 1;
}

message AddMdnsHostCommand {
  string hostname = 1;
}

message RemoveMdnsHostCommand {
  string hostname = 1;
}

// UploadFileRequest tells the daemon that the server would like to initiate a file upload
message UploadFileRequest {
  oneof data {
    FileInfo info = 1;
    FileChunk chunk = 2;
    FileDone done = 3;
  }
}

// FileInfo defines the metadata information about a file to be uploaded
message FileInfo {
  string file_id = 1;
  string file_path = 2;
}

// FileChunk defines a chunk of data passed to the daemon during a file upload
message FileChunk {
  string file_id = 1;
  uint32 index = 2;
  bytes data = 3;
}

// FileDone tells the daemon that the last file data chunk has been uploaded and the daemon can assemble the final file
message FileDone {
  string file_id = 1;
  uint32 chunk_count = 2;
  string file_path = 3;
}

message SaveSettingsCommand {
  string admin_password = 1;
  // time_zone must be a valid TZ identifier from: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  string time_zone = 2;
  bool enable_ssh = 3;
  repeated string trusted_ssh_keys = 4;
}

message AddWireguardInterface {
  platform.daemon.v1.WireguardInterface interface = 1;
}

message RemoveWireguardInterface {
  string name = 1;
}

message AddWireguardPeer {
  platform.daemon.v1.WireguardPeer peer = 1;
  string wireguard_interface = 2;
}

message SetSTUNServerCommand {
  string server_address = 1;
  string wireguard_interface = 2;
}

message AddLocatorServerCommand {
  string locator_address = 1;
  string wireguard_interface = 2;
  // TODO: eventually this is where the access key will be included that the user receives after purchasing the locator subscription
}

message RemoveLocatorServerCommand {
  string locator_address = 1;
  string wireguard_interface = 2;
}

// Deprecated
message DisableAllLocatorsCommand {}

message RequestComponentVersionsCommand {}

message RequestLogsCommand {
  string request_id = 1 [(validate.rules).string.uuid = true];
  // A relative time in seconds before the current time from which to show logs.
  uint32 since_seconds = 2;
}
