// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/daemon/v1/daemon.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ShutdownHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShutdownHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShutdownHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShutdownHostRequestMultiError, or nil if none found.
func (m *ShutdownHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShutdownHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShutdownHostRequestMultiError(errors)
	}

	return nil
}

// ShutdownHostRequestMultiError is an error wrapping multiple validation
// errors returned by ShutdownHostRequest.ValidateAll() if the designated
// constraints aren't met.
type ShutdownHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShutdownHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShutdownHostRequestMultiError) AllErrors() []error { return m }

// ShutdownHostRequestValidationError is the validation error returned by
// ShutdownHostRequest.Validate if the designated constraints aren't met.
type ShutdownHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownHostRequestValidationError) ErrorName() string {
	return "ShutdownHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShutdownHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownHostRequestValidationError{}

// Validate checks the field values on ShutdownHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShutdownHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShutdownHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShutdownHostResponseMultiError, or nil if none found.
func (m *ShutdownHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShutdownHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShutdownHostResponseMultiError(errors)
	}

	return nil
}

// ShutdownHostResponseMultiError is an error wrapping multiple validation
// errors returned by ShutdownHostResponse.ValidateAll() if the designated
// constraints aren't met.
type ShutdownHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShutdownHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShutdownHostResponseMultiError) AllErrors() []error { return m }

// ShutdownHostResponseValidationError is the validation error returned by
// ShutdownHostResponse.Validate if the designated constraints aren't met.
type ShutdownHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownHostResponseValidationError) ErrorName() string {
	return "ShutdownHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShutdownHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownHostResponseValidationError{}

// Validate checks the field values on RebootHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RebootHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RebootHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RebootHostRequestMultiError, or nil if none found.
func (m *RebootHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RebootHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RebootHostRequestMultiError(errors)
	}

	return nil
}

// RebootHostRequestMultiError is an error wrapping multiple validation errors
// returned by RebootHostRequest.ValidateAll() if the designated constraints
// aren't met.
type RebootHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootHostRequestMultiError) AllErrors() []error { return m }

// RebootHostRequestValidationError is the validation error returned by
// RebootHostRequest.Validate if the designated constraints aren't met.
type RebootHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootHostRequestValidationError) ErrorName() string {
	return "RebootHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RebootHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootHostRequestValidationError{}

// Validate checks the field values on RebootHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RebootHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RebootHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RebootHostResponseMultiError, or nil if none found.
func (m *RebootHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RebootHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RebootHostResponseMultiError(errors)
	}

	return nil
}

// RebootHostResponseMultiError is an error wrapping multiple validation errors
// returned by RebootHostResponse.ValidateAll() if the designated constraints
// aren't met.
type RebootHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootHostResponseMultiError) AllErrors() []error { return m }

// RebootHostResponseValidationError is the validation error returned by
// RebootHostResponse.Validate if the designated constraints aren't met.
type RebootHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootHostResponseValidationError) ErrorName() string {
	return "RebootHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RebootHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootHostResponseValidationError{}

// Validate checks the field values on InitializeHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitializeHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitializeHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitializeHostRequestMultiError, or nil if none found.
func (m *InitializeHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitializeHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InitializeHostRequestMultiError(errors)
	}

	return nil
}

// InitializeHostRequestMultiError is an error wrapping multiple validation
// errors returned by InitializeHostRequest.ValidateAll() if the designated
// constraints aren't met.
type InitializeHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitializeHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitializeHostRequestMultiError) AllErrors() []error { return m }

// InitializeHostRequestValidationError is the validation error returned by
// InitializeHostRequest.Validate if the designated constraints aren't met.
type InitializeHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitializeHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitializeHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitializeHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitializeHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitializeHostRequestValidationError) ErrorName() string {
	return "InitializeHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitializeHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitializeHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitializeHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitializeHostRequestValidationError{}

// Validate checks the field values on InitializeHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitializeHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitializeHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitializeHostResponseMultiError, or nil if none found.
func (m *InitializeHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitializeHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InitializeHostResponseMultiError(errors)
	}

	return nil
}

// InitializeHostResponseMultiError is an error wrapping multiple validation
// errors returned by InitializeHostResponse.ValidateAll() if the designated
// constraints aren't met.
type InitializeHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitializeHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitializeHostResponseMultiError) AllErrors() []error { return m }

// InitializeHostResponseValidationError is the validation error returned by
// InitializeHostResponse.Validate if the designated constraints aren't met.
type InitializeHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitializeHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitializeHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitializeHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitializeHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitializeHostResponseValidationError) ErrorName() string {
	return "InitializeHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitializeHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitializeHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitializeHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitializeHostResponseValidationError{}

// Validate checks the field values on AddWireguardInterfaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddWireguardInterfaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddWireguardInterfaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddWireguardInterfaceRequestMultiError, or nil if none found.
func (m *AddWireguardInterfaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddWireguardInterfaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInterface()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddWireguardInterfaceRequestValidationError{
					field:  "Interface",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddWireguardInterfaceRequestValidationError{
					field:  "Interface",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterface()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddWireguardInterfaceRequestValidationError{
				field:  "Interface",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddWireguardInterfaceRequestMultiError(errors)
	}

	return nil
}

// AddWireguardInterfaceRequestMultiError is an error wrapping multiple
// validation errors returned by AddWireguardInterfaceRequest.ValidateAll() if
// the designated constraints aren't met.
type AddWireguardInterfaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddWireguardInterfaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddWireguardInterfaceRequestMultiError) AllErrors() []error { return m }

// AddWireguardInterfaceRequestValidationError is the validation error returned
// by AddWireguardInterfaceRequest.Validate if the designated constraints
// aren't met.
type AddWireguardInterfaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWireguardInterfaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWireguardInterfaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWireguardInterfaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWireguardInterfaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWireguardInterfaceRequestValidationError) ErrorName() string {
	return "AddWireguardInterfaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddWireguardInterfaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWireguardInterfaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWireguardInterfaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWireguardInterfaceRequestValidationError{}

// Validate checks the field values on AddWireguardInterfaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddWireguardInterfaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddWireguardInterfaceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddWireguardInterfaceResponseMultiError, or nil if none found.
func (m *AddWireguardInterfaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddWireguardInterfaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	if len(errors) > 0 {
		return AddWireguardInterfaceResponseMultiError(errors)
	}

	return nil
}

// AddWireguardInterfaceResponseMultiError is an error wrapping multiple
// validation errors returned by AddWireguardInterfaceResponse.ValidateAll()
// if the designated constraints aren't met.
type AddWireguardInterfaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddWireguardInterfaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddWireguardInterfaceResponseMultiError) AllErrors() []error { return m }

// AddWireguardInterfaceResponseValidationError is the validation error
// returned by AddWireguardInterfaceResponse.Validate if the designated
// constraints aren't met.
type AddWireguardInterfaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWireguardInterfaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWireguardInterfaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWireguardInterfaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWireguardInterfaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWireguardInterfaceResponseValidationError) ErrorName() string {
	return "AddWireguardInterfaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddWireguardInterfaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWireguardInterfaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWireguardInterfaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWireguardInterfaceResponseValidationError{}

// Validate checks the field values on RemoveWireguardInterfaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveWireguardInterfaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveWireguardInterfaceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveWireguardInterfaceRequestMultiError, or nil if none found.
func (m *RemoveWireguardInterfaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveWireguardInterfaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return RemoveWireguardInterfaceRequestMultiError(errors)
	}

	return nil
}

// RemoveWireguardInterfaceRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveWireguardInterfaceRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveWireguardInterfaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveWireguardInterfaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveWireguardInterfaceRequestMultiError) AllErrors() []error { return m }

// RemoveWireguardInterfaceRequestValidationError is the validation error
// returned by RemoveWireguardInterfaceRequest.Validate if the designated
// constraints aren't met.
type RemoveWireguardInterfaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWireguardInterfaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWireguardInterfaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWireguardInterfaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWireguardInterfaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWireguardInterfaceRequestValidationError) ErrorName() string {
	return "RemoveWireguardInterfaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWireguardInterfaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWireguardInterfaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWireguardInterfaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWireguardInterfaceRequestValidationError{}

// Validate checks the field values on RemoveWireguardInterfaceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveWireguardInterfaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveWireguardInterfaceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveWireguardInterfaceResponseMultiError, or nil if none found.
func (m *RemoveWireguardInterfaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveWireguardInterfaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveWireguardInterfaceResponseMultiError(errors)
	}

	return nil
}

// RemoveWireguardInterfaceResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemoveWireguardInterfaceResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveWireguardInterfaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveWireguardInterfaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveWireguardInterfaceResponseMultiError) AllErrors() []error { return m }

// RemoveWireguardInterfaceResponseValidationError is the validation error
// returned by RemoveWireguardInterfaceResponse.Validate if the designated
// constraints aren't met.
type RemoveWireguardInterfaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWireguardInterfaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWireguardInterfaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWireguardInterfaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWireguardInterfaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWireguardInterfaceResponseValidationError) ErrorName() string {
	return "RemoveWireguardInterfaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWireguardInterfaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWireguardInterfaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWireguardInterfaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWireguardInterfaceResponseValidationError{}

// Validate checks the field values on AddWireguardPeerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddWireguardPeerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddWireguardPeerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddWireguardPeerRequestMultiError, or nil if none found.
func (m *AddWireguardPeerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddWireguardPeerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPeer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddWireguardPeerRequestValidationError{
					field:  "Peer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddWireguardPeerRequestValidationError{
					field:  "Peer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddWireguardPeerRequestValidationError{
				field:  "Peer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WireguardInterface

	if len(errors) > 0 {
		return AddWireguardPeerRequestMultiError(errors)
	}

	return nil
}

// AddWireguardPeerRequestMultiError is an error wrapping multiple validation
// errors returned by AddWireguardPeerRequest.ValidateAll() if the designated
// constraints aren't met.
type AddWireguardPeerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddWireguardPeerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddWireguardPeerRequestMultiError) AllErrors() []error { return m }

// AddWireguardPeerRequestValidationError is the validation error returned by
// AddWireguardPeerRequest.Validate if the designated constraints aren't met.
type AddWireguardPeerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWireguardPeerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWireguardPeerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWireguardPeerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWireguardPeerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWireguardPeerRequestValidationError) ErrorName() string {
	return "AddWireguardPeerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddWireguardPeerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWireguardPeerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWireguardPeerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWireguardPeerRequestValidationError{}

// Validate checks the field values on AddWireguardPeerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddWireguardPeerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddWireguardPeerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddWireguardPeerResponseMultiError, or nil if none found.
func (m *AddWireguardPeerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddWireguardPeerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddWireguardPeerResponseMultiError(errors)
	}

	return nil
}

// AddWireguardPeerResponseMultiError is an error wrapping multiple validation
// errors returned by AddWireguardPeerResponse.ValidateAll() if the designated
// constraints aren't met.
type AddWireguardPeerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddWireguardPeerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddWireguardPeerResponseMultiError) AllErrors() []error { return m }

// AddWireguardPeerResponseValidationError is the validation error returned by
// AddWireguardPeerResponse.Validate if the designated constraints aren't met.
type AddWireguardPeerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWireguardPeerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWireguardPeerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWireguardPeerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWireguardPeerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWireguardPeerResponseValidationError) ErrorName() string {
	return "AddWireguardPeerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddWireguardPeerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWireguardPeerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWireguardPeerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWireguardPeerResponseValidationError{}

// Validate checks the field values on RemoveWireguardPeerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveWireguardPeerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveWireguardPeerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveWireguardPeerRequestMultiError, or nil if none found.
func (m *RemoveWireguardPeerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveWireguardPeerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveWireguardPeerRequestMultiError(errors)
	}

	return nil
}

// RemoveWireguardPeerRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveWireguardPeerRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveWireguardPeerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveWireguardPeerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveWireguardPeerRequestMultiError) AllErrors() []error { return m }

// RemoveWireguardPeerRequestValidationError is the validation error returned
// by RemoveWireguardPeerRequest.Validate if the designated constraints aren't met.
type RemoveWireguardPeerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWireguardPeerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWireguardPeerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWireguardPeerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWireguardPeerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWireguardPeerRequestValidationError) ErrorName() string {
	return "RemoveWireguardPeerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWireguardPeerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWireguardPeerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWireguardPeerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWireguardPeerRequestValidationError{}

// Validate checks the field values on RemoveWireguardPeerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveWireguardPeerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveWireguardPeerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveWireguardPeerResponseMultiError, or nil if none found.
func (m *RemoveWireguardPeerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveWireguardPeerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveWireguardPeerResponseMultiError(errors)
	}

	return nil
}

// RemoveWireguardPeerResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveWireguardPeerResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveWireguardPeerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveWireguardPeerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveWireguardPeerResponseMultiError) AllErrors() []error { return m }

// RemoveWireguardPeerResponseValidationError is the validation error returned
// by RemoveWireguardPeerResponse.Validate if the designated constraints
// aren't met.
type RemoveWireguardPeerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWireguardPeerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWireguardPeerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWireguardPeerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWireguardPeerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWireguardPeerResponseValidationError) ErrorName() string {
	return "RemoveWireguardPeerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWireguardPeerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWireguardPeerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWireguardPeerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWireguardPeerResponseValidationError{}

// Validate checks the field values on SetSTUNServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSTUNServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSTUNServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSTUNServerRequestMultiError, or nil if none found.
func (m *SetSTUNServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSTUNServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerAddress

	// no validation rules for WireguardInterface

	if len(errors) > 0 {
		return SetSTUNServerRequestMultiError(errors)
	}

	return nil
}

// SetSTUNServerRequestMultiError is an error wrapping multiple validation
// errors returned by SetSTUNServerRequest.ValidateAll() if the designated
// constraints aren't met.
type SetSTUNServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSTUNServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSTUNServerRequestMultiError) AllErrors() []error { return m }

// SetSTUNServerRequestValidationError is the validation error returned by
// SetSTUNServerRequest.Validate if the designated constraints aren't met.
type SetSTUNServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSTUNServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSTUNServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSTUNServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSTUNServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSTUNServerRequestValidationError) ErrorName() string {
	return "SetSTUNServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSTUNServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSTUNServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSTUNServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSTUNServerRequestValidationError{}

// Validate checks the field values on SetSTUNServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSTUNServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSTUNServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSTUNServerResponseMultiError, or nil if none found.
func (m *SetSTUNServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSTUNServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetSTUNServerResponseMultiError(errors)
	}

	return nil
}

// SetSTUNServerResponseMultiError is an error wrapping multiple validation
// errors returned by SetSTUNServerResponse.ValidateAll() if the designated
// constraints aren't met.
type SetSTUNServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSTUNServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSTUNServerResponseMultiError) AllErrors() []error { return m }

// SetSTUNServerResponseValidationError is the validation error returned by
// SetSTUNServerResponse.Validate if the designated constraints aren't met.
type SetSTUNServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSTUNServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSTUNServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSTUNServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSTUNServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSTUNServerResponseValidationError) ErrorName() string {
	return "SetSTUNServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetSTUNServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSTUNServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSTUNServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSTUNServerResponseValidationError{}

// Validate checks the field values on AddLocatorServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddLocatorServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLocatorServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddLocatorServerRequestMultiError, or nil if none found.
func (m *AddLocatorServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLocatorServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocatorAddress

	// no validation rules for WireguardInterface

	if len(errors) > 0 {
		return AddLocatorServerRequestMultiError(errors)
	}

	return nil
}

// AddLocatorServerRequestMultiError is an error wrapping multiple validation
// errors returned by AddLocatorServerRequest.ValidateAll() if the designated
// constraints aren't met.
type AddLocatorServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLocatorServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLocatorServerRequestMultiError) AllErrors() []error { return m }

// AddLocatorServerRequestValidationError is the validation error returned by
// AddLocatorServerRequest.Validate if the designated constraints aren't met.
type AddLocatorServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLocatorServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLocatorServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLocatorServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLocatorServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLocatorServerRequestValidationError) ErrorName() string {
	return "AddLocatorServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddLocatorServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLocatorServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLocatorServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLocatorServerRequestValidationError{}

// Validate checks the field values on AddLocatorServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddLocatorServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLocatorServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddLocatorServerResponseMultiError, or nil if none found.
func (m *AddLocatorServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLocatorServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddLocatorServerResponseMultiError(errors)
	}

	return nil
}

// AddLocatorServerResponseMultiError is an error wrapping multiple validation
// errors returned by AddLocatorServerResponse.ValidateAll() if the designated
// constraints aren't met.
type AddLocatorServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLocatorServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLocatorServerResponseMultiError) AllErrors() []error { return m }

// AddLocatorServerResponseValidationError is the validation error returned by
// AddLocatorServerResponse.Validate if the designated constraints aren't met.
type AddLocatorServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLocatorServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLocatorServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLocatorServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLocatorServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLocatorServerResponseValidationError) ErrorName() string {
	return "AddLocatorServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddLocatorServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLocatorServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLocatorServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLocatorServerResponseValidationError{}

// Validate checks the field values on RemoveLocatorServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveLocatorServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveLocatorServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveLocatorServerRequestMultiError, or nil if none found.
func (m *RemoveLocatorServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveLocatorServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocatorAddress

	// no validation rules for WireguardInterface

	if len(errors) > 0 {
		return RemoveLocatorServerRequestMultiError(errors)
	}

	return nil
}

// RemoveLocatorServerRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveLocatorServerRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveLocatorServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveLocatorServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveLocatorServerRequestMultiError) AllErrors() []error { return m }

// RemoveLocatorServerRequestValidationError is the validation error returned
// by RemoveLocatorServerRequest.Validate if the designated constraints aren't met.
type RemoveLocatorServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLocatorServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLocatorServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLocatorServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLocatorServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLocatorServerRequestValidationError) ErrorName() string {
	return "RemoveLocatorServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLocatorServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLocatorServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLocatorServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLocatorServerRequestValidationError{}

// Validate checks the field values on RemoveLocatorServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveLocatorServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveLocatorServerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveLocatorServerResponseMultiError, or nil if none found.
func (m *RemoveLocatorServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveLocatorServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveLocatorServerResponseMultiError(errors)
	}

	return nil
}

// RemoveLocatorServerResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveLocatorServerResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveLocatorServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveLocatorServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveLocatorServerResponseMultiError) AllErrors() []error { return m }

// RemoveLocatorServerResponseValidationError is the validation error returned
// by RemoveLocatorServerResponse.Validate if the designated constraints
// aren't met.
type RemoveLocatorServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLocatorServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLocatorServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLocatorServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLocatorServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLocatorServerResponseValidationError) ErrorName() string {
	return "RemoveLocatorServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLocatorServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLocatorServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLocatorServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLocatorServerResponseValidationError{}
