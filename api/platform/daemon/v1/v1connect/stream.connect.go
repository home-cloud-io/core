// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/daemon/v1/stream.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/home-cloud-io/core/api/platform/daemon/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DaemonStreamServiceName is the fully-qualified name of the DaemonStreamService service.
	DaemonStreamServiceName = "platform.daemon.v1.DaemonStreamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DaemonStreamServiceCommunicateProcedure is the fully-qualified name of the DaemonStreamService's
	// Communicate RPC.
	DaemonStreamServiceCommunicateProcedure = "/platform.daemon.v1.DaemonStreamService/Communicate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	daemonStreamServiceServiceDescriptor           = v1.File_platform_daemon_v1_stream_proto.Services().ByName("DaemonStreamService")
	daemonStreamServiceCommunicateMethodDescriptor = daemonStreamServiceServiceDescriptor.Methods().ByName("Communicate")
)

// DaemonStreamServiceClient is a client for the platform.daemon.v1.DaemonStreamService service.
type DaemonStreamServiceClient interface {
	Communicate(context.Context) *connect.BidiStreamForClient[v1.DaemonMessage, v1.ServerMessage]
}

// NewDaemonStreamServiceClient constructs a client for the platform.daemon.v1.DaemonStreamService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDaemonStreamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DaemonStreamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &daemonStreamServiceClient{
		communicate: connect.NewClient[v1.DaemonMessage, v1.ServerMessage](
			httpClient,
			baseURL+DaemonStreamServiceCommunicateProcedure,
			connect.WithSchema(daemonStreamServiceCommunicateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// daemonStreamServiceClient implements DaemonStreamServiceClient.
type daemonStreamServiceClient struct {
	communicate *connect.Client[v1.DaemonMessage, v1.ServerMessage]
}

// Communicate calls platform.daemon.v1.DaemonStreamService.Communicate.
func (c *daemonStreamServiceClient) Communicate(ctx context.Context) *connect.BidiStreamForClient[v1.DaemonMessage, v1.ServerMessage] {
	return c.communicate.CallBidiStream(ctx)
}

// DaemonStreamServiceHandler is an implementation of the platform.daemon.v1.DaemonStreamService
// service.
type DaemonStreamServiceHandler interface {
	Communicate(context.Context, *connect.BidiStream[v1.DaemonMessage, v1.ServerMessage]) error
}

// NewDaemonStreamServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDaemonStreamServiceHandler(svc DaemonStreamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	daemonStreamServiceCommunicateHandler := connect.NewBidiStreamHandler(
		DaemonStreamServiceCommunicateProcedure,
		svc.Communicate,
		connect.WithSchema(daemonStreamServiceCommunicateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.daemon.v1.DaemonStreamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DaemonStreamServiceCommunicateProcedure:
			daemonStreamServiceCommunicateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDaemonStreamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDaemonStreamServiceHandler struct{}

func (UnimplementedDaemonStreamServiceHandler) Communicate(context.Context, *connect.BidiStream[v1.DaemonMessage, v1.ServerMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("platform.daemon.v1.DaemonStreamService.Communicate is not implemented"))
}
