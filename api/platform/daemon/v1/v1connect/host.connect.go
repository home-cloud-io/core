// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/daemon/v1/host.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/home-cloud-io/core/api/platform/daemon/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HostServiceName is the fully-qualified name of the HostService service.
	HostServiceName = "platform.daemon.v1.HostService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HostServiceShutdownAlertProcedure is the fully-qualified name of the HostService's ShutdownAlert
	// RPC.
	HostServiceShutdownAlertProcedure = "/platform.daemon.v1.HostService/ShutdownAlert"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	hostServiceServiceDescriptor             = v1.File_platform_daemon_v1_host_proto.Services().ByName("HostService")
	hostServiceShutdownAlertMethodDescriptor = hostServiceServiceDescriptor.Methods().ByName("ShutdownAlert")
)

// HostServiceClient is a client for the platform.daemon.v1.HostService service.
type HostServiceClient interface {
	ShutdownAlert(context.Context, *connect.Request[v1.ShutdownAlertRequest]) (*connect.Response[v1.ShutdownAlertResponse], error)
}

// NewHostServiceClient constructs a client for the platform.daemon.v1.HostService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHostServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &hostServiceClient{
		shutdownAlert: connect.NewClient[v1.ShutdownAlertRequest, v1.ShutdownAlertResponse](
			httpClient,
			baseURL+HostServiceShutdownAlertProcedure,
			connect.WithSchema(hostServiceShutdownAlertMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// hostServiceClient implements HostServiceClient.
type hostServiceClient struct {
	shutdownAlert *connect.Client[v1.ShutdownAlertRequest, v1.ShutdownAlertResponse]
}

// ShutdownAlert calls platform.daemon.v1.HostService.ShutdownAlert.
func (c *hostServiceClient) ShutdownAlert(ctx context.Context, req *connect.Request[v1.ShutdownAlertRequest]) (*connect.Response[v1.ShutdownAlertResponse], error) {
	return c.shutdownAlert.CallUnary(ctx, req)
}

// HostServiceHandler is an implementation of the platform.daemon.v1.HostService service.
type HostServiceHandler interface {
	ShutdownAlert(context.Context, *connect.Request[v1.ShutdownAlertRequest]) (*connect.Response[v1.ShutdownAlertResponse], error)
}

// NewHostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHostServiceHandler(svc HostServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hostServiceShutdownAlertHandler := connect.NewUnaryHandler(
		HostServiceShutdownAlertProcedure,
		svc.ShutdownAlert,
		connect.WithSchema(hostServiceShutdownAlertMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.daemon.v1.HostService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HostServiceShutdownAlertProcedure:
			hostServiceShutdownAlertHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHostServiceHandler struct{}

func (UnimplementedHostServiceHandler) ShutdownAlert(context.Context, *connect.Request[v1.ShutdownAlertRequest]) (*connect.Response[v1.ShutdownAlertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.daemon.v1.HostService.ShutdownAlert is not implemented"))
}
