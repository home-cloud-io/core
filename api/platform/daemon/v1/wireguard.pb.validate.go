// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/daemon/v1/wireguard.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WireguardConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WireguardConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WireguardConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WireguardConfigMultiError, or nil if none found.
func (m *WireguardConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *WireguardConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInterfaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WireguardConfigValidationError{
						field:  fmt.Sprintf("Interfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WireguardConfigValidationError{
						field:  fmt.Sprintf("Interfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WireguardConfigValidationError{
					field:  fmt.Sprintf("Interfaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WireguardConfigMultiError(errors)
	}

	return nil
}

// WireguardConfigMultiError is an error wrapping multiple validation errors
// returned by WireguardConfig.ValidateAll() if the designated constraints
// aren't met.
type WireguardConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WireguardConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WireguardConfigMultiError) AllErrors() []error { return m }

// WireguardConfigValidationError is the validation error returned by
// WireguardConfig.Validate if the designated constraints aren't met.
type WireguardConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WireguardConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WireguardConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WireguardConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WireguardConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WireguardConfigValidationError) ErrorName() string { return "WireguardConfigValidationError" }

// Error satisfies the builtin error interface
func (e WireguardConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWireguardConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WireguardConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WireguardConfigValidationError{}

// Validate checks the field values on WireguardInterface with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WireguardInterface) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WireguardInterface with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WireguardInterfaceMultiError, or nil if none found.
func (m *WireguardInterface) ValidateAll() error {
	return m.validate(true)
}

func (m *WireguardInterface) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for PrivateKey

	// no validation rules for ListenPort

	for idx, item := range m.GetPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WireguardInterfaceValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WireguardInterfaceValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WireguardInterfaceValidationError{
					field:  fmt.Sprintf("Peers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WireguardInterfaceMultiError(errors)
	}

	return nil
}

// WireguardInterfaceMultiError is an error wrapping multiple validation errors
// returned by WireguardInterface.ValidateAll() if the designated constraints
// aren't met.
type WireguardInterfaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WireguardInterfaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WireguardInterfaceMultiError) AllErrors() []error { return m }

// WireguardInterfaceValidationError is the validation error returned by
// WireguardInterface.Validate if the designated constraints aren't met.
type WireguardInterfaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WireguardInterfaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WireguardInterfaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WireguardInterfaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WireguardInterfaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WireguardInterfaceValidationError) ErrorName() string {
	return "WireguardInterfaceValidationError"
}

// Error satisfies the builtin error interface
func (e WireguardInterfaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWireguardInterface.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WireguardInterfaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WireguardInterfaceValidationError{}

// Validate checks the field values on WireguardPeer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WireguardPeer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WireguardPeer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WireguardPeerMultiError, or
// nil if none found.
func (m *WireguardPeer) ValidateAll() error {
	return m.validate(true)
}

func (m *WireguardPeer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	if len(errors) > 0 {
		return WireguardPeerMultiError(errors)
	}

	return nil
}

// WireguardPeerMultiError is an error wrapping multiple validation errors
// returned by WireguardPeer.ValidateAll() if the designated constraints
// aren't met.
type WireguardPeerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WireguardPeerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WireguardPeerMultiError) AllErrors() []error { return m }

// WireguardPeerValidationError is the validation error returned by
// WireguardPeer.Validate if the designated constraints aren't met.
type WireguardPeerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WireguardPeerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WireguardPeerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WireguardPeerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WireguardPeerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WireguardPeerValidationError) ErrorName() string { return "WireguardPeerValidationError" }

// Error satisfies the builtin error interface
func (e WireguardPeerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWireguardPeer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WireguardPeerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WireguardPeerValidationError{}

// Validate checks the field values on Locator with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Locator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Locator with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LocatorMultiError, or nil if none found.
func (m *Locator) ValidateAll() error {
	return m.validate(true)
}

func (m *Locator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	for idx, item := range m.GetConnections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocatorValidationError{
						field:  fmt.Sprintf("Connections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocatorValidationError{
						field:  fmt.Sprintf("Connections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocatorValidationError{
					field:  fmt.Sprintf("Connections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LocatorMultiError(errors)
	}

	return nil
}

// LocatorMultiError is an error wrapping multiple validation errors returned
// by Locator.ValidateAll() if the designated constraints aren't met.
type LocatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocatorMultiError) AllErrors() []error { return m }

// LocatorValidationError is the validation error returned by Locator.Validate
// if the designated constraints aren't met.
type LocatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocatorValidationError) ErrorName() string { return "LocatorValidationError" }

// Error satisfies the builtin error interface
func (e LocatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocatorValidationError{}

// Validate checks the field values on LocatorConnection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LocatorConnection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocatorConnection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocatorConnectionMultiError, or nil if none found.
func (m *LocatorConnection) ValidateAll() error {
	return m.validate(true)
}

func (m *LocatorConnection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerId

	// no validation rules for WireguardInterface

	if len(errors) > 0 {
		return LocatorConnectionMultiError(errors)
	}

	return nil
}

// LocatorConnectionMultiError is an error wrapping multiple validation errors
// returned by LocatorConnection.ValidateAll() if the designated constraints
// aren't met.
type LocatorConnectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocatorConnectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocatorConnectionMultiError) AllErrors() []error { return m }

// LocatorConnectionValidationError is the validation error returned by
// LocatorConnection.Validate if the designated constraints aren't met.
type LocatorConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocatorConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocatorConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocatorConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocatorConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocatorConnectionValidationError) ErrorName() string {
	return "LocatorConnectionValidationError"
}

// Error satisfies the builtin error interface
func (e LocatorConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocatorConnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocatorConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocatorConnectionValidationError{}
