// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file platform/daemon/v1/stream.proto (package platform.daemon.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SystemStats } from "./system_pb.js";

/**
 * @generated from message platform.daemon.v1.DaemonMessage
 */
export class DaemonMessage extends Message<DaemonMessage> {
  /**
   * @generated from oneof platform.daemon.v1.DaemonMessage.message
   */
  message: {
    /**
     * @generated from field: platform.daemon.v1.Heartbeat heartbeat = 1;
     */
    value: Heartbeat;
    case: "heartbeat";
  } | {
    /**
     * @generated from field: platform.daemon.v1.ShutdownAlert shutdown_alert = 2;
     */
    value: ShutdownAlert;
    case: "shutdownAlert";
  } | {
    /**
     * @generated from field: platform.daemon.v1.OSUpdateDiff os_update_diff = 3;
     */
    value: OSUpdateDiff;
    case: "osUpdateDiff";
  } | {
    /**
     * @generated from field: platform.daemon.v1.CurrentDaemonVersion current_daemon_version = 4;
     */
    value: CurrentDaemonVersion;
    case: "currentDaemonVersion";
  } | {
    /**
     * @generated from field: platform.daemon.v1.SystemStats system_stats = 5;
     */
    value: SystemStats;
    case: "systemStats";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DaemonMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.DaemonMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "heartbeat", kind: "message", T: Heartbeat, oneof: "message" },
    { no: 2, name: "shutdown_alert", kind: "message", T: ShutdownAlert, oneof: "message" },
    { no: 3, name: "os_update_diff", kind: "message", T: OSUpdateDiff, oneof: "message" },
    { no: 4, name: "current_daemon_version", kind: "message", T: CurrentDaemonVersion, oneof: "message" },
    { no: 5, name: "system_stats", kind: "message", T: SystemStats, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaemonMessage {
    return new DaemonMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaemonMessage {
    return new DaemonMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaemonMessage {
    return new DaemonMessage().fromJsonString(jsonString, options);
  }

  static equals(a: DaemonMessage | PlainMessage<DaemonMessage> | undefined, b: DaemonMessage | PlainMessage<DaemonMessage> | undefined): boolean {
    return proto3.util.equals(DaemonMessage, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.ServerMessage
 */
export class ServerMessage extends Message<ServerMessage> {
  /**
   * @generated from oneof platform.daemon.v1.ServerMessage.message
   */
  message: {
    /**
     * @generated from field: platform.daemon.v1.Heartbeat heartbeat = 1;
     */
    value: Heartbeat;
    case: "heartbeat";
  } | {
    /**
     * @generated from field: platform.daemon.v1.ShutdownCommand shutdown = 2;
     */
    value: ShutdownCommand;
    case: "shutdown";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RestartCommand restart = 3;
     */
    value: RestartCommand;
    case: "restart";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RequestOSUpdateDiff request_os_update_diff = 4;
     */
    value: RequestOSUpdateDiff;
    case: "requestOsUpdateDiff";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RequestCurrentDaemonVersion request_current_daemon_version = 5;
     */
    value: RequestCurrentDaemonVersion;
    case: "requestCurrentDaemonVersion";
  } | {
    /**
     * @generated from field: platform.daemon.v1.ChangeDaemonVersionCommand change_daemon_version_command = 6;
     */
    value: ChangeDaemonVersionCommand;
    case: "changeDaemonVersionCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.InstallOSUpdateCommand install_os_update_command = 7;
     */
    value: InstallOSUpdateCommand;
    case: "installOsUpdateCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.SetSystemImageCommand set_system_image_command = 8;
     */
    value: SetSystemImageCommand;
    case: "setSystemImageCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.SetUserPasswordCommand set_user_password_command = 9;
     */
    value: SetUserPasswordCommand;
    case: "setUserPasswordCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.SetTimeZoneCommand set_time_zone_command = 10;
     */
    value: SetTimeZoneCommand;
    case: "setTimeZoneCommand";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ServerMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ServerMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "heartbeat", kind: "message", T: Heartbeat, oneof: "message" },
    { no: 2, name: "shutdown", kind: "message", T: ShutdownCommand, oneof: "message" },
    { no: 3, name: "restart", kind: "message", T: RestartCommand, oneof: "message" },
    { no: 4, name: "request_os_update_diff", kind: "message", T: RequestOSUpdateDiff, oneof: "message" },
    { no: 5, name: "request_current_daemon_version", kind: "message", T: RequestCurrentDaemonVersion, oneof: "message" },
    { no: 6, name: "change_daemon_version_command", kind: "message", T: ChangeDaemonVersionCommand, oneof: "message" },
    { no: 7, name: "install_os_update_command", kind: "message", T: InstallOSUpdateCommand, oneof: "message" },
    { no: 8, name: "set_system_image_command", kind: "message", T: SetSystemImageCommand, oneof: "message" },
    { no: 9, name: "set_user_password_command", kind: "message", T: SetUserPasswordCommand, oneof: "message" },
    { no: 10, name: "set_time_zone_command", kind: "message", T: SetTimeZoneCommand, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerMessage {
    return new ServerMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerMessage {
    return new ServerMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerMessage {
    return new ServerMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ServerMessage | PlainMessage<ServerMessage> | undefined, b: ServerMessage | PlainMessage<ServerMessage> | undefined): boolean {
    return proto3.util.equals(ServerMessage, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.Heartbeat
 */
export class Heartbeat extends Message<Heartbeat> {
  constructor(data?: PartialMessage<Heartbeat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.Heartbeat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Heartbeat {
    return new Heartbeat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Heartbeat {
    return new Heartbeat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Heartbeat {
    return new Heartbeat().fromJsonString(jsonString, options);
  }

  static equals(a: Heartbeat | PlainMessage<Heartbeat> | undefined, b: Heartbeat | PlainMessage<Heartbeat> | undefined): boolean {
    return proto3.util.equals(Heartbeat, a, b);
  }
}

/**
 * ShutdownAlert notifies the Server that the host is about to shutdown
 *
 * @generated from message platform.daemon.v1.ShutdownAlert
 */
export class ShutdownAlert extends Message<ShutdownAlert> {
  constructor(data?: PartialMessage<ShutdownAlert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ShutdownAlert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownAlert {
    return new ShutdownAlert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownAlert {
    return new ShutdownAlert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownAlert {
    return new ShutdownAlert().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownAlert | PlainMessage<ShutdownAlert> | undefined, b: ShutdownAlert | PlainMessage<ShutdownAlert> | undefined): boolean {
    return proto3.util.equals(ShutdownAlert, a, b);
  }
}

/**
 * OSUpdateDiff is the result of the `nvd diff` command
 *
 * @generated from message platform.daemon.v1.OSUpdateDiff
 */
export class OSUpdateDiff extends Message<OSUpdateDiff> {
  /**
   * @generated from field: string description = 1;
   */
  description = "";

  /**
   * @generated from field: platform.daemon.v1.DaemonError error = 16;
   */
  error?: DaemonError;

  constructor(data?: PartialMessage<OSUpdateDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.OSUpdateDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "error", kind: "message", T: DaemonError },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OSUpdateDiff {
    return new OSUpdateDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OSUpdateDiff {
    return new OSUpdateDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OSUpdateDiff {
    return new OSUpdateDiff().fromJsonString(jsonString, options);
  }

  static equals(a: OSUpdateDiff | PlainMessage<OSUpdateDiff> | undefined, b: OSUpdateDiff | PlainMessage<OSUpdateDiff> | undefined): boolean {
    return proto3.util.equals(OSUpdateDiff, a, b);
  }
}

/**
 * CurrentDaemonVersion is the current daemon version
 *
 * @generated from message platform.daemon.v1.CurrentDaemonVersion
 */
export class CurrentDaemonVersion extends Message<CurrentDaemonVersion> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string vendor_hash = 2;
   */
  vendorHash = "";

  /**
   * @generated from field: string src_hash = 3;
   */
  srcHash = "";

  /**
   * @generated from field: platform.daemon.v1.DaemonError error = 16;
   */
  error?: DaemonError;

  constructor(data?: PartialMessage<CurrentDaemonVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.CurrentDaemonVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vendor_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "src_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "error", kind: "message", T: DaemonError },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentDaemonVersion {
    return new CurrentDaemonVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentDaemonVersion {
    return new CurrentDaemonVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentDaemonVersion {
    return new CurrentDaemonVersion().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentDaemonVersion | PlainMessage<CurrentDaemonVersion> | undefined, b: CurrentDaemonVersion | PlainMessage<CurrentDaemonVersion> | undefined): boolean {
    return proto3.util.equals(CurrentDaemonVersion, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.DaemonError
 */
export class DaemonError extends Message<DaemonError> {
  /**
   * @generated from field: string error = 1;
   */
  error = "";

  constructor(data?: PartialMessage<DaemonError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.DaemonError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaemonError {
    return new DaemonError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaemonError {
    return new DaemonError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaemonError {
    return new DaemonError().fromJsonString(jsonString, options);
  }

  static equals(a: DaemonError | PlainMessage<DaemonError> | undefined, b: DaemonError | PlainMessage<DaemonError> | undefined): boolean {
    return proto3.util.equals(DaemonError, a, b);
  }
}

/**
 * ShutdownCommand tells the daemon to shutdown the host
 *
 * @generated from message platform.daemon.v1.ShutdownCommand
 */
export class ShutdownCommand extends Message<ShutdownCommand> {
  constructor(data?: PartialMessage<ShutdownCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ShutdownCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownCommand {
    return new ShutdownCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownCommand {
    return new ShutdownCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownCommand {
    return new ShutdownCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownCommand | PlainMessage<ShutdownCommand> | undefined, b: ShutdownCommand | PlainMessage<ShutdownCommand> | undefined): boolean {
    return proto3.util.equals(ShutdownCommand, a, b);
  }
}

/**
 * RestartCommand tells the daemon to restart the host
 *
 * @generated from message platform.daemon.v1.RestartCommand
 */
export class RestartCommand extends Message<RestartCommand> {
  constructor(data?: PartialMessage<RestartCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RestartCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartCommand {
    return new RestartCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartCommand {
    return new RestartCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartCommand {
    return new RestartCommand().fromJsonString(jsonString, options);
  }

  static equals(a: RestartCommand | PlainMessage<RestartCommand> | undefined, b: RestartCommand | PlainMessage<RestartCommand> | undefined): boolean {
    return proto3.util.equals(RestartCommand, a, b);
  }
}

/**
 * RequestOSUpdateDiff tells the daemon to check for updates to the host and send the result to the server
 *
 * @generated from message platform.daemon.v1.RequestOSUpdateDiff
 */
export class RequestOSUpdateDiff extends Message<RequestOSUpdateDiff> {
  constructor(data?: PartialMessage<RequestOSUpdateDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RequestOSUpdateDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestOSUpdateDiff {
    return new RequestOSUpdateDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestOSUpdateDiff {
    return new RequestOSUpdateDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestOSUpdateDiff {
    return new RequestOSUpdateDiff().fromJsonString(jsonString, options);
  }

  static equals(a: RequestOSUpdateDiff | PlainMessage<RequestOSUpdateDiff> | undefined, b: RequestOSUpdateDiff | PlainMessage<RequestOSUpdateDiff> | undefined): boolean {
    return proto3.util.equals(RequestOSUpdateDiff, a, b);
  }
}

/**
 * RequestCurrentDaemonVersion tells the daemon to check the current daemon version and send it to the server
 *
 * @generated from message platform.daemon.v1.RequestCurrentDaemonVersion
 */
export class RequestCurrentDaemonVersion extends Message<RequestCurrentDaemonVersion> {
  constructor(data?: PartialMessage<RequestCurrentDaemonVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RequestCurrentDaemonVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestCurrentDaemonVersion {
    return new RequestCurrentDaemonVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestCurrentDaemonVersion {
    return new RequestCurrentDaemonVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestCurrentDaemonVersion {
    return new RequestCurrentDaemonVersion().fromJsonString(jsonString, options);
  }

  static equals(a: RequestCurrentDaemonVersion | PlainMessage<RequestCurrentDaemonVersion> | undefined, b: RequestCurrentDaemonVersion | PlainMessage<RequestCurrentDaemonVersion> | undefined): boolean {
    return proto3.util.equals(RequestCurrentDaemonVersion, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.ChangeDaemonVersionCommand
 */
export class ChangeDaemonVersionCommand extends Message<ChangeDaemonVersionCommand> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string vendor_hash = 2;
   */
  vendorHash = "";

  /**
   * @generated from field: string src_hash = 3;
   */
  srcHash = "";

  constructor(data?: PartialMessage<ChangeDaemonVersionCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ChangeDaemonVersionCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vendor_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "src_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeDaemonVersionCommand {
    return new ChangeDaemonVersionCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeDaemonVersionCommand {
    return new ChangeDaemonVersionCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeDaemonVersionCommand {
    return new ChangeDaemonVersionCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeDaemonVersionCommand | PlainMessage<ChangeDaemonVersionCommand> | undefined, b: ChangeDaemonVersionCommand | PlainMessage<ChangeDaemonVersionCommand> | undefined): boolean {
    return proto3.util.equals(ChangeDaemonVersionCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.InstallOSUpdateCommand
 */
export class InstallOSUpdateCommand extends Message<InstallOSUpdateCommand> {
  constructor(data?: PartialMessage<InstallOSUpdateCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.InstallOSUpdateCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallOSUpdateCommand {
    return new InstallOSUpdateCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallOSUpdateCommand {
    return new InstallOSUpdateCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallOSUpdateCommand {
    return new InstallOSUpdateCommand().fromJsonString(jsonString, options);
  }

  static equals(a: InstallOSUpdateCommand | PlainMessage<InstallOSUpdateCommand> | undefined, b: InstallOSUpdateCommand | PlainMessage<InstallOSUpdateCommand> | undefined): boolean {
    return proto3.util.equals(InstallOSUpdateCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.SetSystemImageCommand
 */
export class SetSystemImageCommand extends Message<SetSystemImageCommand> {
  /**
   * @generated from field: string current_image = 1;
   */
  currentImage = "";

  /**
   * @generated from field: string requested_image = 2;
   */
  requestedImage = "";

  constructor(data?: PartialMessage<SetSystemImageCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.SetSystemImageCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "requested_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSystemImageCommand {
    return new SetSystemImageCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSystemImageCommand {
    return new SetSystemImageCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSystemImageCommand {
    return new SetSystemImageCommand().fromJsonString(jsonString, options);
  }

  static equals(a: SetSystemImageCommand | PlainMessage<SetSystemImageCommand> | undefined, b: SetSystemImageCommand | PlainMessage<SetSystemImageCommand> | undefined): boolean {
    return proto3.util.equals(SetSystemImageCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.SetUserPasswordCommand
 */
export class SetUserPasswordCommand extends Message<SetUserPasswordCommand> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<SetUserPasswordCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.SetUserPasswordCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetUserPasswordCommand {
    return new SetUserPasswordCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetUserPasswordCommand {
    return new SetUserPasswordCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetUserPasswordCommand {
    return new SetUserPasswordCommand().fromJsonString(jsonString, options);
  }

  static equals(a: SetUserPasswordCommand | PlainMessage<SetUserPasswordCommand> | undefined, b: SetUserPasswordCommand | PlainMessage<SetUserPasswordCommand> | undefined): boolean {
    return proto3.util.equals(SetUserPasswordCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.SetTimeZoneCommand
 */
export class SetTimeZoneCommand extends Message<SetTimeZoneCommand> {
  /**
   * time_zone must be a valid TZ identifier from: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
   *
   * @generated from field: string time_zone = 1;
   */
  timeZone = "";

  constructor(data?: PartialMessage<SetTimeZoneCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.SetTimeZoneCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetTimeZoneCommand {
    return new SetTimeZoneCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetTimeZoneCommand {
    return new SetTimeZoneCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetTimeZoneCommand {
    return new SetTimeZoneCommand().fromJsonString(jsonString, options);
  }

  static equals(a: SetTimeZoneCommand | PlainMessage<SetTimeZoneCommand> | undefined, b: SetTimeZoneCommand | PlainMessage<SetTimeZoneCommand> | undefined): boolean {
    return proto3.util.equals(SetTimeZoneCommand, a, b);
  }
}

