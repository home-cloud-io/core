// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file platform/daemon/v1/stream.proto (package platform.daemon.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message platform.daemon.v1.DaemonMessage
 */
export class DaemonMessage extends Message<DaemonMessage> {
  /**
   * @generated from oneof platform.daemon.v1.DaemonMessage.message
   */
  message: {
    /**
     * @generated from field: platform.daemon.v1.Heartbeat heartbeat = 1;
     */
    value: Heartbeat;
    case: "heartbeat";
  } | {
    /**
     * @generated from field: platform.daemon.v1.ShutdownAlert shutdown_alert = 2;
     */
    value: ShutdownAlert;
    case: "shutdownAlert";
  } | {
    /**
     * @generated from field: platform.daemon.v1.OSUpdateDiff os_update_diff = 3;
     */
    value: OSUpdateDiff;
    case: "osUpdateDiff";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DaemonMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.DaemonMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "heartbeat", kind: "message", T: Heartbeat, oneof: "message" },
    { no: 2, name: "shutdown_alert", kind: "message", T: ShutdownAlert, oneof: "message" },
    { no: 3, name: "os_update_diff", kind: "message", T: OSUpdateDiff, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaemonMessage {
    return new DaemonMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaemonMessage {
    return new DaemonMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaemonMessage {
    return new DaemonMessage().fromJsonString(jsonString, options);
  }

  static equals(a: DaemonMessage | PlainMessage<DaemonMessage> | undefined, b: DaemonMessage | PlainMessage<DaemonMessage> | undefined): boolean {
    return proto3.util.equals(DaemonMessage, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.ServerMessage
 */
export class ServerMessage extends Message<ServerMessage> {
  /**
   * @generated from oneof platform.daemon.v1.ServerMessage.message
   */
  message: {
    /**
     * @generated from field: platform.daemon.v1.Heartbeat heartbeat = 1;
     */
    value: Heartbeat;
    case: "heartbeat";
  } | {
    /**
     * @generated from field: platform.daemon.v1.ShutdownCommand shutdown = 2;
     */
    value: ShutdownCommand;
    case: "shutdown";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RestartCommand restart = 3;
     */
    value: RestartCommand;
    case: "restart";
  } | {
    /**
     * @generated from field: platform.daemon.v1.CheckOSUpdateDiff check_os_update_diff = 4;
     */
    value: CheckOSUpdateDiff;
    case: "checkOsUpdateDiff";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ServerMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ServerMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "heartbeat", kind: "message", T: Heartbeat, oneof: "message" },
    { no: 2, name: "shutdown", kind: "message", T: ShutdownCommand, oneof: "message" },
    { no: 3, name: "restart", kind: "message", T: RestartCommand, oneof: "message" },
    { no: 4, name: "check_os_update_diff", kind: "message", T: CheckOSUpdateDiff, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerMessage {
    return new ServerMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerMessage {
    return new ServerMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerMessage {
    return new ServerMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ServerMessage | PlainMessage<ServerMessage> | undefined, b: ServerMessage | PlainMessage<ServerMessage> | undefined): boolean {
    return proto3.util.equals(ServerMessage, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.Heartbeat
 */
export class Heartbeat extends Message<Heartbeat> {
  constructor(data?: PartialMessage<Heartbeat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.Heartbeat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Heartbeat {
    return new Heartbeat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Heartbeat {
    return new Heartbeat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Heartbeat {
    return new Heartbeat().fromJsonString(jsonString, options);
  }

  static equals(a: Heartbeat | PlainMessage<Heartbeat> | undefined, b: Heartbeat | PlainMessage<Heartbeat> | undefined): boolean {
    return proto3.util.equals(Heartbeat, a, b);
  }
}

/**
 * ShutdownAlert notifies the Server that the host is about to shutdown
 *
 * @generated from message platform.daemon.v1.ShutdownAlert
 */
export class ShutdownAlert extends Message<ShutdownAlert> {
  constructor(data?: PartialMessage<ShutdownAlert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ShutdownAlert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownAlert {
    return new ShutdownAlert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownAlert {
    return new ShutdownAlert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownAlert {
    return new ShutdownAlert().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownAlert | PlainMessage<ShutdownAlert> | undefined, b: ShutdownAlert | PlainMessage<ShutdownAlert> | undefined): boolean {
    return proto3.util.equals(ShutdownAlert, a, b);
  }
}

/**
 * OSUpdateDiff is the result of the `nvd diff` command
 *
 * @generated from message platform.daemon.v1.OSUpdateDiff
 */
export class OSUpdateDiff extends Message<OSUpdateDiff> {
  /**
   * @generated from field: string description = 1;
   */
  description = "";

  constructor(data?: PartialMessage<OSUpdateDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.OSUpdateDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OSUpdateDiff {
    return new OSUpdateDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OSUpdateDiff {
    return new OSUpdateDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OSUpdateDiff {
    return new OSUpdateDiff().fromJsonString(jsonString, options);
  }

  static equals(a: OSUpdateDiff | PlainMessage<OSUpdateDiff> | undefined, b: OSUpdateDiff | PlainMessage<OSUpdateDiff> | undefined): boolean {
    return proto3.util.equals(OSUpdateDiff, a, b);
  }
}

/**
 * ShutdownCommand tells the daemon to shutdown the host
 *
 * @generated from message platform.daemon.v1.ShutdownCommand
 */
export class ShutdownCommand extends Message<ShutdownCommand> {
  constructor(data?: PartialMessage<ShutdownCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ShutdownCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownCommand {
    return new ShutdownCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownCommand {
    return new ShutdownCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownCommand {
    return new ShutdownCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownCommand | PlainMessage<ShutdownCommand> | undefined, b: ShutdownCommand | PlainMessage<ShutdownCommand> | undefined): boolean {
    return proto3.util.equals(ShutdownCommand, a, b);
  }
}

/**
 * RestartCommand tells the daemon to restart the host
 *
 * @generated from message platform.daemon.v1.RestartCommand
 */
export class RestartCommand extends Message<RestartCommand> {
  constructor(data?: PartialMessage<RestartCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RestartCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartCommand {
    return new RestartCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartCommand {
    return new RestartCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartCommand {
    return new RestartCommand().fromJsonString(jsonString, options);
  }

  static equals(a: RestartCommand | PlainMessage<RestartCommand> | undefined, b: RestartCommand | PlainMessage<RestartCommand> | undefined): boolean {
    return proto3.util.equals(RestartCommand, a, b);
  }
}

/**
 * CheckOSUpdateDiff tells the daemon to check for updates to the host and send the update diff back
 *
 * @generated from message platform.daemon.v1.CheckOSUpdateDiff
 */
export class CheckOSUpdateDiff extends Message<CheckOSUpdateDiff> {
  constructor(data?: PartialMessage<CheckOSUpdateDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.CheckOSUpdateDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckOSUpdateDiff {
    return new CheckOSUpdateDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckOSUpdateDiff {
    return new CheckOSUpdateDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckOSUpdateDiff {
    return new CheckOSUpdateDiff().fromJsonString(jsonString, options);
  }

  static equals(a: CheckOSUpdateDiff | PlainMessage<CheckOSUpdateDiff> | undefined, b: CheckOSUpdateDiff | PlainMessage<CheckOSUpdateDiff> | undefined): boolean {
    return proto3.util.equals(CheckOSUpdateDiff, a, b);
  }
}

