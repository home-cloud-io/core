// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file platform/daemon/v1/stream.proto (package platform.daemon.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ComponentVersion, Log, SystemStats } from "./system_pb.js";
import { WireguardInterface, WireguardPeer } from "./wireguard_pb.js";

/**
 * @generated from message platform.daemon.v1.DaemonMessage
 */
export class DaemonMessage extends Message<DaemonMessage> {
  /**
   * @generated from oneof platform.daemon.v1.DaemonMessage.message
   */
  message: {
    /**
     * @generated from field: platform.daemon.v1.Heartbeat heartbeat = 1;
     */
    value: Heartbeat;
    case: "heartbeat";
  } | {
    /**
     * @generated from field: platform.daemon.v1.ShutdownAlert shutdown_alert = 2;
     */
    value: ShutdownAlert;
    case: "shutdownAlert";
  } | {
    /**
     * @generated from field: platform.daemon.v1.OSUpdateDiff os_update_diff = 3;
     */
    value: OSUpdateDiff;
    case: "osUpdateDiff";
  } | {
    /**
     * @generated from field: platform.daemon.v1.CurrentDaemonVersion current_daemon_version = 4;
     */
    value: CurrentDaemonVersion;
    case: "currentDaemonVersion";
  } | {
    /**
     * @generated from field: platform.daemon.v1.SystemStats system_stats = 5;
     */
    value: SystemStats;
    case: "systemStats";
  } | {
    /**
     * Deprecated: use SettingsSaved instead
     *
     * @generated from field: platform.daemon.v1.DeviceInitialized device_initialized = 6;
     */
    value: DeviceInitialized;
    case: "deviceInitialized";
  } | {
    /**
     * @generated from field: platform.daemon.v1.UploadFileReady upload_file_ready = 7;
     */
    value: UploadFileReady;
    case: "uploadFileReady";
  } | {
    /**
     * @generated from field: platform.daemon.v1.UploadFileChunkCompleted upload_file_chunk_completed = 8;
     */
    value: UploadFileChunkCompleted;
    case: "uploadFileChunkCompleted";
  } | {
    /**
     * @generated from field: platform.daemon.v1.SettingsSaved settings_saved = 9;
     */
    value: SettingsSaved;
    case: "settingsSaved";
  } | {
    /**
     * @generated from field: platform.daemon.v1.WireguardInterfaceAdded wireguard_interface_added = 10;
     */
    value: WireguardInterfaceAdded;
    case: "wireguardInterfaceAdded";
  } | {
    /**
     * @generated from field: platform.daemon.v1.WireguardInterfaceRemoved wireguard_interface_removed = 11;
     */
    value: WireguardInterfaceRemoved;
    case: "wireguardInterfaceRemoved";
  } | {
    /**
     * @generated from field: platform.daemon.v1.WireguardPeerAdded wireguard_peer_added = 12;
     */
    value: WireguardPeerAdded;
    case: "wireguardPeerAdded";
  } | {
    /**
     * @generated from field: platform.daemon.v1.STUNServerSet stun_server_set = 13;
     */
    value: STUNServerSet;
    case: "stunServerSet";
  } | {
    /**
     * @generated from field: platform.daemon.v1.LocatorServerAdded locator_server_added = 14;
     */
    value: LocatorServerAdded;
    case: "locatorServerAdded";
  } | {
    /**
     * @generated from field: platform.daemon.v1.LocatorServerRemoved locator_server_removed = 15;
     */
    value: LocatorServerRemoved;
    case: "locatorServerRemoved";
  } | {
    /**
     * Deprecated
     *
     * @generated from field: platform.daemon.v1.AllLocatorsDisabled all_locators_disabled = 16;
     */
    value: AllLocatorsDisabled;
    case: "allLocatorsDisabled";
  } | {
    /**
     * @generated from field: platform.daemon.v1.ComponentVersions component_versions = 17;
     */
    value: ComponentVersions;
    case: "componentVersions";
  } | {
    /**
     * @generated from field: platform.daemon.v1.Logs logs = 18;
     */
    value: Logs;
    case: "logs";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DaemonMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.DaemonMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "heartbeat", kind: "message", T: Heartbeat, oneof: "message" },
    { no: 2, name: "shutdown_alert", kind: "message", T: ShutdownAlert, oneof: "message" },
    { no: 3, name: "os_update_diff", kind: "message", T: OSUpdateDiff, oneof: "message" },
    { no: 4, name: "current_daemon_version", kind: "message", T: CurrentDaemonVersion, oneof: "message" },
    { no: 5, name: "system_stats", kind: "message", T: SystemStats, oneof: "message" },
    { no: 6, name: "device_initialized", kind: "message", T: DeviceInitialized, oneof: "message" },
    { no: 7, name: "upload_file_ready", kind: "message", T: UploadFileReady, oneof: "message" },
    { no: 8, name: "upload_file_chunk_completed", kind: "message", T: UploadFileChunkCompleted, oneof: "message" },
    { no: 9, name: "settings_saved", kind: "message", T: SettingsSaved, oneof: "message" },
    { no: 10, name: "wireguard_interface_added", kind: "message", T: WireguardInterfaceAdded, oneof: "message" },
    { no: 11, name: "wireguard_interface_removed", kind: "message", T: WireguardInterfaceRemoved, oneof: "message" },
    { no: 12, name: "wireguard_peer_added", kind: "message", T: WireguardPeerAdded, oneof: "message" },
    { no: 13, name: "stun_server_set", kind: "message", T: STUNServerSet, oneof: "message" },
    { no: 14, name: "locator_server_added", kind: "message", T: LocatorServerAdded, oneof: "message" },
    { no: 15, name: "locator_server_removed", kind: "message", T: LocatorServerRemoved, oneof: "message" },
    { no: 16, name: "all_locators_disabled", kind: "message", T: AllLocatorsDisabled, oneof: "message" },
    { no: 17, name: "component_versions", kind: "message", T: ComponentVersions, oneof: "message" },
    { no: 18, name: "logs", kind: "message", T: Logs, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaemonMessage {
    return new DaemonMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaemonMessage {
    return new DaemonMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaemonMessage {
    return new DaemonMessage().fromJsonString(jsonString, options);
  }

  static equals(a: DaemonMessage | PlainMessage<DaemonMessage> | undefined, b: DaemonMessage | PlainMessage<DaemonMessage> | undefined): boolean {
    return proto3.util.equals(DaemonMessage, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.ServerMessage
 */
export class ServerMessage extends Message<ServerMessage> {
  /**
   * @generated from oneof platform.daemon.v1.ServerMessage.message
   */
  message: {
    /**
     * @generated from field: platform.daemon.v1.Heartbeat heartbeat = 1;
     */
    value: Heartbeat;
    case: "heartbeat";
  } | {
    /**
     * @generated from field: platform.daemon.v1.ShutdownCommand shutdown = 2;
     */
    value: ShutdownCommand;
    case: "shutdown";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RestartCommand restart = 3;
     */
    value: RestartCommand;
    case: "restart";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RequestOSUpdateDiff request_os_update_diff = 4;
     */
    value: RequestOSUpdateDiff;
    case: "requestOsUpdateDiff";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RequestCurrentDaemonVersion request_current_daemon_version = 5;
     */
    value: RequestCurrentDaemonVersion;
    case: "requestCurrentDaemonVersion";
  } | {
    /**
     * @generated from field: platform.daemon.v1.ChangeDaemonVersionCommand change_daemon_version_command = 6;
     */
    value: ChangeDaemonVersionCommand;
    case: "changeDaemonVersionCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.InstallOSUpdateCommand install_os_update_command = 7;
     */
    value: InstallOSUpdateCommand;
    case: "installOsUpdateCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.SetSystemImageCommand set_system_image_command = 8;
     */
    value: SetSystemImageCommand;
    case: "setSystemImageCommand";
  } | {
    /**
     * Deprecated: use SaveSettingsCommand instead
     *
     * @generated from field: platform.daemon.v1.SetUserPasswordCommand set_user_password_command = 9;
     */
    value: SetUserPasswordCommand;
    case: "setUserPasswordCommand";
  } | {
    /**
     * Deprecated: use SaveSettingsCommand instead
     *
     * @generated from field: platform.daemon.v1.SetTimeZoneCommand set_time_zone_command = 10;
     */
    value: SetTimeZoneCommand;
    case: "setTimeZoneCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.AddMdnsHostCommand add_mdns_host_command = 11;
     */
    value: AddMdnsHostCommand;
    case: "addMdnsHostCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RemoveMdnsHostCommand remove_mdns_host_command = 12;
     */
    value: RemoveMdnsHostCommand;
    case: "removeMdnsHostCommand";
  } | {
    /**
     * Deprecated: use SaveSettingsCommand instead
     *
     * @generated from field: platform.daemon.v1.InitializeDeviceCommand initialize_device_command = 13;
     */
    value: InitializeDeviceCommand;
    case: "initializeDeviceCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.UploadFileRequest upload_file_request = 14;
     */
    value: UploadFileRequest;
    case: "uploadFileRequest";
  } | {
    /**
     * @generated from field: platform.daemon.v1.SaveSettingsCommand save_settings_command = 15;
     */
    value: SaveSettingsCommand;
    case: "saveSettingsCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.AddWireguardInterface add_wireguard_interface = 16;
     */
    value: AddWireguardInterface;
    case: "addWireguardInterface";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RemoveWireguardInterface remove_wireguard_interface = 17;
     */
    value: RemoveWireguardInterface;
    case: "removeWireguardInterface";
  } | {
    /**
     * @generated from field: platform.daemon.v1.AddWireguardPeer add_wireguard_peer = 18;
     */
    value: AddWireguardPeer;
    case: "addWireguardPeer";
  } | {
    /**
     * @generated from field: platform.daemon.v1.SetSTUNServerCommand set_stun_server_command = 19;
     */
    value: SetSTUNServerCommand;
    case: "setStunServerCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.AddLocatorServerCommand add_locator_server_command = 20;
     */
    value: AddLocatorServerCommand;
    case: "addLocatorServerCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RemoveLocatorServerCommand remove_locator_server_command = 21;
     */
    value: RemoveLocatorServerCommand;
    case: "removeLocatorServerCommand";
  } | {
    /**
     * Deprecated
     *
     * @generated from field: platform.daemon.v1.DisableAllLocatorsCommand disable_all_locators_command = 22;
     */
    value: DisableAllLocatorsCommand;
    case: "disableAllLocatorsCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RequestComponentVersionsCommand request_component_versions_command = 23;
     */
    value: RequestComponentVersionsCommand;
    case: "requestComponentVersionsCommand";
  } | {
    /**
     * @generated from field: platform.daemon.v1.RequestLogsCommand request_logs_command = 24;
     */
    value: RequestLogsCommand;
    case: "requestLogsCommand";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ServerMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ServerMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "heartbeat", kind: "message", T: Heartbeat, oneof: "message" },
    { no: 2, name: "shutdown", kind: "message", T: ShutdownCommand, oneof: "message" },
    { no: 3, name: "restart", kind: "message", T: RestartCommand, oneof: "message" },
    { no: 4, name: "request_os_update_diff", kind: "message", T: RequestOSUpdateDiff, oneof: "message" },
    { no: 5, name: "request_current_daemon_version", kind: "message", T: RequestCurrentDaemonVersion, oneof: "message" },
    { no: 6, name: "change_daemon_version_command", kind: "message", T: ChangeDaemonVersionCommand, oneof: "message" },
    { no: 7, name: "install_os_update_command", kind: "message", T: InstallOSUpdateCommand, oneof: "message" },
    { no: 8, name: "set_system_image_command", kind: "message", T: SetSystemImageCommand, oneof: "message" },
    { no: 9, name: "set_user_password_command", kind: "message", T: SetUserPasswordCommand, oneof: "message" },
    { no: 10, name: "set_time_zone_command", kind: "message", T: SetTimeZoneCommand, oneof: "message" },
    { no: 11, name: "add_mdns_host_command", kind: "message", T: AddMdnsHostCommand, oneof: "message" },
    { no: 12, name: "remove_mdns_host_command", kind: "message", T: RemoveMdnsHostCommand, oneof: "message" },
    { no: 13, name: "initialize_device_command", kind: "message", T: InitializeDeviceCommand, oneof: "message" },
    { no: 14, name: "upload_file_request", kind: "message", T: UploadFileRequest, oneof: "message" },
    { no: 15, name: "save_settings_command", kind: "message", T: SaveSettingsCommand, oneof: "message" },
    { no: 16, name: "add_wireguard_interface", kind: "message", T: AddWireguardInterface, oneof: "message" },
    { no: 17, name: "remove_wireguard_interface", kind: "message", T: RemoveWireguardInterface, oneof: "message" },
    { no: 18, name: "add_wireguard_peer", kind: "message", T: AddWireguardPeer, oneof: "message" },
    { no: 19, name: "set_stun_server_command", kind: "message", T: SetSTUNServerCommand, oneof: "message" },
    { no: 20, name: "add_locator_server_command", kind: "message", T: AddLocatorServerCommand, oneof: "message" },
    { no: 21, name: "remove_locator_server_command", kind: "message", T: RemoveLocatorServerCommand, oneof: "message" },
    { no: 22, name: "disable_all_locators_command", kind: "message", T: DisableAllLocatorsCommand, oneof: "message" },
    { no: 23, name: "request_component_versions_command", kind: "message", T: RequestComponentVersionsCommand, oneof: "message" },
    { no: 24, name: "request_logs_command", kind: "message", T: RequestLogsCommand, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerMessage {
    return new ServerMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerMessage {
    return new ServerMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerMessage {
    return new ServerMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ServerMessage | PlainMessage<ServerMessage> | undefined, b: ServerMessage | PlainMessage<ServerMessage> | undefined): boolean {
    return proto3.util.equals(ServerMessage, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.Heartbeat
 */
export class Heartbeat extends Message<Heartbeat> {
  constructor(data?: PartialMessage<Heartbeat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.Heartbeat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Heartbeat {
    return new Heartbeat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Heartbeat {
    return new Heartbeat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Heartbeat {
    return new Heartbeat().fromJsonString(jsonString, options);
  }

  static equals(a: Heartbeat | PlainMessage<Heartbeat> | undefined, b: Heartbeat | PlainMessage<Heartbeat> | undefined): boolean {
    return proto3.util.equals(Heartbeat, a, b);
  }
}

/**
 * ShutdownAlert notifies the Server that the host is about to shutdown
 *
 * @generated from message platform.daemon.v1.ShutdownAlert
 */
export class ShutdownAlert extends Message<ShutdownAlert> {
  constructor(data?: PartialMessage<ShutdownAlert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ShutdownAlert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownAlert {
    return new ShutdownAlert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownAlert {
    return new ShutdownAlert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownAlert {
    return new ShutdownAlert().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownAlert | PlainMessage<ShutdownAlert> | undefined, b: ShutdownAlert | PlainMessage<ShutdownAlert> | undefined): boolean {
    return proto3.util.equals(ShutdownAlert, a, b);
  }
}

/**
 * OSUpdateDiff is the result of the `nvd diff` command
 *
 * @generated from message platform.daemon.v1.OSUpdateDiff
 */
export class OSUpdateDiff extends Message<OSUpdateDiff> {
  /**
   * @generated from field: string description = 1;
   */
  description = "";

  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<OSUpdateDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.OSUpdateDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OSUpdateDiff {
    return new OSUpdateDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OSUpdateDiff {
    return new OSUpdateDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OSUpdateDiff {
    return new OSUpdateDiff().fromJsonString(jsonString, options);
  }

  static equals(a: OSUpdateDiff | PlainMessage<OSUpdateDiff> | undefined, b: OSUpdateDiff | PlainMessage<OSUpdateDiff> | undefined): boolean {
    return proto3.util.equals(OSUpdateDiff, a, b);
  }
}

/**
 * CurrentDaemonVersion is the current daemon version
 *
 * @generated from message platform.daemon.v1.CurrentDaemonVersion
 */
export class CurrentDaemonVersion extends Message<CurrentDaemonVersion> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string vendor_hash = 2;
   */
  vendorHash = "";

  /**
   * @generated from field: string src_hash = 3;
   */
  srcHash = "";

  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<CurrentDaemonVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.CurrentDaemonVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vendor_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "src_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrentDaemonVersion {
    return new CurrentDaemonVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrentDaemonVersion {
    return new CurrentDaemonVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrentDaemonVersion {
    return new CurrentDaemonVersion().fromJsonString(jsonString, options);
  }

  static equals(a: CurrentDaemonVersion | PlainMessage<CurrentDaemonVersion> | undefined, b: CurrentDaemonVersion | PlainMessage<CurrentDaemonVersion> | undefined): boolean {
    return proto3.util.equals(CurrentDaemonVersion, a, b);
  }
}

/**
 * Deprecated: use SettingsSaved instead
 *
 * @generated from message platform.daemon.v1.DeviceInitialized
 */
export class DeviceInitialized extends Message<DeviceInitialized> {
  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<DeviceInitialized>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.DeviceInitialized";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceInitialized {
    return new DeviceInitialized().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceInitialized {
    return new DeviceInitialized().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceInitialized {
    return new DeviceInitialized().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceInitialized | PlainMessage<DeviceInitialized> | undefined, b: DeviceInitialized | PlainMessage<DeviceInitialized> | undefined): boolean {
    return proto3.util.equals(DeviceInitialized, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.DaemonError
 */
export class DaemonError extends Message<DaemonError> {
  /**
   * @generated from field: string error = 1;
   */
  error = "";

  constructor(data?: PartialMessage<DaemonError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.DaemonError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaemonError {
    return new DaemonError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaemonError {
    return new DaemonError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaemonError {
    return new DaemonError().fromJsonString(jsonString, options);
  }

  static equals(a: DaemonError | PlainMessage<DaemonError> | undefined, b: DaemonError | PlainMessage<DaemonError> | undefined): boolean {
    return proto3.util.equals(DaemonError, a, b);
  }
}

/**
 * UploadFileReady tells the server that the daemon is ready to start receiving file data chunks
 *
 * @generated from message platform.daemon.v1.UploadFileReady
 */
export class UploadFileReady extends Message<UploadFileReady> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<UploadFileReady>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.UploadFileReady";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFileReady {
    return new UploadFileReady().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFileReady {
    return new UploadFileReady().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFileReady {
    return new UploadFileReady().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFileReady | PlainMessage<UploadFileReady> | undefined, b: UploadFileReady | PlainMessage<UploadFileReady> | undefined): boolean {
    return proto3.util.equals(UploadFileReady, a, b);
  }
}

/**
 * UploadFileChunkCompleted tells the server that the daemon is ready for another chunk of data during a file upload
 *
 * @generated from message platform.daemon.v1.UploadFileChunkCompleted
 */
export class UploadFileChunkCompleted extends Message<UploadFileChunkCompleted> {
  /**
   * @generated from field: string file_id = 1;
   */
  fileId = "";

  /**
   * @generated from field: uint32 index = 2;
   */
  index = 0;

  constructor(data?: PartialMessage<UploadFileChunkCompleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.UploadFileChunkCompleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFileChunkCompleted {
    return new UploadFileChunkCompleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFileChunkCompleted {
    return new UploadFileChunkCompleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFileChunkCompleted {
    return new UploadFileChunkCompleted().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFileChunkCompleted | PlainMessage<UploadFileChunkCompleted> | undefined, b: UploadFileChunkCompleted | PlainMessage<UploadFileChunkCompleted> | undefined): boolean {
    return proto3.util.equals(UploadFileChunkCompleted, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.SettingsSaved
 */
export class SettingsSaved extends Message<SettingsSaved> {
  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<SettingsSaved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.SettingsSaved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SettingsSaved {
    return new SettingsSaved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SettingsSaved {
    return new SettingsSaved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SettingsSaved {
    return new SettingsSaved().fromJsonString(jsonString, options);
  }

  static equals(a: SettingsSaved | PlainMessage<SettingsSaved> | undefined, b: SettingsSaved | PlainMessage<SettingsSaved> | undefined): boolean {
    return proto3.util.equals(SettingsSaved, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.WireguardInterfaceAdded
 */
export class WireguardInterfaceAdded extends Message<WireguardInterfaceAdded> {
  /**
   * @generated from field: string wireguard_interface = 1;
   */
  wireguardInterface = "";

  /**
   * @generated from field: string public_key = 2;
   */
  publicKey = "";

  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<WireguardInterfaceAdded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.WireguardInterfaceAdded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WireguardInterfaceAdded {
    return new WireguardInterfaceAdded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WireguardInterfaceAdded {
    return new WireguardInterfaceAdded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WireguardInterfaceAdded {
    return new WireguardInterfaceAdded().fromJsonString(jsonString, options);
  }

  static equals(a: WireguardInterfaceAdded | PlainMessage<WireguardInterfaceAdded> | undefined, b: WireguardInterfaceAdded | PlainMessage<WireguardInterfaceAdded> | undefined): boolean {
    return proto3.util.equals(WireguardInterfaceAdded, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.WireguardInterfaceRemoved
 */
export class WireguardInterfaceRemoved extends Message<WireguardInterfaceRemoved> {
  /**
   * @generated from field: string wireguard_interface = 1;
   */
  wireguardInterface = "";

  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<WireguardInterfaceRemoved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.WireguardInterfaceRemoved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WireguardInterfaceRemoved {
    return new WireguardInterfaceRemoved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WireguardInterfaceRemoved {
    return new WireguardInterfaceRemoved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WireguardInterfaceRemoved {
    return new WireguardInterfaceRemoved().fromJsonString(jsonString, options);
  }

  static equals(a: WireguardInterfaceRemoved | PlainMessage<WireguardInterfaceRemoved> | undefined, b: WireguardInterfaceRemoved | PlainMessage<WireguardInterfaceRemoved> | undefined): boolean {
    return proto3.util.equals(WireguardInterfaceRemoved, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.WireguardPeerAdded
 */
export class WireguardPeerAdded extends Message<WireguardPeerAdded> {
  /**
   * @generated from field: string wireguard_interface = 1;
   */
  wireguardInterface = "";

  /**
   * @generated from field: string client_public_key = 2;
   */
  clientPublicKey = "";

  /**
   * @generated from field: repeated string addresses = 3;
   */
  addresses: string[] = [];

  /**
   * @generated from field: repeated string dns_servers = 4;
   */
  dnsServers: string[] = [];

  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<WireguardPeerAdded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.WireguardPeerAdded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "dns_servers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WireguardPeerAdded {
    return new WireguardPeerAdded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WireguardPeerAdded {
    return new WireguardPeerAdded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WireguardPeerAdded {
    return new WireguardPeerAdded().fromJsonString(jsonString, options);
  }

  static equals(a: WireguardPeerAdded | PlainMessage<WireguardPeerAdded> | undefined, b: WireguardPeerAdded | PlainMessage<WireguardPeerAdded> | undefined): boolean {
    return proto3.util.equals(WireguardPeerAdded, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.STUNServerSet
 */
export class STUNServerSet extends Message<STUNServerSet> {
  /**
   * @generated from field: string server_address = 1;
   */
  serverAddress = "";

  /**
   * @generated from field: string wireguard_interface = 2;
   */
  wireguardInterface = "";

  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<STUNServerSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.STUNServerSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "server_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): STUNServerSet {
    return new STUNServerSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): STUNServerSet {
    return new STUNServerSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): STUNServerSet {
    return new STUNServerSet().fromJsonString(jsonString, options);
  }

  static equals(a: STUNServerSet | PlainMessage<STUNServerSet> | undefined, b: STUNServerSet | PlainMessage<STUNServerSet> | undefined): boolean {
    return proto3.util.equals(STUNServerSet, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.LocatorServerAdded
 */
export class LocatorServerAdded extends Message<LocatorServerAdded> {
  /**
   * @generated from field: string locator_address = 1;
   */
  locatorAddress = "";

  /**
   * @generated from field: string wireguard_interface = 2;
   */
  wireguardInterface = "";

  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<LocatorServerAdded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.LocatorServerAdded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocatorServerAdded {
    return new LocatorServerAdded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocatorServerAdded {
    return new LocatorServerAdded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocatorServerAdded {
    return new LocatorServerAdded().fromJsonString(jsonString, options);
  }

  static equals(a: LocatorServerAdded | PlainMessage<LocatorServerAdded> | undefined, b: LocatorServerAdded | PlainMessage<LocatorServerAdded> | undefined): boolean {
    return proto3.util.equals(LocatorServerAdded, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.LocatorServerRemoved
 */
export class LocatorServerRemoved extends Message<LocatorServerRemoved> {
  /**
   * @generated from field: string locator_address = 1;
   */
  locatorAddress = "";

  /**
   * @generated from field: string wireguard_interface = 2;
   */
  wireguardInterface = "";

  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<LocatorServerRemoved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.LocatorServerRemoved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocatorServerRemoved {
    return new LocatorServerRemoved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocatorServerRemoved {
    return new LocatorServerRemoved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocatorServerRemoved {
    return new LocatorServerRemoved().fromJsonString(jsonString, options);
  }

  static equals(a: LocatorServerRemoved | PlainMessage<LocatorServerRemoved> | undefined, b: LocatorServerRemoved | PlainMessage<LocatorServerRemoved> | undefined): boolean {
    return proto3.util.equals(LocatorServerRemoved, a, b);
  }
}

/**
 * Deprecated
 *
 * @generated from message platform.daemon.v1.AllLocatorsDisabled
 */
export class AllLocatorsDisabled extends Message<AllLocatorsDisabled> {
  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<AllLocatorsDisabled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.AllLocatorsDisabled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllLocatorsDisabled {
    return new AllLocatorsDisabled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllLocatorsDisabled {
    return new AllLocatorsDisabled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllLocatorsDisabled {
    return new AllLocatorsDisabled().fromJsonString(jsonString, options);
  }

  static equals(a: AllLocatorsDisabled | PlainMessage<AllLocatorsDisabled> | undefined, b: AllLocatorsDisabled | PlainMessage<AllLocatorsDisabled> | undefined): boolean {
    return proto3.util.equals(AllLocatorsDisabled, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.ComponentVersions
 */
export class ComponentVersions extends Message<ComponentVersions> {
  /**
   * @generated from field: repeated platform.daemon.v1.ComponentVersion components = 1;
   */
  components: ComponentVersion[] = [];

  constructor(data?: PartialMessage<ComponentVersions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ComponentVersions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "components", kind: "message", T: ComponentVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentVersions {
    return new ComponentVersions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentVersions {
    return new ComponentVersions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentVersions {
    return new ComponentVersions().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentVersions | PlainMessage<ComponentVersions> | undefined, b: ComponentVersions | PlainMessage<ComponentVersions> | undefined): boolean {
    return proto3.util.equals(ComponentVersions, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.Logs
 */
export class Logs extends Message<Logs> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: repeated platform.daemon.v1.Log logs = 2;
   */
  logs: Log[] = [];

  /**
   * @generated from field: string error = 16;
   */
  error = "";

  constructor(data?: PartialMessage<Logs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.Logs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "logs", kind: "message", T: Log, repeated: true },
    { no: 16, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Logs {
    return new Logs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Logs {
    return new Logs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Logs {
    return new Logs().fromJsonString(jsonString, options);
  }

  static equals(a: Logs | PlainMessage<Logs> | undefined, b: Logs | PlainMessage<Logs> | undefined): boolean {
    return proto3.util.equals(Logs, a, b);
  }
}

/**
 * ShutdownCommand tells the daemon to shutdown the host
 *
 * @generated from message platform.daemon.v1.ShutdownCommand
 */
export class ShutdownCommand extends Message<ShutdownCommand> {
  constructor(data?: PartialMessage<ShutdownCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ShutdownCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownCommand {
    return new ShutdownCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownCommand {
    return new ShutdownCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownCommand {
    return new ShutdownCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownCommand | PlainMessage<ShutdownCommand> | undefined, b: ShutdownCommand | PlainMessage<ShutdownCommand> | undefined): boolean {
    return proto3.util.equals(ShutdownCommand, a, b);
  }
}

/**
 * RestartCommand tells the daemon to restart the host
 *
 * @generated from message platform.daemon.v1.RestartCommand
 */
export class RestartCommand extends Message<RestartCommand> {
  constructor(data?: PartialMessage<RestartCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RestartCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartCommand {
    return new RestartCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartCommand {
    return new RestartCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartCommand {
    return new RestartCommand().fromJsonString(jsonString, options);
  }

  static equals(a: RestartCommand | PlainMessage<RestartCommand> | undefined, b: RestartCommand | PlainMessage<RestartCommand> | undefined): boolean {
    return proto3.util.equals(RestartCommand, a, b);
  }
}

/**
 * RequestOSUpdateDiff tells the daemon to check for updates to the host and send the result to the server
 *
 * @generated from message platform.daemon.v1.RequestOSUpdateDiff
 */
export class RequestOSUpdateDiff extends Message<RequestOSUpdateDiff> {
  constructor(data?: PartialMessage<RequestOSUpdateDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RequestOSUpdateDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestOSUpdateDiff {
    return new RequestOSUpdateDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestOSUpdateDiff {
    return new RequestOSUpdateDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestOSUpdateDiff {
    return new RequestOSUpdateDiff().fromJsonString(jsonString, options);
  }

  static equals(a: RequestOSUpdateDiff | PlainMessage<RequestOSUpdateDiff> | undefined, b: RequestOSUpdateDiff | PlainMessage<RequestOSUpdateDiff> | undefined): boolean {
    return proto3.util.equals(RequestOSUpdateDiff, a, b);
  }
}

/**
 * RequestCurrentDaemonVersion tells the daemon to check the current daemon version and send it to the server
 *
 * @generated from message platform.daemon.v1.RequestCurrentDaemonVersion
 */
export class RequestCurrentDaemonVersion extends Message<RequestCurrentDaemonVersion> {
  constructor(data?: PartialMessage<RequestCurrentDaemonVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RequestCurrentDaemonVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestCurrentDaemonVersion {
    return new RequestCurrentDaemonVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestCurrentDaemonVersion {
    return new RequestCurrentDaemonVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestCurrentDaemonVersion {
    return new RequestCurrentDaemonVersion().fromJsonString(jsonString, options);
  }

  static equals(a: RequestCurrentDaemonVersion | PlainMessage<RequestCurrentDaemonVersion> | undefined, b: RequestCurrentDaemonVersion | PlainMessage<RequestCurrentDaemonVersion> | undefined): boolean {
    return proto3.util.equals(RequestCurrentDaemonVersion, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.ChangeDaemonVersionCommand
 */
export class ChangeDaemonVersionCommand extends Message<ChangeDaemonVersionCommand> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string vendor_hash = 2;
   */
  vendorHash = "";

  /**
   * @generated from field: string src_hash = 3;
   */
  srcHash = "";

  constructor(data?: PartialMessage<ChangeDaemonVersionCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ChangeDaemonVersionCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vendor_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "src_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeDaemonVersionCommand {
    return new ChangeDaemonVersionCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeDaemonVersionCommand {
    return new ChangeDaemonVersionCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeDaemonVersionCommand {
    return new ChangeDaemonVersionCommand().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeDaemonVersionCommand | PlainMessage<ChangeDaemonVersionCommand> | undefined, b: ChangeDaemonVersionCommand | PlainMessage<ChangeDaemonVersionCommand> | undefined): boolean {
    return proto3.util.equals(ChangeDaemonVersionCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.InstallOSUpdateCommand
 */
export class InstallOSUpdateCommand extends Message<InstallOSUpdateCommand> {
  constructor(data?: PartialMessage<InstallOSUpdateCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.InstallOSUpdateCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallOSUpdateCommand {
    return new InstallOSUpdateCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallOSUpdateCommand {
    return new InstallOSUpdateCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallOSUpdateCommand {
    return new InstallOSUpdateCommand().fromJsonString(jsonString, options);
  }

  static equals(a: InstallOSUpdateCommand | PlainMessage<InstallOSUpdateCommand> | undefined, b: InstallOSUpdateCommand | PlainMessage<InstallOSUpdateCommand> | undefined): boolean {
    return proto3.util.equals(InstallOSUpdateCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.SetSystemImageCommand
 */
export class SetSystemImageCommand extends Message<SetSystemImageCommand> {
  /**
   * @generated from field: string current_image = 1;
   */
  currentImage = "";

  /**
   * @generated from field: string requested_image = 2;
   */
  requestedImage = "";

  constructor(data?: PartialMessage<SetSystemImageCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.SetSystemImageCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "requested_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSystemImageCommand {
    return new SetSystemImageCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSystemImageCommand {
    return new SetSystemImageCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSystemImageCommand {
    return new SetSystemImageCommand().fromJsonString(jsonString, options);
  }

  static equals(a: SetSystemImageCommand | PlainMessage<SetSystemImageCommand> | undefined, b: SetSystemImageCommand | PlainMessage<SetSystemImageCommand> | undefined): boolean {
    return proto3.util.equals(SetSystemImageCommand, a, b);
  }
}

/**
 * Deprecated: use SaveSettingsCommand instead
 *
 * @generated from message platform.daemon.v1.InitializeDeviceCommand
 */
export class InitializeDeviceCommand extends Message<InitializeDeviceCommand> {
  /**
   * @generated from field: platform.daemon.v1.SetUserPasswordCommand user = 1;
   */
  user?: SetUserPasswordCommand;

  /**
   * @generated from field: platform.daemon.v1.SetTimeZoneCommand time_zone = 2;
   */
  timeZone?: SetTimeZoneCommand;

  constructor(data?: PartialMessage<InitializeDeviceCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.InitializeDeviceCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: SetUserPasswordCommand },
    { no: 2, name: "time_zone", kind: "message", T: SetTimeZoneCommand },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeDeviceCommand {
    return new InitializeDeviceCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeDeviceCommand {
    return new InitializeDeviceCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeDeviceCommand {
    return new InitializeDeviceCommand().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeDeviceCommand | PlainMessage<InitializeDeviceCommand> | undefined, b: InitializeDeviceCommand | PlainMessage<InitializeDeviceCommand> | undefined): boolean {
    return proto3.util.equals(InitializeDeviceCommand, a, b);
  }
}

/**
 * Deprecated: use SaveSettingsCommand instead
 *
 * @generated from message platform.daemon.v1.SetUserPasswordCommand
 */
export class SetUserPasswordCommand extends Message<SetUserPasswordCommand> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<SetUserPasswordCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.SetUserPasswordCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetUserPasswordCommand {
    return new SetUserPasswordCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetUserPasswordCommand {
    return new SetUserPasswordCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetUserPasswordCommand {
    return new SetUserPasswordCommand().fromJsonString(jsonString, options);
  }

  static equals(a: SetUserPasswordCommand | PlainMessage<SetUserPasswordCommand> | undefined, b: SetUserPasswordCommand | PlainMessage<SetUserPasswordCommand> | undefined): boolean {
    return proto3.util.equals(SetUserPasswordCommand, a, b);
  }
}

/**
 * Deprecated: use SaveSettingsCommand instead
 *
 * @generated from message platform.daemon.v1.SetTimeZoneCommand
 */
export class SetTimeZoneCommand extends Message<SetTimeZoneCommand> {
  /**
   * time_zone must be a valid TZ identifier from: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
   *
   * @generated from field: string time_zone = 1;
   */
  timeZone = "";

  constructor(data?: PartialMessage<SetTimeZoneCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.SetTimeZoneCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetTimeZoneCommand {
    return new SetTimeZoneCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetTimeZoneCommand {
    return new SetTimeZoneCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetTimeZoneCommand {
    return new SetTimeZoneCommand().fromJsonString(jsonString, options);
  }

  static equals(a: SetTimeZoneCommand | PlainMessage<SetTimeZoneCommand> | undefined, b: SetTimeZoneCommand | PlainMessage<SetTimeZoneCommand> | undefined): boolean {
    return proto3.util.equals(SetTimeZoneCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.AddMdnsHostCommand
 */
export class AddMdnsHostCommand extends Message<AddMdnsHostCommand> {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname = "";

  constructor(data?: PartialMessage<AddMdnsHostCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.AddMdnsHostCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMdnsHostCommand {
    return new AddMdnsHostCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMdnsHostCommand {
    return new AddMdnsHostCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMdnsHostCommand {
    return new AddMdnsHostCommand().fromJsonString(jsonString, options);
  }

  static equals(a: AddMdnsHostCommand | PlainMessage<AddMdnsHostCommand> | undefined, b: AddMdnsHostCommand | PlainMessage<AddMdnsHostCommand> | undefined): boolean {
    return proto3.util.equals(AddMdnsHostCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RemoveMdnsHostCommand
 */
export class RemoveMdnsHostCommand extends Message<RemoveMdnsHostCommand> {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname = "";

  constructor(data?: PartialMessage<RemoveMdnsHostCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RemoveMdnsHostCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveMdnsHostCommand {
    return new RemoveMdnsHostCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveMdnsHostCommand {
    return new RemoveMdnsHostCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveMdnsHostCommand {
    return new RemoveMdnsHostCommand().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveMdnsHostCommand | PlainMessage<RemoveMdnsHostCommand> | undefined, b: RemoveMdnsHostCommand | PlainMessage<RemoveMdnsHostCommand> | undefined): boolean {
    return proto3.util.equals(RemoveMdnsHostCommand, a, b);
  }
}

/**
 * UploadFileRequest tells the daemon that the server would like to initiate a file upload
 *
 * @generated from message platform.daemon.v1.UploadFileRequest
 */
export class UploadFileRequest extends Message<UploadFileRequest> {
  /**
   * @generated from oneof platform.daemon.v1.UploadFileRequest.data
   */
  data: {
    /**
     * @generated from field: platform.daemon.v1.FileInfo info = 1;
     */
    value: FileInfo;
    case: "info";
  } | {
    /**
     * @generated from field: platform.daemon.v1.FileChunk chunk = 2;
     */
    value: FileChunk;
    case: "chunk";
  } | {
    /**
     * @generated from field: platform.daemon.v1.FileDone done = 3;
     */
    value: FileDone;
    case: "done";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UploadFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.UploadFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: FileInfo, oneof: "data" },
    { no: 2, name: "chunk", kind: "message", T: FileChunk, oneof: "data" },
    { no: 3, name: "done", kind: "message", T: FileDone, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadFileRequest {
    return new UploadFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadFileRequest {
    return new UploadFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadFileRequest {
    return new UploadFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadFileRequest | PlainMessage<UploadFileRequest> | undefined, b: UploadFileRequest | PlainMessage<UploadFileRequest> | undefined): boolean {
    return proto3.util.equals(UploadFileRequest, a, b);
  }
}

/**
 * FileInfo defines the metadata information about a file to be uploaded
 *
 * @generated from message platform.daemon.v1.FileInfo
 */
export class FileInfo extends Message<FileInfo> {
  /**
   * @generated from field: string file_id = 1;
   */
  fileId = "";

  /**
   * @generated from field: string file_path = 2;
   */
  filePath = "";

  constructor(data?: PartialMessage<FileInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.FileInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileInfo {
    return new FileInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileInfo {
    return new FileInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileInfo {
    return new FileInfo().fromJsonString(jsonString, options);
  }

  static equals(a: FileInfo | PlainMessage<FileInfo> | undefined, b: FileInfo | PlainMessage<FileInfo> | undefined): boolean {
    return proto3.util.equals(FileInfo, a, b);
  }
}

/**
 * FileChunk defines a chunk of data passed to the daemon during a file upload
 *
 * @generated from message platform.daemon.v1.FileChunk
 */
export class FileChunk extends Message<FileChunk> {
  /**
   * @generated from field: string file_id = 1;
   */
  fileId = "";

  /**
   * @generated from field: uint32 index = 2;
   */
  index = 0;

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<FileChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.FileChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileChunk {
    return new FileChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileChunk {
    return new FileChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileChunk {
    return new FileChunk().fromJsonString(jsonString, options);
  }

  static equals(a: FileChunk | PlainMessage<FileChunk> | undefined, b: FileChunk | PlainMessage<FileChunk> | undefined): boolean {
    return proto3.util.equals(FileChunk, a, b);
  }
}

/**
 * FileDone tells the daemon that the last file data chunk has been uploaded and the daemon can assemble the final file
 *
 * @generated from message platform.daemon.v1.FileDone
 */
export class FileDone extends Message<FileDone> {
  /**
   * @generated from field: string file_id = 1;
   */
  fileId = "";

  /**
   * @generated from field: uint32 chunk_count = 2;
   */
  chunkCount = 0;

  /**
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  constructor(data?: PartialMessage<FileDone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.FileDone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chunk_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileDone {
    return new FileDone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileDone {
    return new FileDone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileDone {
    return new FileDone().fromJsonString(jsonString, options);
  }

  static equals(a: FileDone | PlainMessage<FileDone> | undefined, b: FileDone | PlainMessage<FileDone> | undefined): boolean {
    return proto3.util.equals(FileDone, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.SaveSettingsCommand
 */
export class SaveSettingsCommand extends Message<SaveSettingsCommand> {
  /**
   * @generated from field: string admin_password = 1;
   */
  adminPassword = "";

  /**
   * time_zone must be a valid TZ identifier from: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
   *
   * @generated from field: string time_zone = 2;
   */
  timeZone = "";

  /**
   * @generated from field: bool enable_ssh = 3;
   */
  enableSsh = false;

  /**
   * @generated from field: repeated string trusted_ssh_keys = 4;
   */
  trustedSshKeys: string[] = [];

  constructor(data?: PartialMessage<SaveSettingsCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.SaveSettingsCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "enable_ssh", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "trusted_ssh_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SaveSettingsCommand {
    return new SaveSettingsCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SaveSettingsCommand {
    return new SaveSettingsCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SaveSettingsCommand {
    return new SaveSettingsCommand().fromJsonString(jsonString, options);
  }

  static equals(a: SaveSettingsCommand | PlainMessage<SaveSettingsCommand> | undefined, b: SaveSettingsCommand | PlainMessage<SaveSettingsCommand> | undefined): boolean {
    return proto3.util.equals(SaveSettingsCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.AddWireguardInterface
 */
export class AddWireguardInterface extends Message<AddWireguardInterface> {
  /**
   * @generated from field: platform.daemon.v1.WireguardInterface interface = 1;
   */
  interface?: WireguardInterface;

  constructor(data?: PartialMessage<AddWireguardInterface>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.AddWireguardInterface";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interface", kind: "message", T: WireguardInterface },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddWireguardInterface {
    return new AddWireguardInterface().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddWireguardInterface {
    return new AddWireguardInterface().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddWireguardInterface {
    return new AddWireguardInterface().fromJsonString(jsonString, options);
  }

  static equals(a: AddWireguardInterface | PlainMessage<AddWireguardInterface> | undefined, b: AddWireguardInterface | PlainMessage<AddWireguardInterface> | undefined): boolean {
    return proto3.util.equals(AddWireguardInterface, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RemoveWireguardInterface
 */
export class RemoveWireguardInterface extends Message<RemoveWireguardInterface> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<RemoveWireguardInterface>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RemoveWireguardInterface";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveWireguardInterface {
    return new RemoveWireguardInterface().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveWireguardInterface {
    return new RemoveWireguardInterface().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveWireguardInterface {
    return new RemoveWireguardInterface().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveWireguardInterface | PlainMessage<RemoveWireguardInterface> | undefined, b: RemoveWireguardInterface | PlainMessage<RemoveWireguardInterface> | undefined): boolean {
    return proto3.util.equals(RemoveWireguardInterface, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.AddWireguardPeer
 */
export class AddWireguardPeer extends Message<AddWireguardPeer> {
  /**
   * @generated from field: platform.daemon.v1.WireguardPeer peer = 1;
   */
  peer?: WireguardPeer;

  /**
   * @generated from field: string wireguard_interface = 2;
   */
  wireguardInterface = "";

  constructor(data?: PartialMessage<AddWireguardPeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.AddWireguardPeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "peer", kind: "message", T: WireguardPeer },
    { no: 2, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddWireguardPeer {
    return new AddWireguardPeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddWireguardPeer {
    return new AddWireguardPeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddWireguardPeer {
    return new AddWireguardPeer().fromJsonString(jsonString, options);
  }

  static equals(a: AddWireguardPeer | PlainMessage<AddWireguardPeer> | undefined, b: AddWireguardPeer | PlainMessage<AddWireguardPeer> | undefined): boolean {
    return proto3.util.equals(AddWireguardPeer, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.SetSTUNServerCommand
 */
export class SetSTUNServerCommand extends Message<SetSTUNServerCommand> {
  /**
   * @generated from field: string server_address = 1;
   */
  serverAddress = "";

  /**
   * @generated from field: string wireguard_interface = 2;
   */
  wireguardInterface = "";

  constructor(data?: PartialMessage<SetSTUNServerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.SetSTUNServerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "server_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSTUNServerCommand {
    return new SetSTUNServerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSTUNServerCommand {
    return new SetSTUNServerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSTUNServerCommand {
    return new SetSTUNServerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: SetSTUNServerCommand | PlainMessage<SetSTUNServerCommand> | undefined, b: SetSTUNServerCommand | PlainMessage<SetSTUNServerCommand> | undefined): boolean {
    return proto3.util.equals(SetSTUNServerCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.AddLocatorServerCommand
 */
export class AddLocatorServerCommand extends Message<AddLocatorServerCommand> {
  /**
   * @generated from field: string locator_address = 1;
   */
  locatorAddress = "";

  /**
   * TODO: eventually this is where the access key will be included that the user receives after purchasing the locator subscription
   *
   * @generated from field: string wireguard_interface = 2;
   */
  wireguardInterface = "";

  constructor(data?: PartialMessage<AddLocatorServerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.AddLocatorServerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddLocatorServerCommand {
    return new AddLocatorServerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddLocatorServerCommand {
    return new AddLocatorServerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddLocatorServerCommand {
    return new AddLocatorServerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: AddLocatorServerCommand | PlainMessage<AddLocatorServerCommand> | undefined, b: AddLocatorServerCommand | PlainMessage<AddLocatorServerCommand> | undefined): boolean {
    return proto3.util.equals(AddLocatorServerCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RemoveLocatorServerCommand
 */
export class RemoveLocatorServerCommand extends Message<RemoveLocatorServerCommand> {
  /**
   * @generated from field: string locator_address = 1;
   */
  locatorAddress = "";

  /**
   * @generated from field: string wireguard_interface = 2;
   */
  wireguardInterface = "";

  constructor(data?: PartialMessage<RemoveLocatorServerCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RemoveLocatorServerCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveLocatorServerCommand {
    return new RemoveLocatorServerCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveLocatorServerCommand {
    return new RemoveLocatorServerCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveLocatorServerCommand {
    return new RemoveLocatorServerCommand().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveLocatorServerCommand | PlainMessage<RemoveLocatorServerCommand> | undefined, b: RemoveLocatorServerCommand | PlainMessage<RemoveLocatorServerCommand> | undefined): boolean {
    return proto3.util.equals(RemoveLocatorServerCommand, a, b);
  }
}

/**
 * Deprecated
 *
 * @generated from message platform.daemon.v1.DisableAllLocatorsCommand
 */
export class DisableAllLocatorsCommand extends Message<DisableAllLocatorsCommand> {
  constructor(data?: PartialMessage<DisableAllLocatorsCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.DisableAllLocatorsCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableAllLocatorsCommand {
    return new DisableAllLocatorsCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableAllLocatorsCommand {
    return new DisableAllLocatorsCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableAllLocatorsCommand {
    return new DisableAllLocatorsCommand().fromJsonString(jsonString, options);
  }

  static equals(a: DisableAllLocatorsCommand | PlainMessage<DisableAllLocatorsCommand> | undefined, b: DisableAllLocatorsCommand | PlainMessage<DisableAllLocatorsCommand> | undefined): boolean {
    return proto3.util.equals(DisableAllLocatorsCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RequestComponentVersionsCommand
 */
export class RequestComponentVersionsCommand extends Message<RequestComponentVersionsCommand> {
  constructor(data?: PartialMessage<RequestComponentVersionsCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RequestComponentVersionsCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestComponentVersionsCommand {
    return new RequestComponentVersionsCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestComponentVersionsCommand {
    return new RequestComponentVersionsCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestComponentVersionsCommand {
    return new RequestComponentVersionsCommand().fromJsonString(jsonString, options);
  }

  static equals(a: RequestComponentVersionsCommand | PlainMessage<RequestComponentVersionsCommand> | undefined, b: RequestComponentVersionsCommand | PlainMessage<RequestComponentVersionsCommand> | undefined): boolean {
    return proto3.util.equals(RequestComponentVersionsCommand, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RequestLogsCommand
 */
export class RequestLogsCommand extends Message<RequestLogsCommand> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * A relative time in seconds before the current time from which to show logs.
   *
   * @generated from field: uint32 since_seconds = 2;
   */
  sinceSeconds = 0;

  constructor(data?: PartialMessage<RequestLogsCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RequestLogsCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "since_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestLogsCommand {
    return new RequestLogsCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestLogsCommand {
    return new RequestLogsCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestLogsCommand {
    return new RequestLogsCommand().fromJsonString(jsonString, options);
  }

  static equals(a: RequestLogsCommand | PlainMessage<RequestLogsCommand> | undefined, b: RequestLogsCommand | PlainMessage<RequestLogsCommand> | undefined): boolean {
    return proto3.util.equals(RequestLogsCommand, a, b);
  }
}

