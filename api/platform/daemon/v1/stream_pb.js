// @generated by protoc-gen-es v1.6.0 with parameter "target=js"
// @generated from file platform/daemon/v1/stream.proto (package platform.daemon.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { SystemStats } from "./system_pb.js";

/**
 * @generated from message platform.daemon.v1.DaemonMessage
 */
export const DaemonMessage = proto3.makeMessageType(
  "platform.daemon.v1.DaemonMessage",
  () => [
    { no: 1, name: "heartbeat", kind: "message", T: Heartbeat, oneof: "message" },
    { no: 2, name: "shutdown_alert", kind: "message", T: ShutdownAlert, oneof: "message" },
    { no: 3, name: "os_update_diff", kind: "message", T: OSUpdateDiff, oneof: "message" },
    { no: 4, name: "current_daemon_version", kind: "message", T: CurrentDaemonVersion, oneof: "message" },
    { no: 5, name: "system_stats", kind: "message", T: SystemStats, oneof: "message" },
  ],
);

/**
 * @generated from message platform.daemon.v1.ServerMessage
 */
export const ServerMessage = proto3.makeMessageType(
  "platform.daemon.v1.ServerMessage",
  () => [
    { no: 1, name: "heartbeat", kind: "message", T: Heartbeat, oneof: "message" },
    { no: 2, name: "shutdown", kind: "message", T: ShutdownCommand, oneof: "message" },
    { no: 3, name: "restart", kind: "message", T: RestartCommand, oneof: "message" },
    { no: 4, name: "request_os_update_diff", kind: "message", T: RequestOSUpdateDiff, oneof: "message" },
    { no: 5, name: "request_current_daemon_version", kind: "message", T: RequestCurrentDaemonVersion, oneof: "message" },
    { no: 6, name: "change_daemon_version_command", kind: "message", T: ChangeDaemonVersionCommand, oneof: "message" },
    { no: 7, name: "install_os_update_command", kind: "message", T: InstallOSUpdateCommand, oneof: "message" },
    { no: 8, name: "set_system_image_command", kind: "message", T: SetSystemImageCommand, oneof: "message" },
    { no: 9, name: "set_user_password_command", kind: "message", T: SetUserPasswordCommand, oneof: "message" },
    { no: 10, name: "set_time_zone_command", kind: "message", T: SetTimeZoneCommand, oneof: "message" },
  ],
);

/**
 * @generated from message platform.daemon.v1.Heartbeat
 */
export const Heartbeat = proto3.makeMessageType(
  "platform.daemon.v1.Heartbeat",
  [],
);

/**
 * ShutdownAlert notifies the Server that the host is about to shutdown
 *
 * @generated from message platform.daemon.v1.ShutdownAlert
 */
export const ShutdownAlert = proto3.makeMessageType(
  "platform.daemon.v1.ShutdownAlert",
  [],
);

/**
 * OSUpdateDiff is the result of the `nvd diff` command
 *
 * @generated from message platform.daemon.v1.OSUpdateDiff
 */
export const OSUpdateDiff = proto3.makeMessageType(
  "platform.daemon.v1.OSUpdateDiff",
  () => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "error", kind: "message", T: DaemonError },
  ],
);

/**
 * CurrentDaemonVersion is the current daemon version
 *
 * @generated from message platform.daemon.v1.CurrentDaemonVersion
 */
export const CurrentDaemonVersion = proto3.makeMessageType(
  "platform.daemon.v1.CurrentDaemonVersion",
  () => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "error", kind: "message", T: DaemonError },
  ],
);

/**
 * @generated from message platform.daemon.v1.DaemonError
 */
export const DaemonError = proto3.makeMessageType(
  "platform.daemon.v1.DaemonError",
  () => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * ShutdownCommand tells the daemon to shutdown the host
 *
 * @generated from message platform.daemon.v1.ShutdownCommand
 */
export const ShutdownCommand = proto3.makeMessageType(
  "platform.daemon.v1.ShutdownCommand",
  [],
);

/**
 * RestartCommand tells the daemon to restart the host
 *
 * @generated from message platform.daemon.v1.RestartCommand
 */
export const RestartCommand = proto3.makeMessageType(
  "platform.daemon.v1.RestartCommand",
  [],
);

/**
 * RequestOSUpdateDiff tells the daemon to check for updates to the host and send the result to the server
 *
 * @generated from message platform.daemon.v1.RequestOSUpdateDiff
 */
export const RequestOSUpdateDiff = proto3.makeMessageType(
  "platform.daemon.v1.RequestOSUpdateDiff",
  [],
);

/**
 * RequestCurrentDaemonVersion tells the daemon to check the current daemon version and send it to the server
 *
 * @generated from message platform.daemon.v1.RequestCurrentDaemonVersion
 */
export const RequestCurrentDaemonVersion = proto3.makeMessageType(
  "platform.daemon.v1.RequestCurrentDaemonVersion",
  [],
);

/**
 * @generated from message platform.daemon.v1.ChangeDaemonVersionCommand
 */
export const ChangeDaemonVersionCommand = proto3.makeMessageType(
  "platform.daemon.v1.ChangeDaemonVersionCommand",
  () => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vendor_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "src_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message platform.daemon.v1.InstallOSUpdateCommand
 */
export const InstallOSUpdateCommand = proto3.makeMessageType(
  "platform.daemon.v1.InstallOSUpdateCommand",
  [],
);

/**
 * @generated from message platform.daemon.v1.SetSystemImageCommand
 */
export const SetSystemImageCommand = proto3.makeMessageType(
  "platform.daemon.v1.SetSystemImageCommand",
  () => [
    { no: 1, name: "current_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "requested_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message platform.daemon.v1.SetUserPasswordCommand
 */
export const SetUserPasswordCommand = proto3.makeMessageType(
  "platform.daemon.v1.SetUserPasswordCommand",
  () => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message platform.daemon.v1.SetTimeZoneCommand
 */
export const SetTimeZoneCommand = proto3.makeMessageType(
  "platform.daemon.v1.SetTimeZoneCommand",
  () => [
    { no: 1, name: "time_zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

