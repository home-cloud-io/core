// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: platform/daemon/v1/stream.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DaemonMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*DaemonMessage_Heartbeat
	//	*DaemonMessage_ShutdownAlert
	//	*DaemonMessage_OsUpdateDiff
	//	*DaemonMessage_CurrentDaemonVersion
	//	*DaemonMessage_SystemStats
	Message isDaemonMessage_Message `protobuf_oneof:"message"`
}

func (x *DaemonMessage) Reset() {
	*x = DaemonMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonMessage) ProtoMessage() {}

func (x *DaemonMessage) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonMessage.ProtoReflect.Descriptor instead.
func (*DaemonMessage) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{0}
}

func (m *DaemonMessage) GetMessage() isDaemonMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *DaemonMessage) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetMessage().(*DaemonMessage_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *DaemonMessage) GetShutdownAlert() *ShutdownAlert {
	if x, ok := x.GetMessage().(*DaemonMessage_ShutdownAlert); ok {
		return x.ShutdownAlert
	}
	return nil
}

func (x *DaemonMessage) GetOsUpdateDiff() *OSUpdateDiff {
	if x, ok := x.GetMessage().(*DaemonMessage_OsUpdateDiff); ok {
		return x.OsUpdateDiff
	}
	return nil
}

func (x *DaemonMessage) GetCurrentDaemonVersion() *CurrentDaemonVersion {
	if x, ok := x.GetMessage().(*DaemonMessage_CurrentDaemonVersion); ok {
		return x.CurrentDaemonVersion
	}
	return nil
}

func (x *DaemonMessage) GetSystemStats() *SystemStats {
	if x, ok := x.GetMessage().(*DaemonMessage_SystemStats); ok {
		return x.SystemStats
	}
	return nil
}

type isDaemonMessage_Message interface {
	isDaemonMessage_Message()
}

type DaemonMessage_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,1,opt,name=heartbeat,proto3,oneof" bun:"heartbeat" csv:"heartbeat" json:"heartbeat" pg:"heartbeat" yaml:"heartbeat"`
}

type DaemonMessage_ShutdownAlert struct {
	ShutdownAlert *ShutdownAlert `protobuf:"bytes,2,opt,name=shutdown_alert,json=shutdownAlert,proto3,oneof" bun:"shutdown_alert" csv:"shutdown_alert" json:"shutdown_alert" pg:"shutdown_alert" yaml:"shutdown_alert"`
}

type DaemonMessage_OsUpdateDiff struct {
	OsUpdateDiff *OSUpdateDiff `protobuf:"bytes,3,opt,name=os_update_diff,json=osUpdateDiff,proto3,oneof" bun:"os_update_diff" csv:"os_update_diff" json:"os_update_diff" pg:"os_update_diff" yaml:"os_update_diff"`
}

type DaemonMessage_CurrentDaemonVersion struct {
	CurrentDaemonVersion *CurrentDaemonVersion `protobuf:"bytes,4,opt,name=current_daemon_version,json=currentDaemonVersion,proto3,oneof" bun:"current_daemon_version" csv:"current_daemon_version" json:"current_daemon_version" pg:"current_daemon_version" yaml:"current_daemon_version"`
}

type DaemonMessage_SystemStats struct {
	SystemStats *SystemStats `protobuf:"bytes,5,opt,name=system_stats,json=systemStats,proto3,oneof" bun:"system_stats" csv:"system_stats" json:"system_stats" pg:"system_stats" yaml:"system_stats"`
}

func (*DaemonMessage_Heartbeat) isDaemonMessage_Message() {}

func (*DaemonMessage_ShutdownAlert) isDaemonMessage_Message() {}

func (*DaemonMessage_OsUpdateDiff) isDaemonMessage_Message() {}

func (*DaemonMessage_CurrentDaemonVersion) isDaemonMessage_Message() {}

func (*DaemonMessage_SystemStats) isDaemonMessage_Message() {}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*ServerMessage_Heartbeat
	//	*ServerMessage_Shutdown
	//	*ServerMessage_Restart
	//	*ServerMessage_RequestOsUpdateDiff
	//	*ServerMessage_RequestCurrentDaemonVersion
	//	*ServerMessage_ChangeDaemonVersionCommand
	//	*ServerMessage_InstallOsUpdateCommand
	//	*ServerMessage_SetSystemImageCommand
	Message isServerMessage_Message `protobuf_oneof:"message"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{1}
}

func (m *ServerMessage) GetMessage() isServerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ServerMessage) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetMessage().(*ServerMessage_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *ServerMessage) GetShutdown() *ShutdownCommand {
	if x, ok := x.GetMessage().(*ServerMessage_Shutdown); ok {
		return x.Shutdown
	}
	return nil
}

func (x *ServerMessage) GetRestart() *RestartCommand {
	if x, ok := x.GetMessage().(*ServerMessage_Restart); ok {
		return x.Restart
	}
	return nil
}

func (x *ServerMessage) GetRequestOsUpdateDiff() *RequestOSUpdateDiff {
	if x, ok := x.GetMessage().(*ServerMessage_RequestOsUpdateDiff); ok {
		return x.RequestOsUpdateDiff
	}
	return nil
}

func (x *ServerMessage) GetRequestCurrentDaemonVersion() *RequestCurrentDaemonVersion {
	if x, ok := x.GetMessage().(*ServerMessage_RequestCurrentDaemonVersion); ok {
		return x.RequestCurrentDaemonVersion
	}
	return nil
}

func (x *ServerMessage) GetChangeDaemonVersionCommand() *ChangeDaemonVersionCommand {
	if x, ok := x.GetMessage().(*ServerMessage_ChangeDaemonVersionCommand); ok {
		return x.ChangeDaemonVersionCommand
	}
	return nil
}

func (x *ServerMessage) GetInstallOsUpdateCommand() *InstallOSUpdateCommand {
	if x, ok := x.GetMessage().(*ServerMessage_InstallOsUpdateCommand); ok {
		return x.InstallOsUpdateCommand
	}
	return nil
}

func (x *ServerMessage) GetSetSystemImageCommand() *SetSystemImageCommand {
	if x, ok := x.GetMessage().(*ServerMessage_SetSystemImageCommand); ok {
		return x.SetSystemImageCommand
	}
	return nil
}

type isServerMessage_Message interface {
	isServerMessage_Message()
}

type ServerMessage_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,1,opt,name=heartbeat,proto3,oneof" bun:"heartbeat" csv:"heartbeat" json:"heartbeat" pg:"heartbeat" yaml:"heartbeat"`
}

type ServerMessage_Shutdown struct {
	Shutdown *ShutdownCommand `protobuf:"bytes,2,opt,name=shutdown,proto3,oneof" bun:"shutdown" csv:"shutdown" json:"shutdown" pg:"shutdown" yaml:"shutdown"`
}

type ServerMessage_Restart struct {
	Restart *RestartCommand `protobuf:"bytes,3,opt,name=restart,proto3,oneof" bun:"restart" csv:"restart" json:"restart" pg:"restart" yaml:"restart"`
}

type ServerMessage_RequestOsUpdateDiff struct {
	RequestOsUpdateDiff *RequestOSUpdateDiff `protobuf:"bytes,4,opt,name=request_os_update_diff,json=requestOsUpdateDiff,proto3,oneof" bun:"request_os_update_diff" csv:"request_os_update_diff" json:"request_os_update_diff" pg:"request_os_update_diff" yaml:"request_os_update_diff"`
}

type ServerMessage_RequestCurrentDaemonVersion struct {
	RequestCurrentDaemonVersion *RequestCurrentDaemonVersion `protobuf:"bytes,5,opt,name=request_current_daemon_version,json=requestCurrentDaemonVersion,proto3,oneof" bun:"request_current_daemon_version" csv:"request_current_daemon_version" json:"request_current_daemon_version" pg:"request_current_daemon_version" yaml:"request_current_daemon_version"`
}

type ServerMessage_ChangeDaemonVersionCommand struct {
	ChangeDaemonVersionCommand *ChangeDaemonVersionCommand `protobuf:"bytes,6,opt,name=change_daemon_version_command,json=changeDaemonVersionCommand,proto3,oneof" bun:"change_daemon_version_command" csv:"change_daemon_version_command" json:"change_daemon_version_command" pg:"change_daemon_version_command" yaml:"change_daemon_version_command"`
}

type ServerMessage_InstallOsUpdateCommand struct {
	InstallOsUpdateCommand *InstallOSUpdateCommand `protobuf:"bytes,7,opt,name=install_os_update_command,json=installOsUpdateCommand,proto3,oneof" bun:"install_os_update_command" csv:"install_os_update_command" json:"install_os_update_command" pg:"install_os_update_command" yaml:"install_os_update_command"`
}

type ServerMessage_SetSystemImageCommand struct {
	SetSystemImageCommand *SetSystemImageCommand `protobuf:"bytes,8,opt,name=set_system_image_command,json=setSystemImageCommand,proto3,oneof" bun:"set_system_image_command" csv:"set_system_image_command" json:"set_system_image_command" pg:"set_system_image_command" yaml:"set_system_image_command"`
}

func (*ServerMessage_Heartbeat) isServerMessage_Message() {}

func (*ServerMessage_Shutdown) isServerMessage_Message() {}

func (*ServerMessage_Restart) isServerMessage_Message() {}

func (*ServerMessage_RequestOsUpdateDiff) isServerMessage_Message() {}

func (*ServerMessage_RequestCurrentDaemonVersion) isServerMessage_Message() {}

func (*ServerMessage_ChangeDaemonVersionCommand) isServerMessage_Message() {}

func (*ServerMessage_InstallOsUpdateCommand) isServerMessage_Message() {}

func (*ServerMessage_SetSystemImageCommand) isServerMessage_Message() {}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{2}
}

// ShutdownAlert notifies the Server that the host is about to shutdown
type ShutdownAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownAlert) Reset() {
	*x = ShutdownAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownAlert) ProtoMessage() {}

func (x *ShutdownAlert) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownAlert.ProtoReflect.Descriptor instead.
func (*ShutdownAlert) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{3}
}

// OSUpdateDiff is the result of the `nvd diff` command
type OSUpdateDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string       `protobuf:"bytes,1,opt,name=description,proto3" json:"description" bun:"description" csv:"description" pg:"description" yaml:"description"`
	Error       *DaemonError `protobuf:"bytes,16,opt,name=error,proto3" json:"error" bun:"error" csv:"error" pg:"error" yaml:"error"`
}

func (x *OSUpdateDiff) Reset() {
	*x = OSUpdateDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSUpdateDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSUpdateDiff) ProtoMessage() {}

func (x *OSUpdateDiff) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSUpdateDiff.ProtoReflect.Descriptor instead.
func (*OSUpdateDiff) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{4}
}

func (x *OSUpdateDiff) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OSUpdateDiff) GetError() *DaemonError {
	if x != nil {
		return x.Error
	}
	return nil
}

// CurrentDaemonVersion is the current daemon version
type CurrentDaemonVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string       `protobuf:"bytes,1,opt,name=version,proto3" json:"version" bun:"version" csv:"version" pg:"version" yaml:"version"`
	Error   *DaemonError `protobuf:"bytes,16,opt,name=error,proto3" json:"error" bun:"error" csv:"error" pg:"error" yaml:"error"`
}

func (x *CurrentDaemonVersion) Reset() {
	*x = CurrentDaemonVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentDaemonVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentDaemonVersion) ProtoMessage() {}

func (x *CurrentDaemonVersion) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentDaemonVersion.ProtoReflect.Descriptor instead.
func (*CurrentDaemonVersion) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{5}
}

func (x *CurrentDaemonVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CurrentDaemonVersion) GetError() *DaemonError {
	if x != nil {
		return x.Error
	}
	return nil
}

type DaemonError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error" bun:"error" csv:"error" pg:"error" yaml:"error"`
}

func (x *DaemonError) Reset() {
	*x = DaemonError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonError) ProtoMessage() {}

func (x *DaemonError) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonError.ProtoReflect.Descriptor instead.
func (*DaemonError) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{6}
}

func (x *DaemonError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// ShutdownCommand tells the daemon to shutdown the host
type ShutdownCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownCommand) Reset() {
	*x = ShutdownCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownCommand) ProtoMessage() {}

func (x *ShutdownCommand) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownCommand.ProtoReflect.Descriptor instead.
func (*ShutdownCommand) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{7}
}

// RestartCommand tells the daemon to restart the host
type RestartCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartCommand) Reset() {
	*x = RestartCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartCommand) ProtoMessage() {}

func (x *RestartCommand) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartCommand.ProtoReflect.Descriptor instead.
func (*RestartCommand) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{8}
}

// RequestOSUpdateDiff tells the daemon to check for updates to the host and send the result to the server
type RequestOSUpdateDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestOSUpdateDiff) Reset() {
	*x = RequestOSUpdateDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestOSUpdateDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestOSUpdateDiff) ProtoMessage() {}

func (x *RequestOSUpdateDiff) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestOSUpdateDiff.ProtoReflect.Descriptor instead.
func (*RequestOSUpdateDiff) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{9}
}

// RequestCurrentDaemonVersion tells the daemon to check the current daemon version and send it to the server
type RequestCurrentDaemonVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestCurrentDaemonVersion) Reset() {
	*x = RequestCurrentDaemonVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCurrentDaemonVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCurrentDaemonVersion) ProtoMessage() {}

func (x *RequestCurrentDaemonVersion) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCurrentDaemonVersion.ProtoReflect.Descriptor instead.
func (*RequestCurrentDaemonVersion) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{10}
}

type ChangeDaemonVersionCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string `protobuf:"bytes,1,opt,name=version,proto3" json:"version" bun:"version" csv:"version" pg:"version" yaml:"version"`
	VendorHash string `protobuf:"bytes,2,opt,name=vendor_hash,json=vendorHash,proto3" json:"vendor_hash" bun:"vendor_hash" csv:"vendor_hash" pg:"vendor_hash" yaml:"vendor_hash"`
	SrcHash    string `protobuf:"bytes,3,opt,name=src_hash,json=srcHash,proto3" json:"src_hash" bun:"src_hash" csv:"src_hash" pg:"src_hash" yaml:"src_hash"`
}

func (x *ChangeDaemonVersionCommand) Reset() {
	*x = ChangeDaemonVersionCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDaemonVersionCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDaemonVersionCommand) ProtoMessage() {}

func (x *ChangeDaemonVersionCommand) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDaemonVersionCommand.ProtoReflect.Descriptor instead.
func (*ChangeDaemonVersionCommand) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{11}
}

func (x *ChangeDaemonVersionCommand) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ChangeDaemonVersionCommand) GetVendorHash() string {
	if x != nil {
		return x.VendorHash
	}
	return ""
}

func (x *ChangeDaemonVersionCommand) GetSrcHash() string {
	if x != nil {
		return x.SrcHash
	}
	return ""
}

type InstallOSUpdateCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InstallOSUpdateCommand) Reset() {
	*x = InstallOSUpdateCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallOSUpdateCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOSUpdateCommand) ProtoMessage() {}

func (x *InstallOSUpdateCommand) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOSUpdateCommand.ProtoReflect.Descriptor instead.
func (*InstallOSUpdateCommand) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{12}
}

type SetSystemImageCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentImage   string `protobuf:"bytes,1,opt,name=current_image,json=currentImage,proto3" json:"current_image" bun:"current_image" csv:"current_image" pg:"current_image" yaml:"current_image"`
	RequestedImage string `protobuf:"bytes,2,opt,name=requested_image,json=requestedImage,proto3" json:"requested_image" bun:"requested_image" csv:"requested_image" pg:"requested_image" yaml:"requested_image"`
}

func (x *SetSystemImageCommand) Reset() {
	*x = SetSystemImageCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_daemon_v1_stream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSystemImageCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSystemImageCommand) ProtoMessage() {}

func (x *SetSystemImageCommand) ProtoReflect() protoreflect.Message {
	mi := &file_platform_daemon_v1_stream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSystemImageCommand.ProtoReflect.Descriptor instead.
func (*SetSystemImageCommand) Descriptor() ([]byte, []int) {
	return file_platform_daemon_v1_stream_proto_rawDescGZIP(), []int{13}
}

func (x *SetSystemImageCommand) GetCurrentImage() string {
	if x != nil {
		return x.CurrentImage
	}
	return ""
}

func (x *SetSystemImageCommand) GetRequestedImage() string {
	if x != nil {
		return x.RequestedImage
	}
	return ""
}

var File_platform_daemon_v1_stream_proto protoreflect.FileDescriptor

var file_platform_daemon_v1_stream_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x03, 0x0a, 0x0d, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x6f, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x53, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52,
	0x0c, 0x6f, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x60, 0x0a,
	0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xf8, 0x05, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x08, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x5e, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6f, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4f, 0x53, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52,
	0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x76, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x1d,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x67, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x73, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x4f, 0x53, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x64, 0x0a, 0x18, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x0b, 0x0a, 0x09, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x67, 0x0a, 0x0c, 0x4f, 0x53, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x67, 0x0a, 0x14, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x23, 0x0a, 0x0b, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x11, 0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x53, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x66, 0x66, 0x22, 0x1d, 0x0a, 0x1b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x1a, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x18, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x53, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x65, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x32, 0x70, 0x0a, 0x13, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_platform_daemon_v1_stream_proto_rawDescOnce sync.Once
	file_platform_daemon_v1_stream_proto_rawDescData = file_platform_daemon_v1_stream_proto_rawDesc
)

func file_platform_daemon_v1_stream_proto_rawDescGZIP() []byte {
	file_platform_daemon_v1_stream_proto_rawDescOnce.Do(func() {
		file_platform_daemon_v1_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_platform_daemon_v1_stream_proto_rawDescData)
	})
	return file_platform_daemon_v1_stream_proto_rawDescData
}

var file_platform_daemon_v1_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_platform_daemon_v1_stream_proto_goTypes = []any{
	(*DaemonMessage)(nil),               // 0: platform.daemon.v1.DaemonMessage
	(*ServerMessage)(nil),               // 1: platform.daemon.v1.ServerMessage
	(*Heartbeat)(nil),                   // 2: platform.daemon.v1.Heartbeat
	(*ShutdownAlert)(nil),               // 3: platform.daemon.v1.ShutdownAlert
	(*OSUpdateDiff)(nil),                // 4: platform.daemon.v1.OSUpdateDiff
	(*CurrentDaemonVersion)(nil),        // 5: platform.daemon.v1.CurrentDaemonVersion
	(*DaemonError)(nil),                 // 6: platform.daemon.v1.DaemonError
	(*ShutdownCommand)(nil),             // 7: platform.daemon.v1.ShutdownCommand
	(*RestartCommand)(nil),              // 8: platform.daemon.v1.RestartCommand
	(*RequestOSUpdateDiff)(nil),         // 9: platform.daemon.v1.RequestOSUpdateDiff
	(*RequestCurrentDaemonVersion)(nil), // 10: platform.daemon.v1.RequestCurrentDaemonVersion
	(*ChangeDaemonVersionCommand)(nil),  // 11: platform.daemon.v1.ChangeDaemonVersionCommand
	(*InstallOSUpdateCommand)(nil),      // 12: platform.daemon.v1.InstallOSUpdateCommand
	(*SetSystemImageCommand)(nil),       // 13: platform.daemon.v1.SetSystemImageCommand
	(*SystemStats)(nil),                 // 14: platform.daemon.v1.SystemStats
}
var file_platform_daemon_v1_stream_proto_depIdxs = []int32{
	2,  // 0: platform.daemon.v1.DaemonMessage.heartbeat:type_name -> platform.daemon.v1.Heartbeat
	3,  // 1: platform.daemon.v1.DaemonMessage.shutdown_alert:type_name -> platform.daemon.v1.ShutdownAlert
	4,  // 2: platform.daemon.v1.DaemonMessage.os_update_diff:type_name -> platform.daemon.v1.OSUpdateDiff
	5,  // 3: platform.daemon.v1.DaemonMessage.current_daemon_version:type_name -> platform.daemon.v1.CurrentDaemonVersion
	14, // 4: platform.daemon.v1.DaemonMessage.system_stats:type_name -> platform.daemon.v1.SystemStats
	2,  // 5: platform.daemon.v1.ServerMessage.heartbeat:type_name -> platform.daemon.v1.Heartbeat
	7,  // 6: platform.daemon.v1.ServerMessage.shutdown:type_name -> platform.daemon.v1.ShutdownCommand
	8,  // 7: platform.daemon.v1.ServerMessage.restart:type_name -> platform.daemon.v1.RestartCommand
	9,  // 8: platform.daemon.v1.ServerMessage.request_os_update_diff:type_name -> platform.daemon.v1.RequestOSUpdateDiff
	10, // 9: platform.daemon.v1.ServerMessage.request_current_daemon_version:type_name -> platform.daemon.v1.RequestCurrentDaemonVersion
	11, // 10: platform.daemon.v1.ServerMessage.change_daemon_version_command:type_name -> platform.daemon.v1.ChangeDaemonVersionCommand
	12, // 11: platform.daemon.v1.ServerMessage.install_os_update_command:type_name -> platform.daemon.v1.InstallOSUpdateCommand
	13, // 12: platform.daemon.v1.ServerMessage.set_system_image_command:type_name -> platform.daemon.v1.SetSystemImageCommand
	6,  // 13: platform.daemon.v1.OSUpdateDiff.error:type_name -> platform.daemon.v1.DaemonError
	6,  // 14: platform.daemon.v1.CurrentDaemonVersion.error:type_name -> platform.daemon.v1.DaemonError
	0,  // 15: platform.daemon.v1.DaemonStreamService.Communicate:input_type -> platform.daemon.v1.DaemonMessage
	1,  // 16: platform.daemon.v1.DaemonStreamService.Communicate:output_type -> platform.daemon.v1.ServerMessage
	16, // [16:17] is the sub-list for method output_type
	15, // [15:16] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_platform_daemon_v1_stream_proto_init() }
func file_platform_daemon_v1_stream_proto_init() {
	if File_platform_daemon_v1_stream_proto != nil {
		return
	}
	file_platform_daemon_v1_system_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_platform_daemon_v1_stream_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DaemonMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ShutdownAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*OSUpdateDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentDaemonVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DaemonError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ShutdownCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RestartCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RequestOSUpdateDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RequestCurrentDaemonVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ChangeDaemonVersionCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*InstallOSUpdateCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_daemon_v1_stream_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SetSystemImageCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_platform_daemon_v1_stream_proto_msgTypes[0].OneofWrappers = []any{
		(*DaemonMessage_Heartbeat)(nil),
		(*DaemonMessage_ShutdownAlert)(nil),
		(*DaemonMessage_OsUpdateDiff)(nil),
		(*DaemonMessage_CurrentDaemonVersion)(nil),
		(*DaemonMessage_SystemStats)(nil),
	}
	file_platform_daemon_v1_stream_proto_msgTypes[1].OneofWrappers = []any{
		(*ServerMessage_Heartbeat)(nil),
		(*ServerMessage_Shutdown)(nil),
		(*ServerMessage_Restart)(nil),
		(*ServerMessage_RequestOsUpdateDiff)(nil),
		(*ServerMessage_RequestCurrentDaemonVersion)(nil),
		(*ServerMessage_ChangeDaemonVersionCommand)(nil),
		(*ServerMessage_InstallOsUpdateCommand)(nil),
		(*ServerMessage_SetSystemImageCommand)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_platform_daemon_v1_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_platform_daemon_v1_stream_proto_goTypes,
		DependencyIndexes: file_platform_daemon_v1_stream_proto_depIdxs,
		MessageInfos:      file_platform_daemon_v1_stream_proto_msgTypes,
	}.Build()
	File_platform_daemon_v1_stream_proto = out.File
	file_platform_daemon_v1_stream_proto_rawDesc = nil
	file_platform_daemon_v1_stream_proto_goTypes = nil
	file_platform_daemon_v1_stream_proto_depIdxs = nil
}
