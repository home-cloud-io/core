// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/daemon/v1/system.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SystemStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemStats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemStatsMultiError, or
// nil if none found.
func (m *SystemStats) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemStatsValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemStatsValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemStatsValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemStatsValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemStatsValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemStatsValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemStatsValidationError{
					field:  "Compute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemStatsValidationError{
					field:  "Compute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemStatsValidationError{
				field:  "Compute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemStatsValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemStatsValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemStatsValidationError{
				field:  "Memory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDrives() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemStatsValidationError{
						field:  fmt.Sprintf("Drives[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemStatsValidationError{
						field:  fmt.Sprintf("Drives[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemStatsValidationError{
					field:  fmt.Sprintf("Drives[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SystemStatsMultiError(errors)
	}

	return nil
}

// SystemStatsMultiError is an error wrapping multiple validation errors
// returned by SystemStats.ValidateAll() if the designated constraints aren't met.
type SystemStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemStatsMultiError) AllErrors() []error { return m }

// SystemStatsValidationError is the validation error returned by
// SystemStats.Validate if the designated constraints aren't met.
type SystemStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemStatsValidationError) ErrorName() string { return "SystemStatsValidationError" }

// Error satisfies the builtin error interface
func (e SystemStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemStatsValidationError{}

// Validate checks the field values on ComputeStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComputeStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComputeStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComputeStatsMultiError, or
// nil if none found.
func (m *ComputeStats) ValidateAll() error {
	return m.validate(true)
}

func (m *ComputeStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserPercent

	// no validation rules for SystemPercent

	// no validation rules for IdlePercent

	if len(errors) > 0 {
		return ComputeStatsMultiError(errors)
	}

	return nil
}

// ComputeStatsMultiError is an error wrapping multiple validation errors
// returned by ComputeStats.ValidateAll() if the designated constraints aren't met.
type ComputeStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComputeStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComputeStatsMultiError) AllErrors() []error { return m }

// ComputeStatsValidationError is the validation error returned by
// ComputeStats.Validate if the designated constraints aren't met.
type ComputeStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComputeStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComputeStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComputeStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComputeStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComputeStatsValidationError) ErrorName() string { return "ComputeStatsValidationError" }

// Error satisfies the builtin error interface
func (e ComputeStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComputeStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComputeStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComputeStatsValidationError{}

// Validate checks the field values on MemoryStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemoryStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemoryStats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemoryStatsMultiError, or
// nil if none found.
func (m *MemoryStats) ValidateAll() error {
	return m.validate(true)
}

func (m *MemoryStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalBytes

	// no validation rules for UsedBytes

	// no validation rules for CachedBytes

	// no validation rules for FreeBytes

	// no validation rules for AvailableBytes

	if len(errors) > 0 {
		return MemoryStatsMultiError(errors)
	}

	return nil
}

// MemoryStatsMultiError is an error wrapping multiple validation errors
// returned by MemoryStats.ValidateAll() if the designated constraints aren't met.
type MemoryStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemoryStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemoryStatsMultiError) AllErrors() []error { return m }

// MemoryStatsValidationError is the validation error returned by
// MemoryStats.Validate if the designated constraints aren't met.
type MemoryStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoryStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoryStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoryStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoryStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoryStatsValidationError) ErrorName() string { return "MemoryStatsValidationError" }

// Error satisfies the builtin error interface
func (e MemoryStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemoryStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoryStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoryStatsValidationError{}

// Validate checks the field values on DriveStats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DriveStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DriveStats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DriveStatsMultiError, or
// nil if none found.
func (m *DriveStats) ValidateAll() error {
	return m.validate(true)
}

func (m *DriveStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MountPoint

	// no validation rules for TotalBytes

	// no validation rules for FreeBytes

	if len(errors) > 0 {
		return DriveStatsMultiError(errors)
	}

	return nil
}

// DriveStatsMultiError is an error wrapping multiple validation errors
// returned by DriveStats.ValidateAll() if the designated constraints aren't met.
type DriveStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DriveStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DriveStatsMultiError) AllErrors() []error { return m }

// DriveStatsValidationError is the validation error returned by
// DriveStats.Validate if the designated constraints aren't met.
type DriveStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DriveStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DriveStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DriveStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DriveStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DriveStatsValidationError) ErrorName() string { return "DriveStatsValidationError" }

// Error satisfies the builtin error interface
func (e DriveStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDriveStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DriveStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DriveStatsValidationError{}

// Validate checks the field values on ComponentVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ComponentVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComponentVersionMultiError, or nil if none found.
func (m *ComponentVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Domain

	// no validation rules for Version

	if len(errors) > 0 {
		return ComponentVersionMultiError(errors)
	}

	return nil
}

// ComponentVersionMultiError is an error wrapping multiple validation errors
// returned by ComponentVersion.ValidateAll() if the designated constraints
// aren't met.
type ComponentVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentVersionMultiError) AllErrors() []error { return m }

// ComponentVersionValidationError is the validation error returned by
// ComponentVersion.Validate if the designated constraints aren't met.
type ComponentVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentVersionValidationError) ErrorName() string { return "ComponentVersionValidationError" }

// Error satisfies the builtin error interface
func (e ComponentVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentVersionValidationError{}
