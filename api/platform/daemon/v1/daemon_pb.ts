// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file platform/daemon/v1/daemon.proto (package platform.daemon.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { WireguardInterface, WireguardPeer } from "./wireguard_pb.js";

/**
 * @generated from message platform.daemon.v1.ShutdownHostRequest
 */
export class ShutdownHostRequest extends Message<ShutdownHostRequest> {
  constructor(data?: PartialMessage<ShutdownHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ShutdownHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownHostRequest | PlainMessage<ShutdownHostRequest> | undefined, b: ShutdownHostRequest | PlainMessage<ShutdownHostRequest> | undefined): boolean {
    return proto3.util.equals(ShutdownHostRequest, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.ShutdownHostResponse
 */
export class ShutdownHostResponse extends Message<ShutdownHostResponse> {
  constructor(data?: PartialMessage<ShutdownHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.ShutdownHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownHostResponse | PlainMessage<ShutdownHostResponse> | undefined, b: ShutdownHostResponse | PlainMessage<ShutdownHostResponse> | undefined): boolean {
    return proto3.util.equals(ShutdownHostResponse, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RebootHostRequest
 */
export class RebootHostRequest extends Message<RebootHostRequest> {
  constructor(data?: PartialMessage<RebootHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RebootHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RebootHostRequest {
    return new RebootHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RebootHostRequest {
    return new RebootHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RebootHostRequest {
    return new RebootHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RebootHostRequest | PlainMessage<RebootHostRequest> | undefined, b: RebootHostRequest | PlainMessage<RebootHostRequest> | undefined): boolean {
    return proto3.util.equals(RebootHostRequest, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RebootHostResponse
 */
export class RebootHostResponse extends Message<RebootHostResponse> {
  constructor(data?: PartialMessage<RebootHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RebootHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RebootHostResponse {
    return new RebootHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RebootHostResponse {
    return new RebootHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RebootHostResponse {
    return new RebootHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RebootHostResponse | PlainMessage<RebootHostResponse> | undefined, b: RebootHostResponse | PlainMessage<RebootHostResponse> | undefined): boolean {
    return proto3.util.equals(RebootHostResponse, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.InitializeHostRequest
 */
export class InitializeHostRequest extends Message<InitializeHostRequest> {
  constructor(data?: PartialMessage<InitializeHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.InitializeHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeHostRequest {
    return new InitializeHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeHostRequest {
    return new InitializeHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeHostRequest {
    return new InitializeHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeHostRequest | PlainMessage<InitializeHostRequest> | undefined, b: InitializeHostRequest | PlainMessage<InitializeHostRequest> | undefined): boolean {
    return proto3.util.equals(InitializeHostRequest, a, b);
  }
}

/**
 * TODO: return/save new talos secrets/config
 *
 * @generated from message platform.daemon.v1.InitializeHostResponse
 */
export class InitializeHostResponse extends Message<InitializeHostResponse> {
  constructor(data?: PartialMessage<InitializeHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.InitializeHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeHostResponse {
    return new InitializeHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeHostResponse {
    return new InitializeHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeHostResponse {
    return new InitializeHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeHostResponse | PlainMessage<InitializeHostResponse> | undefined, b: InitializeHostResponse | PlainMessage<InitializeHostResponse> | undefined): boolean {
    return proto3.util.equals(InitializeHostResponse, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.AddWireguardInterfaceRequest
 */
export class AddWireguardInterfaceRequest extends Message<AddWireguardInterfaceRequest> {
  /**
   * @generated from field: platform.daemon.v1.WireguardInterface interface = 1;
   */
  interface?: WireguardInterface;

  constructor(data?: PartialMessage<AddWireguardInterfaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.AddWireguardInterfaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interface", kind: "message", T: WireguardInterface },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddWireguardInterfaceRequest {
    return new AddWireguardInterfaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddWireguardInterfaceRequest {
    return new AddWireguardInterfaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddWireguardInterfaceRequest {
    return new AddWireguardInterfaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddWireguardInterfaceRequest | PlainMessage<AddWireguardInterfaceRequest> | undefined, b: AddWireguardInterfaceRequest | PlainMessage<AddWireguardInterfaceRequest> | undefined): boolean {
    return proto3.util.equals(AddWireguardInterfaceRequest, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.AddWireguardInterfaceResponse
 */
export class AddWireguardInterfaceResponse extends Message<AddWireguardInterfaceResponse> {
  /**
   * @generated from field: string public_key = 1;
   */
  publicKey = "";

  constructor(data?: PartialMessage<AddWireguardInterfaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.AddWireguardInterfaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddWireguardInterfaceResponse {
    return new AddWireguardInterfaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddWireguardInterfaceResponse {
    return new AddWireguardInterfaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddWireguardInterfaceResponse {
    return new AddWireguardInterfaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddWireguardInterfaceResponse | PlainMessage<AddWireguardInterfaceResponse> | undefined, b: AddWireguardInterfaceResponse | PlainMessage<AddWireguardInterfaceResponse> | undefined): boolean {
    return proto3.util.equals(AddWireguardInterfaceResponse, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RemoveWireguardInterfaceRequest
 */
export class RemoveWireguardInterfaceRequest extends Message<RemoveWireguardInterfaceRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<RemoveWireguardInterfaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RemoveWireguardInterfaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveWireguardInterfaceRequest {
    return new RemoveWireguardInterfaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveWireguardInterfaceRequest {
    return new RemoveWireguardInterfaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveWireguardInterfaceRequest {
    return new RemoveWireguardInterfaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveWireguardInterfaceRequest | PlainMessage<RemoveWireguardInterfaceRequest> | undefined, b: RemoveWireguardInterfaceRequest | PlainMessage<RemoveWireguardInterfaceRequest> | undefined): boolean {
    return proto3.util.equals(RemoveWireguardInterfaceRequest, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RemoveWireguardInterfaceResponse
 */
export class RemoveWireguardInterfaceResponse extends Message<RemoveWireguardInterfaceResponse> {
  constructor(data?: PartialMessage<RemoveWireguardInterfaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RemoveWireguardInterfaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveWireguardInterfaceResponse {
    return new RemoveWireguardInterfaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveWireguardInterfaceResponse {
    return new RemoveWireguardInterfaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveWireguardInterfaceResponse {
    return new RemoveWireguardInterfaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveWireguardInterfaceResponse | PlainMessage<RemoveWireguardInterfaceResponse> | undefined, b: RemoveWireguardInterfaceResponse | PlainMessage<RemoveWireguardInterfaceResponse> | undefined): boolean {
    return proto3.util.equals(RemoveWireguardInterfaceResponse, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.AddWireguardPeerRequest
 */
export class AddWireguardPeerRequest extends Message<AddWireguardPeerRequest> {
  /**
   * @generated from field: platform.daemon.v1.WireguardPeer peer = 1;
   */
  peer?: WireguardPeer;

  /**
   * @generated from field: string wireguard_interface = 2;
   */
  wireguardInterface = "";

  constructor(data?: PartialMessage<AddWireguardPeerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.AddWireguardPeerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "peer", kind: "message", T: WireguardPeer },
    { no: 2, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddWireguardPeerRequest {
    return new AddWireguardPeerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddWireguardPeerRequest {
    return new AddWireguardPeerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddWireguardPeerRequest {
    return new AddWireguardPeerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddWireguardPeerRequest | PlainMessage<AddWireguardPeerRequest> | undefined, b: AddWireguardPeerRequest | PlainMessage<AddWireguardPeerRequest> | undefined): boolean {
    return proto3.util.equals(AddWireguardPeerRequest, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.AddWireguardPeerResponse
 */
export class AddWireguardPeerResponse extends Message<AddWireguardPeerResponse> {
  /**
   * @generated from field: repeated string addresses = 1;
   */
  addresses: string[] = [];

  /**
   * @generated from field: repeated string dns_servers = 2;
   */
  dnsServers: string[] = [];

  constructor(data?: PartialMessage<AddWireguardPeerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.AddWireguardPeerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "dns_servers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddWireguardPeerResponse {
    return new AddWireguardPeerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddWireguardPeerResponse {
    return new AddWireguardPeerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddWireguardPeerResponse {
    return new AddWireguardPeerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddWireguardPeerResponse | PlainMessage<AddWireguardPeerResponse> | undefined, b: AddWireguardPeerResponse | PlainMessage<AddWireguardPeerResponse> | undefined): boolean {
    return proto3.util.equals(AddWireguardPeerResponse, a, b);
  }
}

/**
 * TODO
 *
 * @generated from message platform.daemon.v1.RemoveWireguardPeerRequest
 */
export class RemoveWireguardPeerRequest extends Message<RemoveWireguardPeerRequest> {
  constructor(data?: PartialMessage<RemoveWireguardPeerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RemoveWireguardPeerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveWireguardPeerRequest {
    return new RemoveWireguardPeerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveWireguardPeerRequest {
    return new RemoveWireguardPeerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveWireguardPeerRequest {
    return new RemoveWireguardPeerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveWireguardPeerRequest | PlainMessage<RemoveWireguardPeerRequest> | undefined, b: RemoveWireguardPeerRequest | PlainMessage<RemoveWireguardPeerRequest> | undefined): boolean {
    return proto3.util.equals(RemoveWireguardPeerRequest, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RemoveWireguardPeerResponse
 */
export class RemoveWireguardPeerResponse extends Message<RemoveWireguardPeerResponse> {
  constructor(data?: PartialMessage<RemoveWireguardPeerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RemoveWireguardPeerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveWireguardPeerResponse {
    return new RemoveWireguardPeerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveWireguardPeerResponse {
    return new RemoveWireguardPeerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveWireguardPeerResponse {
    return new RemoveWireguardPeerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveWireguardPeerResponse | PlainMessage<RemoveWireguardPeerResponse> | undefined, b: RemoveWireguardPeerResponse | PlainMessage<RemoveWireguardPeerResponse> | undefined): boolean {
    return proto3.util.equals(RemoveWireguardPeerResponse, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.SetSTUNServerRequest
 */
export class SetSTUNServerRequest extends Message<SetSTUNServerRequest> {
  /**
   * @generated from field: string server_address = 1;
   */
  serverAddress = "";

  /**
   * @generated from field: string wireguard_interface = 2;
   */
  wireguardInterface = "";

  constructor(data?: PartialMessage<SetSTUNServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.SetSTUNServerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "server_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSTUNServerRequest {
    return new SetSTUNServerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSTUNServerRequest {
    return new SetSTUNServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSTUNServerRequest {
    return new SetSTUNServerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetSTUNServerRequest | PlainMessage<SetSTUNServerRequest> | undefined, b: SetSTUNServerRequest | PlainMessage<SetSTUNServerRequest> | undefined): boolean {
    return proto3.util.equals(SetSTUNServerRequest, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.SetSTUNServerResponse
 */
export class SetSTUNServerResponse extends Message<SetSTUNServerResponse> {
  constructor(data?: PartialMessage<SetSTUNServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.SetSTUNServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSTUNServerResponse {
    return new SetSTUNServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSTUNServerResponse {
    return new SetSTUNServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSTUNServerResponse {
    return new SetSTUNServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetSTUNServerResponse | PlainMessage<SetSTUNServerResponse> | undefined, b: SetSTUNServerResponse | PlainMessage<SetSTUNServerResponse> | undefined): boolean {
    return proto3.util.equals(SetSTUNServerResponse, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.AddLocatorServerRequest
 */
export class AddLocatorServerRequest extends Message<AddLocatorServerRequest> {
  /**
   * @generated from field: string locator_address = 1;
   */
  locatorAddress = "";

  /**
   * TODO: eventually this is where the access key will be included that the user receives after purchasing the locator subscription
   *
   * @generated from field: string wireguard_interface = 2;
   */
  wireguardInterface = "";

  constructor(data?: PartialMessage<AddLocatorServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.AddLocatorServerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddLocatorServerRequest {
    return new AddLocatorServerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddLocatorServerRequest {
    return new AddLocatorServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddLocatorServerRequest {
    return new AddLocatorServerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddLocatorServerRequest | PlainMessage<AddLocatorServerRequest> | undefined, b: AddLocatorServerRequest | PlainMessage<AddLocatorServerRequest> | undefined): boolean {
    return proto3.util.equals(AddLocatorServerRequest, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.AddLocatorServerResponse
 */
export class AddLocatorServerResponse extends Message<AddLocatorServerResponse> {
  constructor(data?: PartialMessage<AddLocatorServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.AddLocatorServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddLocatorServerResponse {
    return new AddLocatorServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddLocatorServerResponse {
    return new AddLocatorServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddLocatorServerResponse {
    return new AddLocatorServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddLocatorServerResponse | PlainMessage<AddLocatorServerResponse> | undefined, b: AddLocatorServerResponse | PlainMessage<AddLocatorServerResponse> | undefined): boolean {
    return proto3.util.equals(AddLocatorServerResponse, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RemoveLocatorServerRequest
 */
export class RemoveLocatorServerRequest extends Message<RemoveLocatorServerRequest> {
  /**
   * @generated from field: string locator_address = 1;
   */
  locatorAddress = "";

  /**
   * @generated from field: string wireguard_interface = 2;
   */
  wireguardInterface = "";

  constructor(data?: PartialMessage<RemoveLocatorServerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RemoveLocatorServerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wireguard_interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveLocatorServerRequest {
    return new RemoveLocatorServerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveLocatorServerRequest {
    return new RemoveLocatorServerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveLocatorServerRequest {
    return new RemoveLocatorServerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveLocatorServerRequest | PlainMessage<RemoveLocatorServerRequest> | undefined, b: RemoveLocatorServerRequest | PlainMessage<RemoveLocatorServerRequest> | undefined): boolean {
    return proto3.util.equals(RemoveLocatorServerRequest, a, b);
  }
}

/**
 * @generated from message platform.daemon.v1.RemoveLocatorServerResponse
 */
export class RemoveLocatorServerResponse extends Message<RemoveLocatorServerResponse> {
  constructor(data?: PartialMessage<RemoveLocatorServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.daemon.v1.RemoveLocatorServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveLocatorServerResponse {
    return new RemoveLocatorServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveLocatorServerResponse {
    return new RemoveLocatorServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveLocatorServerResponse {
    return new RemoveLocatorServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveLocatorServerResponse | PlainMessage<RemoveLocatorServerResponse> | undefined, b: RemoveLocatorServerResponse | PlainMessage<RemoveLocatorServerResponse> | undefined): boolean {
    return proto3.util.equals(RemoveLocatorServerResponse, a, b);
  }
}

