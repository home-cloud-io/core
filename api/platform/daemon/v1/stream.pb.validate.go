// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/daemon/v1/stream.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DaemonMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DaemonMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DaemonMessageMultiError, or
// nil if none found.
func (m *DaemonMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *DaemonMessage_Heartbeat:
		if v == nil {
			err := DaemonMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeartbeat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeartbeat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DaemonMessageValidationError{
					field:  "Heartbeat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DaemonMessage_ShutdownAlert:
		if v == nil {
			err := DaemonMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShutdownAlert()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "ShutdownAlert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "ShutdownAlert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShutdownAlert()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DaemonMessageValidationError{
					field:  "ShutdownAlert",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DaemonMessage_OsUpdateDiff:
		if v == nil {
			err := DaemonMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOsUpdateDiff()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "OsUpdateDiff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "OsUpdateDiff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOsUpdateDiff()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DaemonMessageValidationError{
					field:  "OsUpdateDiff",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DaemonMessage_CurrentDaemonVersion:
		if v == nil {
			err := DaemonMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCurrentDaemonVersion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "CurrentDaemonVersion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "CurrentDaemonVersion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCurrentDaemonVersion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DaemonMessageValidationError{
					field:  "CurrentDaemonVersion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DaemonMessageMultiError(errors)
	}

	return nil
}

// DaemonMessageMultiError is an error wrapping multiple validation errors
// returned by DaemonMessage.ValidateAll() if the designated constraints
// aren't met.
type DaemonMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonMessageMultiError) AllErrors() []error { return m }

// DaemonMessageValidationError is the validation error returned by
// DaemonMessage.Validate if the designated constraints aren't met.
type DaemonMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonMessageValidationError) ErrorName() string { return "DaemonMessageValidationError" }

// Error satisfies the builtin error interface
func (e DaemonMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonMessageValidationError{}

// Validate checks the field values on ServerMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerMessageMultiError, or
// nil if none found.
func (m *ServerMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *ServerMessage_Heartbeat:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeartbeat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeartbeat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "Heartbeat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_Shutdown:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShutdown()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Shutdown",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Shutdown",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShutdown()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "Shutdown",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_Restart:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRestart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Restart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Restart",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRestart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "Restart",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_RequestOsUpdateDiff:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequestOsUpdateDiff()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "RequestOsUpdateDiff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "RequestOsUpdateDiff",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestOsUpdateDiff()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "RequestOsUpdateDiff",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_RequestCurrentDaemonVersion:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequestCurrentDaemonVersion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "RequestCurrentDaemonVersion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "RequestCurrentDaemonVersion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestCurrentDaemonVersion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "RequestCurrentDaemonVersion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_ChangeDaemonVersionCommand:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChangeDaemonVersionCommand()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "ChangeDaemonVersionCommand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "ChangeDaemonVersionCommand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChangeDaemonVersionCommand()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "ChangeDaemonVersionCommand",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_InstallOsUpdateCommand:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInstallOsUpdateCommand()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "InstallOsUpdateCommand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "InstallOsUpdateCommand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInstallOsUpdateCommand()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "InstallOsUpdateCommand",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_SetSystemImageCommand:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSetSystemImageCommand()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "SetSystemImageCommand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "SetSystemImageCommand",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetSystemImageCommand()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "SetSystemImageCommand",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ServerMessageMultiError(errors)
	}

	return nil
}

// ServerMessageMultiError is an error wrapping multiple validation errors
// returned by ServerMessage.ValidateAll() if the designated constraints
// aren't met.
type ServerMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMessageMultiError) AllErrors() []error { return m }

// ServerMessageValidationError is the validation error returned by
// ServerMessage.Validate if the designated constraints aren't met.
type ServerMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerMessageValidationError) ErrorName() string { return "ServerMessageValidationError" }

// Error satisfies the builtin error interface
func (e ServerMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerMessageValidationError{}

// Validate checks the field values on Heartbeat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Heartbeat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Heartbeat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeartbeatMultiError, or nil
// if none found.
func (m *Heartbeat) ValidateAll() error {
	return m.validate(true)
}

func (m *Heartbeat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeartbeatMultiError(errors)
	}

	return nil
}

// HeartbeatMultiError is an error wrapping multiple validation errors returned
// by Heartbeat.ValidateAll() if the designated constraints aren't met.
type HeartbeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartbeatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartbeatMultiError) AllErrors() []error { return m }

// HeartbeatValidationError is the validation error returned by
// Heartbeat.Validate if the designated constraints aren't met.
type HeartbeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatValidationError) ErrorName() string { return "HeartbeatValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatValidationError{}

// Validate checks the field values on ShutdownAlert with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShutdownAlert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShutdownAlert with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShutdownAlertMultiError, or
// nil if none found.
func (m *ShutdownAlert) ValidateAll() error {
	return m.validate(true)
}

func (m *ShutdownAlert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShutdownAlertMultiError(errors)
	}

	return nil
}

// ShutdownAlertMultiError is an error wrapping multiple validation errors
// returned by ShutdownAlert.ValidateAll() if the designated constraints
// aren't met.
type ShutdownAlertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShutdownAlertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShutdownAlertMultiError) AllErrors() []error { return m }

// ShutdownAlertValidationError is the validation error returned by
// ShutdownAlert.Validate if the designated constraints aren't met.
type ShutdownAlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownAlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownAlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownAlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownAlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownAlertValidationError) ErrorName() string { return "ShutdownAlertValidationError" }

// Error satisfies the builtin error interface
func (e ShutdownAlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownAlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownAlertValidationError{}

// Validate checks the field values on OSUpdateDiff with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OSUpdateDiff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OSUpdateDiff with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OSUpdateDiffMultiError, or
// nil if none found.
func (m *OSUpdateDiff) ValidateAll() error {
	return m.validate(true)
}

func (m *OSUpdateDiff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OSUpdateDiffValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OSUpdateDiffValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OSUpdateDiffValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OSUpdateDiffMultiError(errors)
	}

	return nil
}

// OSUpdateDiffMultiError is an error wrapping multiple validation errors
// returned by OSUpdateDiff.ValidateAll() if the designated constraints aren't met.
type OSUpdateDiffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OSUpdateDiffMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OSUpdateDiffMultiError) AllErrors() []error { return m }

// OSUpdateDiffValidationError is the validation error returned by
// OSUpdateDiff.Validate if the designated constraints aren't met.
type OSUpdateDiffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OSUpdateDiffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OSUpdateDiffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OSUpdateDiffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OSUpdateDiffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OSUpdateDiffValidationError) ErrorName() string { return "OSUpdateDiffValidationError" }

// Error satisfies the builtin error interface
func (e OSUpdateDiffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOSUpdateDiff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OSUpdateDiffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OSUpdateDiffValidationError{}

// Validate checks the field values on CurrentDaemonVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentDaemonVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentDaemonVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentDaemonVersionMultiError, or nil if none found.
func (m *CurrentDaemonVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentDaemonVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CurrentDaemonVersionValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CurrentDaemonVersionValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CurrentDaemonVersionValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CurrentDaemonVersionMultiError(errors)
	}

	return nil
}

// CurrentDaemonVersionMultiError is an error wrapping multiple validation
// errors returned by CurrentDaemonVersion.ValidateAll() if the designated
// constraints aren't met.
type CurrentDaemonVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentDaemonVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentDaemonVersionMultiError) AllErrors() []error { return m }

// CurrentDaemonVersionValidationError is the validation error returned by
// CurrentDaemonVersion.Validate if the designated constraints aren't met.
type CurrentDaemonVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentDaemonVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentDaemonVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentDaemonVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentDaemonVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentDaemonVersionValidationError) ErrorName() string {
	return "CurrentDaemonVersionValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentDaemonVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentDaemonVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentDaemonVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentDaemonVersionValidationError{}

// Validate checks the field values on DaemonError with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DaemonError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonError with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DaemonErrorMultiError, or
// nil if none found.
func (m *DaemonError) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return DaemonErrorMultiError(errors)
	}

	return nil
}

// DaemonErrorMultiError is an error wrapping multiple validation errors
// returned by DaemonError.ValidateAll() if the designated constraints aren't met.
type DaemonErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonErrorMultiError) AllErrors() []error { return m }

// DaemonErrorValidationError is the validation error returned by
// DaemonError.Validate if the designated constraints aren't met.
type DaemonErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonErrorValidationError) ErrorName() string { return "DaemonErrorValidationError" }

// Error satisfies the builtin error interface
func (e DaemonErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonErrorValidationError{}

// Validate checks the field values on ShutdownCommand with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShutdownCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShutdownCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShutdownCommandMultiError, or nil if none found.
func (m *ShutdownCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *ShutdownCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShutdownCommandMultiError(errors)
	}

	return nil
}

// ShutdownCommandMultiError is an error wrapping multiple validation errors
// returned by ShutdownCommand.ValidateAll() if the designated constraints
// aren't met.
type ShutdownCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShutdownCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShutdownCommandMultiError) AllErrors() []error { return m }

// ShutdownCommandValidationError is the validation error returned by
// ShutdownCommand.Validate if the designated constraints aren't met.
type ShutdownCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownCommandValidationError) ErrorName() string { return "ShutdownCommandValidationError" }

// Error satisfies the builtin error interface
func (e ShutdownCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownCommandValidationError{}

// Validate checks the field values on RestartCommand with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RestartCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartCommand with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RestartCommandMultiError,
// or nil if none found.
func (m *RestartCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartCommandMultiError(errors)
	}

	return nil
}

// RestartCommandMultiError is an error wrapping multiple validation errors
// returned by RestartCommand.ValidateAll() if the designated constraints
// aren't met.
type RestartCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartCommandMultiError) AllErrors() []error { return m }

// RestartCommandValidationError is the validation error returned by
// RestartCommand.Validate if the designated constraints aren't met.
type RestartCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartCommandValidationError) ErrorName() string { return "RestartCommandValidationError" }

// Error satisfies the builtin error interface
func (e RestartCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartCommandValidationError{}

// Validate checks the field values on RequestOSUpdateDiff with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestOSUpdateDiff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestOSUpdateDiff with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestOSUpdateDiffMultiError, or nil if none found.
func (m *RequestOSUpdateDiff) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestOSUpdateDiff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RequestOSUpdateDiffMultiError(errors)
	}

	return nil
}

// RequestOSUpdateDiffMultiError is an error wrapping multiple validation
// errors returned by RequestOSUpdateDiff.ValidateAll() if the designated
// constraints aren't met.
type RequestOSUpdateDiffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestOSUpdateDiffMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestOSUpdateDiffMultiError) AllErrors() []error { return m }

// RequestOSUpdateDiffValidationError is the validation error returned by
// RequestOSUpdateDiff.Validate if the designated constraints aren't met.
type RequestOSUpdateDiffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestOSUpdateDiffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestOSUpdateDiffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestOSUpdateDiffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestOSUpdateDiffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestOSUpdateDiffValidationError) ErrorName() string {
	return "RequestOSUpdateDiffValidationError"
}

// Error satisfies the builtin error interface
func (e RequestOSUpdateDiffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestOSUpdateDiff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestOSUpdateDiffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestOSUpdateDiffValidationError{}

// Validate checks the field values on RequestCurrentDaemonVersion with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestCurrentDaemonVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestCurrentDaemonVersion with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestCurrentDaemonVersionMultiError, or nil if none found.
func (m *RequestCurrentDaemonVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestCurrentDaemonVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RequestCurrentDaemonVersionMultiError(errors)
	}

	return nil
}

// RequestCurrentDaemonVersionMultiError is an error wrapping multiple
// validation errors returned by RequestCurrentDaemonVersion.ValidateAll() if
// the designated constraints aren't met.
type RequestCurrentDaemonVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestCurrentDaemonVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestCurrentDaemonVersionMultiError) AllErrors() []error { return m }

// RequestCurrentDaemonVersionValidationError is the validation error returned
// by RequestCurrentDaemonVersion.Validate if the designated constraints
// aren't met.
type RequestCurrentDaemonVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestCurrentDaemonVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestCurrentDaemonVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestCurrentDaemonVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestCurrentDaemonVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestCurrentDaemonVersionValidationError) ErrorName() string {
	return "RequestCurrentDaemonVersionValidationError"
}

// Error satisfies the builtin error interface
func (e RequestCurrentDaemonVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestCurrentDaemonVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestCurrentDaemonVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestCurrentDaemonVersionValidationError{}

// Validate checks the field values on ChangeDaemonVersionCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeDaemonVersionCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeDaemonVersionCommand with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeDaemonVersionCommandMultiError, or nil if none found.
func (m *ChangeDaemonVersionCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeDaemonVersionCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VendorHash

	// no validation rules for SrcHash

	if len(errors) > 0 {
		return ChangeDaemonVersionCommandMultiError(errors)
	}

	return nil
}

// ChangeDaemonVersionCommandMultiError is an error wrapping multiple
// validation errors returned by ChangeDaemonVersionCommand.ValidateAll() if
// the designated constraints aren't met.
type ChangeDaemonVersionCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeDaemonVersionCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeDaemonVersionCommandMultiError) AllErrors() []error { return m }

// ChangeDaemonVersionCommandValidationError is the validation error returned
// by ChangeDaemonVersionCommand.Validate if the designated constraints aren't met.
type ChangeDaemonVersionCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeDaemonVersionCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeDaemonVersionCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeDaemonVersionCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeDaemonVersionCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeDaemonVersionCommandValidationError) ErrorName() string {
	return "ChangeDaemonVersionCommandValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeDaemonVersionCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeDaemonVersionCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeDaemonVersionCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeDaemonVersionCommandValidationError{}

// Validate checks the field values on InstallOSUpdateCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallOSUpdateCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallOSUpdateCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallOSUpdateCommandMultiError, or nil if none found.
func (m *InstallOSUpdateCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallOSUpdateCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InstallOSUpdateCommandMultiError(errors)
	}

	return nil
}

// InstallOSUpdateCommandMultiError is an error wrapping multiple validation
// errors returned by InstallOSUpdateCommand.ValidateAll() if the designated
// constraints aren't met.
type InstallOSUpdateCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallOSUpdateCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallOSUpdateCommandMultiError) AllErrors() []error { return m }

// InstallOSUpdateCommandValidationError is the validation error returned by
// InstallOSUpdateCommand.Validate if the designated constraints aren't met.
type InstallOSUpdateCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallOSUpdateCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallOSUpdateCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallOSUpdateCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallOSUpdateCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallOSUpdateCommandValidationError) ErrorName() string {
	return "InstallOSUpdateCommandValidationError"
}

// Error satisfies the builtin error interface
func (e InstallOSUpdateCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallOSUpdateCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallOSUpdateCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallOSUpdateCommandValidationError{}

// Validate checks the field values on SetSystemImageCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSystemImageCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSystemImageCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSystemImageCommandMultiError, or nil if none found.
func (m *SetSystemImageCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSystemImageCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrentImage

	// no validation rules for RequestedImage

	if len(errors) > 0 {
		return SetSystemImageCommandMultiError(errors)
	}

	return nil
}

// SetSystemImageCommandMultiError is an error wrapping multiple validation
// errors returned by SetSystemImageCommand.ValidateAll() if the designated
// constraints aren't met.
type SetSystemImageCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSystemImageCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSystemImageCommandMultiError) AllErrors() []error { return m }

// SetSystemImageCommandValidationError is the validation error returned by
// SetSystemImageCommand.Validate if the designated constraints aren't met.
type SetSystemImageCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSystemImageCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSystemImageCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSystemImageCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSystemImageCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSystemImageCommandValidationError) ErrorName() string {
	return "SetSystemImageCommandValidationError"
}

// Error satisfies the builtin error interface
func (e SetSystemImageCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSystemImageCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSystemImageCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSystemImageCommandValidationError{}
