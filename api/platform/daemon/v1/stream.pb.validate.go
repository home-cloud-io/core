// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/daemon/v1/stream.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DaemonMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DaemonMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DaemonMessageMultiError, or
// nil if none found.
func (m *DaemonMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *DaemonMessage_Heartbeat:
		if v == nil {
			err := DaemonMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeartbeat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeartbeat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DaemonMessageValidationError{
					field:  "Heartbeat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DaemonMessage_ShutdownAlert:
		if v == nil {
			err := DaemonMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetShutdownAlert()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "ShutdownAlert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DaemonMessageValidationError{
						field:  "ShutdownAlert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetShutdownAlert()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DaemonMessageValidationError{
					field:  "ShutdownAlert",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DaemonMessageMultiError(errors)
	}

	return nil
}

// DaemonMessageMultiError is an error wrapping multiple validation errors
// returned by DaemonMessage.ValidateAll() if the designated constraints
// aren't met.
type DaemonMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonMessageMultiError) AllErrors() []error { return m }

// DaemonMessageValidationError is the validation error returned by
// DaemonMessage.Validate if the designated constraints aren't met.
type DaemonMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonMessageValidationError) ErrorName() string { return "DaemonMessageValidationError" }

// Error satisfies the builtin error interface
func (e DaemonMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonMessageValidationError{}

// Validate checks the field values on ServerMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerMessageMultiError, or
// nil if none found.
func (m *ServerMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *ServerMessage_Heartbeat:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeartbeat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeartbeat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "Heartbeat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ServerMessageMultiError(errors)
	}

	return nil
}

// ServerMessageMultiError is an error wrapping multiple validation errors
// returned by ServerMessage.ValidateAll() if the designated constraints
// aren't met.
type ServerMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMessageMultiError) AllErrors() []error { return m }

// ServerMessageValidationError is the validation error returned by
// ServerMessage.Validate if the designated constraints aren't met.
type ServerMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerMessageValidationError) ErrorName() string { return "ServerMessageValidationError" }

// Error satisfies the builtin error interface
func (e ServerMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerMessageValidationError{}

// Validate checks the field values on Heartbeat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Heartbeat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Heartbeat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeartbeatMultiError, or nil
// if none found.
func (m *Heartbeat) ValidateAll() error {
	return m.validate(true)
}

func (m *Heartbeat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeartbeatMultiError(errors)
	}

	return nil
}

// HeartbeatMultiError is an error wrapping multiple validation errors returned
// by Heartbeat.ValidateAll() if the designated constraints aren't met.
type HeartbeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartbeatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartbeatMultiError) AllErrors() []error { return m }

// HeartbeatValidationError is the validation error returned by
// Heartbeat.Validate if the designated constraints aren't met.
type HeartbeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatValidationError) ErrorName() string { return "HeartbeatValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatValidationError{}

// Validate checks the field values on ShutdownAlert with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShutdownAlert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShutdownAlert with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShutdownAlertMultiError, or
// nil if none found.
func (m *ShutdownAlert) ValidateAll() error {
	return m.validate(true)
}

func (m *ShutdownAlert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShutdownAlertMultiError(errors)
	}

	return nil
}

// ShutdownAlertMultiError is an error wrapping multiple validation errors
// returned by ShutdownAlert.ValidateAll() if the designated constraints
// aren't met.
type ShutdownAlertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShutdownAlertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShutdownAlertMultiError) AllErrors() []error { return m }

// ShutdownAlertValidationError is the validation error returned by
// ShutdownAlert.Validate if the designated constraints aren't met.
type ShutdownAlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownAlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownAlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownAlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownAlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownAlertValidationError) ErrorName() string { return "ShutdownAlertValidationError" }

// Error satisfies the builtin error interface
func (e ShutdownAlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownAlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownAlertValidationError{}
