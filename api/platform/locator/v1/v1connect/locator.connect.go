// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/locator/v1/locator.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/home-cloud-io/core/api/platform/locator/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LocatorName is the fully-qualified name of the Locator service.
	LocatorName = "platform.locator.v1.Locator"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LocatorRegisterProcedure is the fully-qualified name of the Locator's Register RPC.
	LocatorRegisterProcedure = "/platform.locator.v1.Locator/Register"
	// LocatorLocateProcedure is the fully-qualified name of the Locator's Locate RPC.
	LocatorLocateProcedure = "/platform.locator.v1.Locator/Locate"
	// LocatorConnectProcedure is the fully-qualified name of the Locator's Connect RPC.
	LocatorConnectProcedure = "/platform.locator.v1.Locator/Connect"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	locatorServiceDescriptor        = v1.File_platform_locator_v1_locator_proto.Services().ByName("Locator")
	locatorRegisterMethodDescriptor = locatorServiceDescriptor.Methods().ByName("Register")
	locatorLocateMethodDescriptor   = locatorServiceDescriptor.Methods().ByName("Locate")
	locatorConnectMethodDescriptor  = locatorServiceDescriptor.Methods().ByName("Connect")
)

// LocatorClient is a client for the platform.locator.v1.Locator service.
type LocatorClient interface {
	// Register registers the Home Cloud server to begin synchronization with the locator server
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Locate asks the Locator server to return the location of the Home Cloud server referenced by the provided server_id
	Locate(context.Context, *connect.Request[v1.LocateRequest]) (*connect.Response[v1.LocateResponse], error)
	// Connect establishes a stream between a Home Cloud server which negotiates location information for clients calling Locate
	Connect(context.Context) *connect.BidiStreamForClient[v1.ServerMessage, v1.LocatorMessage]
}

// NewLocatorClient constructs a client for the platform.locator.v1.Locator service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLocatorClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LocatorClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &locatorClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+LocatorRegisterProcedure,
			connect.WithSchema(locatorRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		locate: connect.NewClient[v1.LocateRequest, v1.LocateResponse](
			httpClient,
			baseURL+LocatorLocateProcedure,
			connect.WithSchema(locatorLocateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		connect: connect.NewClient[v1.ServerMessage, v1.LocatorMessage](
			httpClient,
			baseURL+LocatorConnectProcedure,
			connect.WithSchema(locatorConnectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// locatorClient implements LocatorClient.
type locatorClient struct {
	register *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	locate   *connect.Client[v1.LocateRequest, v1.LocateResponse]
	connect  *connect.Client[v1.ServerMessage, v1.LocatorMessage]
}

// Register calls platform.locator.v1.Locator.Register.
func (c *locatorClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Locate calls platform.locator.v1.Locator.Locate.
func (c *locatorClient) Locate(ctx context.Context, req *connect.Request[v1.LocateRequest]) (*connect.Response[v1.LocateResponse], error) {
	return c.locate.CallUnary(ctx, req)
}

// Connect calls platform.locator.v1.Locator.Connect.
func (c *locatorClient) Connect(ctx context.Context) *connect.BidiStreamForClient[v1.ServerMessage, v1.LocatorMessage] {
	return c.connect.CallBidiStream(ctx)
}

// LocatorHandler is an implementation of the platform.locator.v1.Locator service.
type LocatorHandler interface {
	// Register registers the Home Cloud server to begin synchronization with the locator server
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Locate asks the Locator server to return the location of the Home Cloud server referenced by the provided server_id
	Locate(context.Context, *connect.Request[v1.LocateRequest]) (*connect.Response[v1.LocateResponse], error)
	// Connect establishes a stream between a Home Cloud server which negotiates location information for clients calling Locate
	Connect(context.Context, *connect.BidiStream[v1.ServerMessage, v1.LocatorMessage]) error
}

// NewLocatorHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLocatorHandler(svc LocatorHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	locatorRegisterHandler := connect.NewUnaryHandler(
		LocatorRegisterProcedure,
		svc.Register,
		connect.WithSchema(locatorRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	locatorLocateHandler := connect.NewUnaryHandler(
		LocatorLocateProcedure,
		svc.Locate,
		connect.WithSchema(locatorLocateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	locatorConnectHandler := connect.NewBidiStreamHandler(
		LocatorConnectProcedure,
		svc.Connect,
		connect.WithSchema(locatorConnectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.locator.v1.Locator/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LocatorRegisterProcedure:
			locatorRegisterHandler.ServeHTTP(w, r)
		case LocatorLocateProcedure:
			locatorLocateHandler.ServeHTTP(w, r)
		case LocatorConnectProcedure:
			locatorConnectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLocatorHandler returns CodeUnimplemented from all methods.
type UnimplementedLocatorHandler struct{}

func (UnimplementedLocatorHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.locator.v1.Locator.Register is not implemented"))
}

func (UnimplementedLocatorHandler) Locate(context.Context, *connect.Request[v1.LocateRequest]) (*connect.Response[v1.LocateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.locator.v1.Locator.Locate is not implemented"))
}

func (UnimplementedLocatorHandler) Connect(context.Context, *connect.BidiStream[v1.ServerMessage, v1.LocatorMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("platform.locator.v1.Locator.Connect is not implemented"))
}
