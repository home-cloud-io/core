// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/locator/v1/locator.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/home-cloud-io/core/api/platform/locator/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LocatorServiceName is the fully-qualified name of the LocatorService service.
	LocatorServiceName = "platform.locator.v1.LocatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LocatorServiceRegisterProcedure is the fully-qualified name of the LocatorService's Register RPC.
	LocatorServiceRegisterProcedure = "/platform.locator.v1.LocatorService/Register"
	// LocatorServiceLocateProcedure is the fully-qualified name of the LocatorService's Locate RPC.
	LocatorServiceLocateProcedure = "/platform.locator.v1.LocatorService/Locate"
	// LocatorServiceConnectProcedure is the fully-qualified name of the LocatorService's Connect RPC.
	LocatorServiceConnectProcedure = "/platform.locator.v1.LocatorService/Connect"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	locatorServiceServiceDescriptor        = v1.File_platform_locator_v1_locator_proto.Services().ByName("LocatorService")
	locatorServiceRegisterMethodDescriptor = locatorServiceServiceDescriptor.Methods().ByName("Register")
	locatorServiceLocateMethodDescriptor   = locatorServiceServiceDescriptor.Methods().ByName("Locate")
	locatorServiceConnectMethodDescriptor  = locatorServiceServiceDescriptor.Methods().ByName("Connect")
)

// LocatorServiceClient is a client for the platform.locator.v1.LocatorService service.
type LocatorServiceClient interface {
	// Register registers the Home Cloud server to begin synchronization with the locator server
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Locate asks the Locator server to return the location of the Home Cloud server referenced by the provided server_id
	Locate(context.Context, *connect.Request[v1.LocateRequest]) (*connect.Response[v1.LocateResponse], error)
	// Connect establishes a stream between a Home Cloud server which negotiates location information for clients calling Locate
	Connect(context.Context) *connect.BidiStreamForClient[v1.ServerMessage, v1.LocatorMessage]
}

// NewLocatorServiceClient constructs a client for the platform.locator.v1.LocatorService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLocatorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LocatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &locatorServiceClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+LocatorServiceRegisterProcedure,
			connect.WithSchema(locatorServiceRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		locate: connect.NewClient[v1.LocateRequest, v1.LocateResponse](
			httpClient,
			baseURL+LocatorServiceLocateProcedure,
			connect.WithSchema(locatorServiceLocateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		connect: connect.NewClient[v1.ServerMessage, v1.LocatorMessage](
			httpClient,
			baseURL+LocatorServiceConnectProcedure,
			connect.WithSchema(locatorServiceConnectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// locatorServiceClient implements LocatorServiceClient.
type locatorServiceClient struct {
	register *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	locate   *connect.Client[v1.LocateRequest, v1.LocateResponse]
	connect  *connect.Client[v1.ServerMessage, v1.LocatorMessage]
}

// Register calls platform.locator.v1.LocatorService.Register.
func (c *locatorServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Locate calls platform.locator.v1.LocatorService.Locate.
func (c *locatorServiceClient) Locate(ctx context.Context, req *connect.Request[v1.LocateRequest]) (*connect.Response[v1.LocateResponse], error) {
	return c.locate.CallUnary(ctx, req)
}

// Connect calls platform.locator.v1.LocatorService.Connect.
func (c *locatorServiceClient) Connect(ctx context.Context) *connect.BidiStreamForClient[v1.ServerMessage, v1.LocatorMessage] {
	return c.connect.CallBidiStream(ctx)
}

// LocatorServiceHandler is an implementation of the platform.locator.v1.LocatorService service.
type LocatorServiceHandler interface {
	// Register registers the Home Cloud server to begin synchronization with the locator server
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Locate asks the Locator server to return the location of the Home Cloud server referenced by the provided server_id
	Locate(context.Context, *connect.Request[v1.LocateRequest]) (*connect.Response[v1.LocateResponse], error)
	// Connect establishes a stream between a Home Cloud server which negotiates location information for clients calling Locate
	Connect(context.Context, *connect.BidiStream[v1.ServerMessage, v1.LocatorMessage]) error
}

// NewLocatorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLocatorServiceHandler(svc LocatorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	locatorServiceRegisterHandler := connect.NewUnaryHandler(
		LocatorServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(locatorServiceRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	locatorServiceLocateHandler := connect.NewUnaryHandler(
		LocatorServiceLocateProcedure,
		svc.Locate,
		connect.WithSchema(locatorServiceLocateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	locatorServiceConnectHandler := connect.NewBidiStreamHandler(
		LocatorServiceConnectProcedure,
		svc.Connect,
		connect.WithSchema(locatorServiceConnectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.locator.v1.LocatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LocatorServiceRegisterProcedure:
			locatorServiceRegisterHandler.ServeHTTP(w, r)
		case LocatorServiceLocateProcedure:
			locatorServiceLocateHandler.ServeHTTP(w, r)
		case LocatorServiceConnectProcedure:
			locatorServiceConnectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLocatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLocatorServiceHandler struct{}

func (UnimplementedLocatorServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.locator.v1.LocatorService.Register is not implemented"))
}

func (UnimplementedLocatorServiceHandler) Locate(context.Context, *connect.Request[v1.LocateRequest]) (*connect.Response[v1.LocateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.locator.v1.LocatorService.Locate is not implemented"))
}

func (UnimplementedLocatorServiceHandler) Connect(context.Context, *connect.BidiStream[v1.ServerMessage, v1.LocatorMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("platform.locator.v1.LocatorService.Connect is not implemented"))
}
