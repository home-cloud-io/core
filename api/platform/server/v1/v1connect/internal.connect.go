// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/server/v1/internal.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/home-cloud-io/core/api/platform/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InternalServiceName is the fully-qualified name of the InternalService service.
	InternalServiceName = "platform.server.v1.InternalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InternalServiceAddMdnsHostProcedure is the fully-qualified name of the InternalService's
	// AddMdnsHost RPC.
	InternalServiceAddMdnsHostProcedure = "/platform.server.v1.InternalService/AddMdnsHost"
	// InternalServiceRemoveMdnsHostProcedure is the fully-qualified name of the InternalService's
	// RemoveMdnsHost RPC.
	InternalServiceRemoveMdnsHostProcedure = "/platform.server.v1.InternalService/RemoveMdnsHost"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	internalServiceServiceDescriptor              = v1.File_platform_server_v1_internal_proto.Services().ByName("InternalService")
	internalServiceAddMdnsHostMethodDescriptor    = internalServiceServiceDescriptor.Methods().ByName("AddMdnsHost")
	internalServiceRemoveMdnsHostMethodDescriptor = internalServiceServiceDescriptor.Methods().ByName("RemoveMdnsHost")
)

// InternalServiceClient is a client for the platform.server.v1.InternalService service.
type InternalServiceClient interface {
	AddMdnsHost(context.Context, *connect.Request[v1.AddMdnsHostRequest]) (*connect.Response[v1.AddMdnsHostResponse], error)
	RemoveMdnsHost(context.Context, *connect.Request[v1.RemoveMdnsHostRequest]) (*connect.Response[v1.RemoveMdnsHostResponse], error)
}

// NewInternalServiceClient constructs a client for the platform.server.v1.InternalService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInternalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InternalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &internalServiceClient{
		addMdnsHost: connect.NewClient[v1.AddMdnsHostRequest, v1.AddMdnsHostResponse](
			httpClient,
			baseURL+InternalServiceAddMdnsHostProcedure,
			connect.WithSchema(internalServiceAddMdnsHostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeMdnsHost: connect.NewClient[v1.RemoveMdnsHostRequest, v1.RemoveMdnsHostResponse](
			httpClient,
			baseURL+InternalServiceRemoveMdnsHostProcedure,
			connect.WithSchema(internalServiceRemoveMdnsHostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// internalServiceClient implements InternalServiceClient.
type internalServiceClient struct {
	addMdnsHost    *connect.Client[v1.AddMdnsHostRequest, v1.AddMdnsHostResponse]
	removeMdnsHost *connect.Client[v1.RemoveMdnsHostRequest, v1.RemoveMdnsHostResponse]
}

// AddMdnsHost calls platform.server.v1.InternalService.AddMdnsHost.
func (c *internalServiceClient) AddMdnsHost(ctx context.Context, req *connect.Request[v1.AddMdnsHostRequest]) (*connect.Response[v1.AddMdnsHostResponse], error) {
	return c.addMdnsHost.CallUnary(ctx, req)
}

// RemoveMdnsHost calls platform.server.v1.InternalService.RemoveMdnsHost.
func (c *internalServiceClient) RemoveMdnsHost(ctx context.Context, req *connect.Request[v1.RemoveMdnsHostRequest]) (*connect.Response[v1.RemoveMdnsHostResponse], error) {
	return c.removeMdnsHost.CallUnary(ctx, req)
}

// InternalServiceHandler is an implementation of the platform.server.v1.InternalService service.
type InternalServiceHandler interface {
	AddMdnsHost(context.Context, *connect.Request[v1.AddMdnsHostRequest]) (*connect.Response[v1.AddMdnsHostResponse], error)
	RemoveMdnsHost(context.Context, *connect.Request[v1.RemoveMdnsHostRequest]) (*connect.Response[v1.RemoveMdnsHostResponse], error)
}

// NewInternalServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInternalServiceHandler(svc InternalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	internalServiceAddMdnsHostHandler := connect.NewUnaryHandler(
		InternalServiceAddMdnsHostProcedure,
		svc.AddMdnsHost,
		connect.WithSchema(internalServiceAddMdnsHostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	internalServiceRemoveMdnsHostHandler := connect.NewUnaryHandler(
		InternalServiceRemoveMdnsHostProcedure,
		svc.RemoveMdnsHost,
		connect.WithSchema(internalServiceRemoveMdnsHostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.server.v1.InternalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InternalServiceAddMdnsHostProcedure:
			internalServiceAddMdnsHostHandler.ServeHTTP(w, r)
		case InternalServiceRemoveMdnsHostProcedure:
			internalServiceRemoveMdnsHostHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInternalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInternalServiceHandler struct{}

func (UnimplementedInternalServiceHandler) AddMdnsHost(context.Context, *connect.Request[v1.AddMdnsHostRequest]) (*connect.Response[v1.AddMdnsHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.InternalService.AddMdnsHost is not implemented"))
}

func (UnimplementedInternalServiceHandler) RemoveMdnsHost(context.Context, *connect.Request[v1.RemoveMdnsHostRequest]) (*connect.Response[v1.RemoveMdnsHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.InternalService.RemoveMdnsHost is not implemented"))
}
