// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/server/v1/web.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/home-cloud-io/core/api/platform/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WebServiceName is the fully-qualified name of the WebService service.
	WebServiceName = "platform.server.v1.WebService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WebServiceShutdownHostProcedure is the fully-qualified name of the WebService's ShutdownHost RPC.
	WebServiceShutdownHostProcedure = "/platform.server.v1.WebService/ShutdownHost"
	// WebServiceRestartHostProcedure is the fully-qualified name of the WebService's RestartHost RPC.
	WebServiceRestartHostProcedure = "/platform.server.v1.WebService/RestartHost"
	// WebServiceInstallAppProcedure is the fully-qualified name of the WebService's InstallApp RPC.
	WebServiceInstallAppProcedure = "/platform.server.v1.WebService/InstallApp"
	// WebServiceDeleteAppProcedure is the fully-qualified name of the WebService's DeleteApp RPC.
	WebServiceDeleteAppProcedure = "/platform.server.v1.WebService/DeleteApp"
	// WebServiceUpdateAppProcedure is the fully-qualified name of the WebService's UpdateApp RPC.
	WebServiceUpdateAppProcedure = "/platform.server.v1.WebService/UpdateApp"
	// WebServiceCheckForSystemUpdatesProcedure is the fully-qualified name of the WebService's
	// CheckForSystemUpdates RPC.
	WebServiceCheckForSystemUpdatesProcedure = "/platform.server.v1.WebService/CheckForSystemUpdates"
	// WebServiceCheckForContainerUpdatesProcedure is the fully-qualified name of the WebService's
	// CheckForContainerUpdates RPC.
	WebServiceCheckForContainerUpdatesProcedure = "/platform.server.v1.WebService/CheckForContainerUpdates"
	// WebServiceChangeDaemonVersionProcedure is the fully-qualified name of the WebService's
	// ChangeDaemonVersion RPC.
	WebServiceChangeDaemonVersionProcedure = "/platform.server.v1.WebService/ChangeDaemonVersion"
	// WebServiceInstallOSUpdateProcedure is the fully-qualified name of the WebService's
	// InstallOSUpdate RPC.
	WebServiceInstallOSUpdateProcedure = "/platform.server.v1.WebService/InstallOSUpdate"
	// WebServiceSetSystemImageProcedure is the fully-qualified name of the WebService's SetSystemImage
	// RPC.
	WebServiceSetSystemImageProcedure = "/platform.server.v1.WebService/SetSystemImage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	webServiceServiceDescriptor                        = v1.File_platform_server_v1_web_proto.Services().ByName("WebService")
	webServiceShutdownHostMethodDescriptor             = webServiceServiceDescriptor.Methods().ByName("ShutdownHost")
	webServiceRestartHostMethodDescriptor              = webServiceServiceDescriptor.Methods().ByName("RestartHost")
	webServiceInstallAppMethodDescriptor               = webServiceServiceDescriptor.Methods().ByName("InstallApp")
	webServiceDeleteAppMethodDescriptor                = webServiceServiceDescriptor.Methods().ByName("DeleteApp")
	webServiceUpdateAppMethodDescriptor                = webServiceServiceDescriptor.Methods().ByName("UpdateApp")
	webServiceCheckForSystemUpdatesMethodDescriptor    = webServiceServiceDescriptor.Methods().ByName("CheckForSystemUpdates")
	webServiceCheckForContainerUpdatesMethodDescriptor = webServiceServiceDescriptor.Methods().ByName("CheckForContainerUpdates")
	webServiceChangeDaemonVersionMethodDescriptor      = webServiceServiceDescriptor.Methods().ByName("ChangeDaemonVersion")
	webServiceInstallOSUpdateMethodDescriptor          = webServiceServiceDescriptor.Methods().ByName("InstallOSUpdate")
	webServiceSetSystemImageMethodDescriptor           = webServiceServiceDescriptor.Methods().ByName("SetSystemImage")
)

// WebServiceClient is a client for the platform.server.v1.WebService service.
type WebServiceClient interface {
	ShutdownHost(context.Context, *connect.Request[v1.ShutdownHostRequest]) (*connect.Response[v1.ShutdownHostResponse], error)
	RestartHost(context.Context, *connect.Request[v1.RestartHostRequest]) (*connect.Response[v1.RestartHostResponse], error)
	InstallApp(context.Context, *connect.Request[v1.InstallAppRequest]) (*connect.Response[v1.InstallAppResponse], error)
	DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error)
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	CheckForSystemUpdates(context.Context, *connect.Request[v1.CheckForSystemUpdatesRequest]) (*connect.Response[v1.CheckForSystemUpdatesResponse], error)
	CheckForContainerUpdates(context.Context, *connect.Request[v1.CheckForContainerUpdatesRequest]) (*connect.Response[v1.CheckForContainerUpdatesResponse], error)
	ChangeDaemonVersion(context.Context, *connect.Request[v1.ChangeDaemonVersionRequest]) (*connect.Response[v1.ChangeDaemonVersionResponse], error)
	InstallOSUpdate(context.Context, *connect.Request[v1.InstallOSUpdateRequest]) (*connect.Response[v1.InstallOSUpdateResponse], error)
	SetSystemImage(context.Context, *connect.Request[v1.SetSystemImageRequest]) (*connect.Response[v1.SetSystemImageResponse], error)
}

// NewWebServiceClient constructs a client for the platform.server.v1.WebService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWebServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WebServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &webServiceClient{
		shutdownHost: connect.NewClient[v1.ShutdownHostRequest, v1.ShutdownHostResponse](
			httpClient,
			baseURL+WebServiceShutdownHostProcedure,
			connect.WithSchema(webServiceShutdownHostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		restartHost: connect.NewClient[v1.RestartHostRequest, v1.RestartHostResponse](
			httpClient,
			baseURL+WebServiceRestartHostProcedure,
			connect.WithSchema(webServiceRestartHostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		installApp: connect.NewClient[v1.InstallAppRequest, v1.InstallAppResponse](
			httpClient,
			baseURL+WebServiceInstallAppProcedure,
			connect.WithSchema(webServiceInstallAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteApp: connect.NewClient[v1.DeleteAppRequest, v1.DeleteAppResponse](
			httpClient,
			baseURL+WebServiceDeleteAppProcedure,
			connect.WithSchema(webServiceDeleteAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateApp: connect.NewClient[v1.UpdateAppRequest, v1.UpdateAppResponse](
			httpClient,
			baseURL+WebServiceUpdateAppProcedure,
			connect.WithSchema(webServiceUpdateAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkForSystemUpdates: connect.NewClient[v1.CheckForSystemUpdatesRequest, v1.CheckForSystemUpdatesResponse](
			httpClient,
			baseURL+WebServiceCheckForSystemUpdatesProcedure,
			connect.WithSchema(webServiceCheckForSystemUpdatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkForContainerUpdates: connect.NewClient[v1.CheckForContainerUpdatesRequest, v1.CheckForContainerUpdatesResponse](
			httpClient,
			baseURL+WebServiceCheckForContainerUpdatesProcedure,
			connect.WithSchema(webServiceCheckForContainerUpdatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changeDaemonVersion: connect.NewClient[v1.ChangeDaemonVersionRequest, v1.ChangeDaemonVersionResponse](
			httpClient,
			baseURL+WebServiceChangeDaemonVersionProcedure,
			connect.WithSchema(webServiceChangeDaemonVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		installOSUpdate: connect.NewClient[v1.InstallOSUpdateRequest, v1.InstallOSUpdateResponse](
			httpClient,
			baseURL+WebServiceInstallOSUpdateProcedure,
			connect.WithSchema(webServiceInstallOSUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSystemImage: connect.NewClient[v1.SetSystemImageRequest, v1.SetSystemImageResponse](
			httpClient,
			baseURL+WebServiceSetSystemImageProcedure,
			connect.WithSchema(webServiceSetSystemImageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// webServiceClient implements WebServiceClient.
type webServiceClient struct {
	shutdownHost             *connect.Client[v1.ShutdownHostRequest, v1.ShutdownHostResponse]
	restartHost              *connect.Client[v1.RestartHostRequest, v1.RestartHostResponse]
	installApp               *connect.Client[v1.InstallAppRequest, v1.InstallAppResponse]
	deleteApp                *connect.Client[v1.DeleteAppRequest, v1.DeleteAppResponse]
	updateApp                *connect.Client[v1.UpdateAppRequest, v1.UpdateAppResponse]
	checkForSystemUpdates    *connect.Client[v1.CheckForSystemUpdatesRequest, v1.CheckForSystemUpdatesResponse]
	checkForContainerUpdates *connect.Client[v1.CheckForContainerUpdatesRequest, v1.CheckForContainerUpdatesResponse]
	changeDaemonVersion      *connect.Client[v1.ChangeDaemonVersionRequest, v1.ChangeDaemonVersionResponse]
	installOSUpdate          *connect.Client[v1.InstallOSUpdateRequest, v1.InstallOSUpdateResponse]
	setSystemImage           *connect.Client[v1.SetSystemImageRequest, v1.SetSystemImageResponse]
}

// ShutdownHost calls platform.server.v1.WebService.ShutdownHost.
func (c *webServiceClient) ShutdownHost(ctx context.Context, req *connect.Request[v1.ShutdownHostRequest]) (*connect.Response[v1.ShutdownHostResponse], error) {
	return c.shutdownHost.CallUnary(ctx, req)
}

// RestartHost calls platform.server.v1.WebService.RestartHost.
func (c *webServiceClient) RestartHost(ctx context.Context, req *connect.Request[v1.RestartHostRequest]) (*connect.Response[v1.RestartHostResponse], error) {
	return c.restartHost.CallUnary(ctx, req)
}

// InstallApp calls platform.server.v1.WebService.InstallApp.
func (c *webServiceClient) InstallApp(ctx context.Context, req *connect.Request[v1.InstallAppRequest]) (*connect.Response[v1.InstallAppResponse], error) {
	return c.installApp.CallUnary(ctx, req)
}

// DeleteApp calls platform.server.v1.WebService.DeleteApp.
func (c *webServiceClient) DeleteApp(ctx context.Context, req *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error) {
	return c.deleteApp.CallUnary(ctx, req)
}

// UpdateApp calls platform.server.v1.WebService.UpdateApp.
func (c *webServiceClient) UpdateApp(ctx context.Context, req *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return c.updateApp.CallUnary(ctx, req)
}

// CheckForSystemUpdates calls platform.server.v1.WebService.CheckForSystemUpdates.
func (c *webServiceClient) CheckForSystemUpdates(ctx context.Context, req *connect.Request[v1.CheckForSystemUpdatesRequest]) (*connect.Response[v1.CheckForSystemUpdatesResponse], error) {
	return c.checkForSystemUpdates.CallUnary(ctx, req)
}

// CheckForContainerUpdates calls platform.server.v1.WebService.CheckForContainerUpdates.
func (c *webServiceClient) CheckForContainerUpdates(ctx context.Context, req *connect.Request[v1.CheckForContainerUpdatesRequest]) (*connect.Response[v1.CheckForContainerUpdatesResponse], error) {
	return c.checkForContainerUpdates.CallUnary(ctx, req)
}

// ChangeDaemonVersion calls platform.server.v1.WebService.ChangeDaemonVersion.
func (c *webServiceClient) ChangeDaemonVersion(ctx context.Context, req *connect.Request[v1.ChangeDaemonVersionRequest]) (*connect.Response[v1.ChangeDaemonVersionResponse], error) {
	return c.changeDaemonVersion.CallUnary(ctx, req)
}

// InstallOSUpdate calls platform.server.v1.WebService.InstallOSUpdate.
func (c *webServiceClient) InstallOSUpdate(ctx context.Context, req *connect.Request[v1.InstallOSUpdateRequest]) (*connect.Response[v1.InstallOSUpdateResponse], error) {
	return c.installOSUpdate.CallUnary(ctx, req)
}

// SetSystemImage calls platform.server.v1.WebService.SetSystemImage.
func (c *webServiceClient) SetSystemImage(ctx context.Context, req *connect.Request[v1.SetSystemImageRequest]) (*connect.Response[v1.SetSystemImageResponse], error) {
	return c.setSystemImage.CallUnary(ctx, req)
}

// WebServiceHandler is an implementation of the platform.server.v1.WebService service.
type WebServiceHandler interface {
	ShutdownHost(context.Context, *connect.Request[v1.ShutdownHostRequest]) (*connect.Response[v1.ShutdownHostResponse], error)
	RestartHost(context.Context, *connect.Request[v1.RestartHostRequest]) (*connect.Response[v1.RestartHostResponse], error)
	InstallApp(context.Context, *connect.Request[v1.InstallAppRequest]) (*connect.Response[v1.InstallAppResponse], error)
	DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error)
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	CheckForSystemUpdates(context.Context, *connect.Request[v1.CheckForSystemUpdatesRequest]) (*connect.Response[v1.CheckForSystemUpdatesResponse], error)
	CheckForContainerUpdates(context.Context, *connect.Request[v1.CheckForContainerUpdatesRequest]) (*connect.Response[v1.CheckForContainerUpdatesResponse], error)
	ChangeDaemonVersion(context.Context, *connect.Request[v1.ChangeDaemonVersionRequest]) (*connect.Response[v1.ChangeDaemonVersionResponse], error)
	InstallOSUpdate(context.Context, *connect.Request[v1.InstallOSUpdateRequest]) (*connect.Response[v1.InstallOSUpdateResponse], error)
	SetSystemImage(context.Context, *connect.Request[v1.SetSystemImageRequest]) (*connect.Response[v1.SetSystemImageResponse], error)
}

// NewWebServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWebServiceHandler(svc WebServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	webServiceShutdownHostHandler := connect.NewUnaryHandler(
		WebServiceShutdownHostProcedure,
		svc.ShutdownHost,
		connect.WithSchema(webServiceShutdownHostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceRestartHostHandler := connect.NewUnaryHandler(
		WebServiceRestartHostProcedure,
		svc.RestartHost,
		connect.WithSchema(webServiceRestartHostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceInstallAppHandler := connect.NewUnaryHandler(
		WebServiceInstallAppProcedure,
		svc.InstallApp,
		connect.WithSchema(webServiceInstallAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceDeleteAppHandler := connect.NewUnaryHandler(
		WebServiceDeleteAppProcedure,
		svc.DeleteApp,
		connect.WithSchema(webServiceDeleteAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceUpdateAppHandler := connect.NewUnaryHandler(
		WebServiceUpdateAppProcedure,
		svc.UpdateApp,
		connect.WithSchema(webServiceUpdateAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceCheckForSystemUpdatesHandler := connect.NewUnaryHandler(
		WebServiceCheckForSystemUpdatesProcedure,
		svc.CheckForSystemUpdates,
		connect.WithSchema(webServiceCheckForSystemUpdatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceCheckForContainerUpdatesHandler := connect.NewUnaryHandler(
		WebServiceCheckForContainerUpdatesProcedure,
		svc.CheckForContainerUpdates,
		connect.WithSchema(webServiceCheckForContainerUpdatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceChangeDaemonVersionHandler := connect.NewUnaryHandler(
		WebServiceChangeDaemonVersionProcedure,
		svc.ChangeDaemonVersion,
		connect.WithSchema(webServiceChangeDaemonVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceInstallOSUpdateHandler := connect.NewUnaryHandler(
		WebServiceInstallOSUpdateProcedure,
		svc.InstallOSUpdate,
		connect.WithSchema(webServiceInstallOSUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceSetSystemImageHandler := connect.NewUnaryHandler(
		WebServiceSetSystemImageProcedure,
		svc.SetSystemImage,
		connect.WithSchema(webServiceSetSystemImageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.server.v1.WebService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WebServiceShutdownHostProcedure:
			webServiceShutdownHostHandler.ServeHTTP(w, r)
		case WebServiceRestartHostProcedure:
			webServiceRestartHostHandler.ServeHTTP(w, r)
		case WebServiceInstallAppProcedure:
			webServiceInstallAppHandler.ServeHTTP(w, r)
		case WebServiceDeleteAppProcedure:
			webServiceDeleteAppHandler.ServeHTTP(w, r)
		case WebServiceUpdateAppProcedure:
			webServiceUpdateAppHandler.ServeHTTP(w, r)
		case WebServiceCheckForSystemUpdatesProcedure:
			webServiceCheckForSystemUpdatesHandler.ServeHTTP(w, r)
		case WebServiceCheckForContainerUpdatesProcedure:
			webServiceCheckForContainerUpdatesHandler.ServeHTTP(w, r)
		case WebServiceChangeDaemonVersionProcedure:
			webServiceChangeDaemonVersionHandler.ServeHTTP(w, r)
		case WebServiceInstallOSUpdateProcedure:
			webServiceInstallOSUpdateHandler.ServeHTTP(w, r)
		case WebServiceSetSystemImageProcedure:
			webServiceSetSystemImageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWebServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWebServiceHandler struct{}

func (UnimplementedWebServiceHandler) ShutdownHost(context.Context, *connect.Request[v1.ShutdownHostRequest]) (*connect.Response[v1.ShutdownHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.ShutdownHost is not implemented"))
}

func (UnimplementedWebServiceHandler) RestartHost(context.Context, *connect.Request[v1.RestartHostRequest]) (*connect.Response[v1.RestartHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.RestartHost is not implemented"))
}

func (UnimplementedWebServiceHandler) InstallApp(context.Context, *connect.Request[v1.InstallAppRequest]) (*connect.Response[v1.InstallAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.InstallApp is not implemented"))
}

func (UnimplementedWebServiceHandler) DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.DeleteApp is not implemented"))
}

func (UnimplementedWebServiceHandler) UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.UpdateApp is not implemented"))
}

func (UnimplementedWebServiceHandler) CheckForSystemUpdates(context.Context, *connect.Request[v1.CheckForSystemUpdatesRequest]) (*connect.Response[v1.CheckForSystemUpdatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.CheckForSystemUpdates is not implemented"))
}

func (UnimplementedWebServiceHandler) CheckForContainerUpdates(context.Context, *connect.Request[v1.CheckForContainerUpdatesRequest]) (*connect.Response[v1.CheckForContainerUpdatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.CheckForContainerUpdates is not implemented"))
}

func (UnimplementedWebServiceHandler) ChangeDaemonVersion(context.Context, *connect.Request[v1.ChangeDaemonVersionRequest]) (*connect.Response[v1.ChangeDaemonVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.ChangeDaemonVersion is not implemented"))
}

func (UnimplementedWebServiceHandler) InstallOSUpdate(context.Context, *connect.Request[v1.InstallOSUpdateRequest]) (*connect.Response[v1.InstallOSUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.InstallOSUpdate is not implemented"))
}

func (UnimplementedWebServiceHandler) SetSystemImage(context.Context, *connect.Request[v1.SetSystemImageRequest]) (*connect.Response[v1.SetSystemImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.SetSystemImage is not implemented"))
}
