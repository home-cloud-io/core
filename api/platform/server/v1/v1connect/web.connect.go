// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: platform/server/v1/web.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/home-cloud-io/core/api/platform/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WebServiceName is the fully-qualified name of the WebService service.
	WebServiceName = "platform.server.v1.WebService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WebServiceShutdownHostProcedure is the fully-qualified name of the WebService's ShutdownHost RPC.
	WebServiceShutdownHostProcedure = "/platform.server.v1.WebService/ShutdownHost"
	// WebServiceRestartHostProcedure is the fully-qualified name of the WebService's RestartHost RPC.
	WebServiceRestartHostProcedure = "/platform.server.v1.WebService/RestartHost"
	// WebServiceInstallAppProcedure is the fully-qualified name of the WebService's InstallApp RPC.
	WebServiceInstallAppProcedure = "/platform.server.v1.WebService/InstallApp"
	// WebServiceDeleteAppProcedure is the fully-qualified name of the WebService's DeleteApp RPC.
	WebServiceDeleteAppProcedure = "/platform.server.v1.WebService/DeleteApp"
	// WebServiceUpdateAppProcedure is the fully-qualified name of the WebService's UpdateApp RPC.
	WebServiceUpdateAppProcedure = "/platform.server.v1.WebService/UpdateApp"
	// WebServiceCheckForSystemUpdatesProcedure is the fully-qualified name of the WebService's
	// CheckForSystemUpdates RPC.
	WebServiceCheckForSystemUpdatesProcedure = "/platform.server.v1.WebService/CheckForSystemUpdates"
	// WebServiceCheckForContainerUpdatesProcedure is the fully-qualified name of the WebService's
	// CheckForContainerUpdates RPC.
	WebServiceCheckForContainerUpdatesProcedure = "/platform.server.v1.WebService/CheckForContainerUpdates"
	// WebServiceChangeDaemonVersionProcedure is the fully-qualified name of the WebService's
	// ChangeDaemonVersion RPC.
	WebServiceChangeDaemonVersionProcedure = "/platform.server.v1.WebService/ChangeDaemonVersion"
	// WebServiceInstallOSUpdateProcedure is the fully-qualified name of the WebService's
	// InstallOSUpdate RPC.
	WebServiceInstallOSUpdateProcedure = "/platform.server.v1.WebService/InstallOSUpdate"
	// WebServiceSetSystemImageProcedure is the fully-qualified name of the WebService's SetSystemImage
	// RPC.
	WebServiceSetSystemImageProcedure = "/platform.server.v1.WebService/SetSystemImage"
	// WebServiceAppsHealthCheckProcedure is the fully-qualified name of the WebService's
	// AppsHealthCheck RPC.
	WebServiceAppsHealthCheckProcedure = "/platform.server.v1.WebService/AppsHealthCheck"
	// WebServiceGetSystemStatsProcedure is the fully-qualified name of the WebService's GetSystemStats
	// RPC.
	WebServiceGetSystemStatsProcedure = "/platform.server.v1.WebService/GetSystemStats"
	// WebServiceIsDeviceSetupProcedure is the fully-qualified name of the WebService's IsDeviceSetup
	// RPC.
	WebServiceIsDeviceSetupProcedure = "/platform.server.v1.WebService/IsDeviceSetup"
	// WebServiceInitializeDeviceProcedure is the fully-qualified name of the WebService's
	// InitializeDevice RPC.
	WebServiceInitializeDeviceProcedure = "/platform.server.v1.WebService/InitializeDevice"
	// WebServiceLoginProcedure is the fully-qualified name of the WebService's Login RPC.
	WebServiceLoginProcedure = "/platform.server.v1.WebService/Login"
	// WebServiceGetAppsInStoreProcedure is the fully-qualified name of the WebService's GetAppsInStore
	// RPC.
	WebServiceGetAppsInStoreProcedure = "/platform.server.v1.WebService/GetAppsInStore"
	// WebServiceGetDeviceSettingsProcedure is the fully-qualified name of the WebService's
	// GetDeviceSettings RPC.
	WebServiceGetDeviceSettingsProcedure = "/platform.server.v1.WebService/GetDeviceSettings"
	// WebServiceSetDeviceSettingsProcedure is the fully-qualified name of the WebService's
	// SetDeviceSettings RPC.
	WebServiceSetDeviceSettingsProcedure = "/platform.server.v1.WebService/SetDeviceSettings"
	// WebServiceGetAppStorageProcedure is the fully-qualified name of the WebService's GetAppStorage
	// RPC.
	WebServiceGetAppStorageProcedure = "/platform.server.v1.WebService/GetAppStorage"
	// WebServiceEnableSecureTunnellingProcedure is the fully-qualified name of the WebService's
	// EnableSecureTunnelling RPC.
	WebServiceEnableSecureTunnellingProcedure = "/platform.server.v1.WebService/EnableSecureTunnelling"
	// WebServiceDisableSecureTunnellingProcedure is the fully-qualified name of the WebService's
	// DisableSecureTunnelling RPC.
	WebServiceDisableSecureTunnellingProcedure = "/platform.server.v1.WebService/DisableSecureTunnelling"
	// WebServiceRegisterToLocatorProcedure is the fully-qualified name of the WebService's
	// RegisterToLocator RPC.
	WebServiceRegisterToLocatorProcedure = "/platform.server.v1.WebService/RegisterToLocator"
	// WebServiceDeregisterFromLocatorProcedure is the fully-qualified name of the WebService's
	// DeregisterFromLocator RPC.
	WebServiceDeregisterFromLocatorProcedure = "/platform.server.v1.WebService/DeregisterFromLocator"
	// WebServiceRegisterPeerProcedure is the fully-qualified name of the WebService's RegisterPeer RPC.
	WebServiceRegisterPeerProcedure = "/platform.server.v1.WebService/RegisterPeer"
	// WebServiceGetComponentVersionsProcedure is the fully-qualified name of the WebService's
	// GetComponentVersions RPC.
	WebServiceGetComponentVersionsProcedure = "/platform.server.v1.WebService/GetComponentVersions"
	// WebServiceSubscribeProcedure is the fully-qualified name of the WebService's Subscribe RPC.
	WebServiceSubscribeProcedure = "/platform.server.v1.WebService/Subscribe"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	webServiceServiceDescriptor                        = v1.File_platform_server_v1_web_proto.Services().ByName("WebService")
	webServiceShutdownHostMethodDescriptor             = webServiceServiceDescriptor.Methods().ByName("ShutdownHost")
	webServiceRestartHostMethodDescriptor              = webServiceServiceDescriptor.Methods().ByName("RestartHost")
	webServiceInstallAppMethodDescriptor               = webServiceServiceDescriptor.Methods().ByName("InstallApp")
	webServiceDeleteAppMethodDescriptor                = webServiceServiceDescriptor.Methods().ByName("DeleteApp")
	webServiceUpdateAppMethodDescriptor                = webServiceServiceDescriptor.Methods().ByName("UpdateApp")
	webServiceCheckForSystemUpdatesMethodDescriptor    = webServiceServiceDescriptor.Methods().ByName("CheckForSystemUpdates")
	webServiceCheckForContainerUpdatesMethodDescriptor = webServiceServiceDescriptor.Methods().ByName("CheckForContainerUpdates")
	webServiceChangeDaemonVersionMethodDescriptor      = webServiceServiceDescriptor.Methods().ByName("ChangeDaemonVersion")
	webServiceInstallOSUpdateMethodDescriptor          = webServiceServiceDescriptor.Methods().ByName("InstallOSUpdate")
	webServiceSetSystemImageMethodDescriptor           = webServiceServiceDescriptor.Methods().ByName("SetSystemImage")
	webServiceAppsHealthCheckMethodDescriptor          = webServiceServiceDescriptor.Methods().ByName("AppsHealthCheck")
	webServiceGetSystemStatsMethodDescriptor           = webServiceServiceDescriptor.Methods().ByName("GetSystemStats")
	webServiceIsDeviceSetupMethodDescriptor            = webServiceServiceDescriptor.Methods().ByName("IsDeviceSetup")
	webServiceInitializeDeviceMethodDescriptor         = webServiceServiceDescriptor.Methods().ByName("InitializeDevice")
	webServiceLoginMethodDescriptor                    = webServiceServiceDescriptor.Methods().ByName("Login")
	webServiceGetAppsInStoreMethodDescriptor           = webServiceServiceDescriptor.Methods().ByName("GetAppsInStore")
	webServiceGetDeviceSettingsMethodDescriptor        = webServiceServiceDescriptor.Methods().ByName("GetDeviceSettings")
	webServiceSetDeviceSettingsMethodDescriptor        = webServiceServiceDescriptor.Methods().ByName("SetDeviceSettings")
	webServiceGetAppStorageMethodDescriptor            = webServiceServiceDescriptor.Methods().ByName("GetAppStorage")
	webServiceEnableSecureTunnellingMethodDescriptor   = webServiceServiceDescriptor.Methods().ByName("EnableSecureTunnelling")
	webServiceDisableSecureTunnellingMethodDescriptor  = webServiceServiceDescriptor.Methods().ByName("DisableSecureTunnelling")
	webServiceRegisterToLocatorMethodDescriptor        = webServiceServiceDescriptor.Methods().ByName("RegisterToLocator")
	webServiceDeregisterFromLocatorMethodDescriptor    = webServiceServiceDescriptor.Methods().ByName("DeregisterFromLocator")
	webServiceRegisterPeerMethodDescriptor             = webServiceServiceDescriptor.Methods().ByName("RegisterPeer")
	webServiceGetComponentVersionsMethodDescriptor     = webServiceServiceDescriptor.Methods().ByName("GetComponentVersions")
	webServiceSubscribeMethodDescriptor                = webServiceServiceDescriptor.Methods().ByName("Subscribe")
)

// WebServiceClient is a client for the platform.server.v1.WebService service.
type WebServiceClient interface {
	// Shutdown the host machine running Home Cloud
	ShutdownHost(context.Context, *connect.Request[v1.ShutdownHostRequest]) (*connect.Response[v1.ShutdownHostResponse], error)
	// Restart the host machine running Home Cloud
	RestartHost(context.Context, *connect.Request[v1.RestartHostRequest]) (*connect.Response[v1.RestartHostResponse], error)
	// Install a Home Cloud application
	InstallApp(context.Context, *connect.Request[v1.InstallAppRequest]) (*connect.Response[v1.InstallAppResponse], error)
	// Delete a Home Cloud application
	DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error)
	// Update a Home Cloud application
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	// Check for available NixOS and Daemon updates
	CheckForSystemUpdates(context.Context, *connect.Request[v1.CheckForSystemUpdatesRequest]) (*connect.Response[v1.CheckForSystemUpdatesResponse], error)
	// Check for available system (draft and home cloud) container updates
	CheckForContainerUpdates(context.Context, *connect.Request[v1.CheckForContainerUpdatesRequest]) (*connect.Response[v1.CheckForContainerUpdatesResponse], error)
	// Change the currently installed Daemon version
	ChangeDaemonVersion(context.Context, *connect.Request[v1.ChangeDaemonVersionRequest]) (*connect.Response[v1.ChangeDaemonVersionResponse], error)
	// Install available NixOS updates (call after calling CheckForSystemUpdates)
	InstallOSUpdate(context.Context, *connect.Request[v1.InstallOSUpdateRequest]) (*connect.Response[v1.InstallOSUpdateResponse], error)
	// Set a system (draft and home cloud) container image (used for updating images)
	SetSystemImage(context.Context, *connect.Request[v1.SetSystemImageRequest]) (*connect.Response[v1.SetSystemImageResponse], error)
	// Check the current health of all installed Home Cloud applications
	AppsHealthCheck(context.Context, *connect.Request[v1.AppsHealthCheckRequest]) (*connect.Response[v1.AppsHealthCheckResponse], error)
	// Get the current host machine stats (cpu, memory, drives)
	GetSystemStats(context.Context, *connect.Request[v1.GetSystemStatsRequest]) (*connect.Response[v1.GetSystemStatsResponse], error)
	// Check to validate if the device has gone through the onboarding process
	IsDeviceSetup(context.Context, *connect.Request[v1.IsDeviceSetupRequest]) (*connect.Response[v1.IsDeviceSetupResponse], error)
	// Initialize the device with the user's credentials and settings
	InitializeDevice(context.Context, *connect.Request[v1.InitializeDeviceRequest]) (*connect.Response[v1.InitializeDeviceResponse], error)
	// Login to the device
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	// Get all apps available in the store
	GetAppsInStore(context.Context, *connect.Request[v1.GetAppsInStoreRequest]) (*connect.Response[v1.GetAppsInStoreResponse], error)
	// Get the device settings
	GetDeviceSettings(context.Context, *connect.Request[v1.GetDeviceSettingsRequest]) (*connect.Response[v1.GetDeviceSettingsResponse], error)
	// Set the device settings
	SetDeviceSettings(context.Context, *connect.Request[v1.SetDeviceSettingsRequest]) (*connect.Response[v1.SetDeviceSettingsResponse], error)
	// Get all installed app storage volumes
	GetAppStorage(context.Context, *connect.Request[v1.GetAppStorageRequest]) (*connect.Response[v1.GetAppStorageResponse], error)
	// Enables the remote access feature
	EnableSecureTunnelling(context.Context, *connect.Request[v1.EnableSecureTunnellingRequest]) (*connect.Response[v1.EnableSecureTunnellingResponse], error)
	// Disables the remote access feature
	DisableSecureTunnelling(context.Context, *connect.Request[v1.DisableSecureTunnellingRequest]) (*connect.Response[v1.DisableSecureTunnellingResponse], error)
	// Register the server with the given Locator service
	RegisterToLocator(context.Context, *connect.Request[v1.RegisterToLocatorRequest]) (*connect.Response[v1.RegisterToLocatorResponse], error)
	// Deregister the server from the given Locator service
	DeregisterFromLocator(context.Context, *connect.Request[v1.DeregisterFromLocatorRequest]) (*connect.Response[v1.DeregisterFromLocatorResponse], error)
	// RegisterPeer is used to connect a client to the home-cloud overlay network
	RegisterPeer(context.Context, *connect.Request[v1.RegisterPeerRequest]) (*connect.Response[v1.RegisterPeerResponse], error)
	// GetComponentVersions returns the versions of all system components (daemon, server, etc.)
	GetComponentVersions(context.Context, *connect.Request[v1.GetComponentVersionsRequest]) (*connect.Response[v1.GetComponentVersionsResponse], error)
	// Subscribe to the server for events
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.ServerEvent], error)
}

// NewWebServiceClient constructs a client for the platform.server.v1.WebService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWebServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WebServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &webServiceClient{
		shutdownHost: connect.NewClient[v1.ShutdownHostRequest, v1.ShutdownHostResponse](
			httpClient,
			baseURL+WebServiceShutdownHostProcedure,
			connect.WithSchema(webServiceShutdownHostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		restartHost: connect.NewClient[v1.RestartHostRequest, v1.RestartHostResponse](
			httpClient,
			baseURL+WebServiceRestartHostProcedure,
			connect.WithSchema(webServiceRestartHostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		installApp: connect.NewClient[v1.InstallAppRequest, v1.InstallAppResponse](
			httpClient,
			baseURL+WebServiceInstallAppProcedure,
			connect.WithSchema(webServiceInstallAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteApp: connect.NewClient[v1.DeleteAppRequest, v1.DeleteAppResponse](
			httpClient,
			baseURL+WebServiceDeleteAppProcedure,
			connect.WithSchema(webServiceDeleteAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateApp: connect.NewClient[v1.UpdateAppRequest, v1.UpdateAppResponse](
			httpClient,
			baseURL+WebServiceUpdateAppProcedure,
			connect.WithSchema(webServiceUpdateAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkForSystemUpdates: connect.NewClient[v1.CheckForSystemUpdatesRequest, v1.CheckForSystemUpdatesResponse](
			httpClient,
			baseURL+WebServiceCheckForSystemUpdatesProcedure,
			connect.WithSchema(webServiceCheckForSystemUpdatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkForContainerUpdates: connect.NewClient[v1.CheckForContainerUpdatesRequest, v1.CheckForContainerUpdatesResponse](
			httpClient,
			baseURL+WebServiceCheckForContainerUpdatesProcedure,
			connect.WithSchema(webServiceCheckForContainerUpdatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changeDaemonVersion: connect.NewClient[v1.ChangeDaemonVersionRequest, v1.ChangeDaemonVersionResponse](
			httpClient,
			baseURL+WebServiceChangeDaemonVersionProcedure,
			connect.WithSchema(webServiceChangeDaemonVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		installOSUpdate: connect.NewClient[v1.InstallOSUpdateRequest, v1.InstallOSUpdateResponse](
			httpClient,
			baseURL+WebServiceInstallOSUpdateProcedure,
			connect.WithSchema(webServiceInstallOSUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSystemImage: connect.NewClient[v1.SetSystemImageRequest, v1.SetSystemImageResponse](
			httpClient,
			baseURL+WebServiceSetSystemImageProcedure,
			connect.WithSchema(webServiceSetSystemImageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		appsHealthCheck: connect.NewClient[v1.AppsHealthCheckRequest, v1.AppsHealthCheckResponse](
			httpClient,
			baseURL+WebServiceAppsHealthCheckProcedure,
			connect.WithSchema(webServiceAppsHealthCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSystemStats: connect.NewClient[v1.GetSystemStatsRequest, v1.GetSystemStatsResponse](
			httpClient,
			baseURL+WebServiceGetSystemStatsProcedure,
			connect.WithSchema(webServiceGetSystemStatsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		isDeviceSetup: connect.NewClient[v1.IsDeviceSetupRequest, v1.IsDeviceSetupResponse](
			httpClient,
			baseURL+WebServiceIsDeviceSetupProcedure,
			connect.WithSchema(webServiceIsDeviceSetupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		initializeDevice: connect.NewClient[v1.InitializeDeviceRequest, v1.InitializeDeviceResponse](
			httpClient,
			baseURL+WebServiceInitializeDeviceProcedure,
			connect.WithSchema(webServiceInitializeDeviceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+WebServiceLoginProcedure,
			connect.WithSchema(webServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAppsInStore: connect.NewClient[v1.GetAppsInStoreRequest, v1.GetAppsInStoreResponse](
			httpClient,
			baseURL+WebServiceGetAppsInStoreProcedure,
			connect.WithSchema(webServiceGetAppsInStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDeviceSettings: connect.NewClient[v1.GetDeviceSettingsRequest, v1.GetDeviceSettingsResponse](
			httpClient,
			baseURL+WebServiceGetDeviceSettingsProcedure,
			connect.WithSchema(webServiceGetDeviceSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setDeviceSettings: connect.NewClient[v1.SetDeviceSettingsRequest, v1.SetDeviceSettingsResponse](
			httpClient,
			baseURL+WebServiceSetDeviceSettingsProcedure,
			connect.WithSchema(webServiceSetDeviceSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAppStorage: connect.NewClient[v1.GetAppStorageRequest, v1.GetAppStorageResponse](
			httpClient,
			baseURL+WebServiceGetAppStorageProcedure,
			connect.WithSchema(webServiceGetAppStorageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableSecureTunnelling: connect.NewClient[v1.EnableSecureTunnellingRequest, v1.EnableSecureTunnellingResponse](
			httpClient,
			baseURL+WebServiceEnableSecureTunnellingProcedure,
			connect.WithSchema(webServiceEnableSecureTunnellingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disableSecureTunnelling: connect.NewClient[v1.DisableSecureTunnellingRequest, v1.DisableSecureTunnellingResponse](
			httpClient,
			baseURL+WebServiceDisableSecureTunnellingProcedure,
			connect.WithSchema(webServiceDisableSecureTunnellingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerToLocator: connect.NewClient[v1.RegisterToLocatorRequest, v1.RegisterToLocatorResponse](
			httpClient,
			baseURL+WebServiceRegisterToLocatorProcedure,
			connect.WithSchema(webServiceRegisterToLocatorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deregisterFromLocator: connect.NewClient[v1.DeregisterFromLocatorRequest, v1.DeregisterFromLocatorResponse](
			httpClient,
			baseURL+WebServiceDeregisterFromLocatorProcedure,
			connect.WithSchema(webServiceDeregisterFromLocatorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerPeer: connect.NewClient[v1.RegisterPeerRequest, v1.RegisterPeerResponse](
			httpClient,
			baseURL+WebServiceRegisterPeerProcedure,
			connect.WithSchema(webServiceRegisterPeerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getComponentVersions: connect.NewClient[v1.GetComponentVersionsRequest, v1.GetComponentVersionsResponse](
			httpClient,
			baseURL+WebServiceGetComponentVersionsProcedure,
			connect.WithSchema(webServiceGetComponentVersionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribe: connect.NewClient[v1.SubscribeRequest, v1.ServerEvent](
			httpClient,
			baseURL+WebServiceSubscribeProcedure,
			connect.WithSchema(webServiceSubscribeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// webServiceClient implements WebServiceClient.
type webServiceClient struct {
	shutdownHost             *connect.Client[v1.ShutdownHostRequest, v1.ShutdownHostResponse]
	restartHost              *connect.Client[v1.RestartHostRequest, v1.RestartHostResponse]
	installApp               *connect.Client[v1.InstallAppRequest, v1.InstallAppResponse]
	deleteApp                *connect.Client[v1.DeleteAppRequest, v1.DeleteAppResponse]
	updateApp                *connect.Client[v1.UpdateAppRequest, v1.UpdateAppResponse]
	checkForSystemUpdates    *connect.Client[v1.CheckForSystemUpdatesRequest, v1.CheckForSystemUpdatesResponse]
	checkForContainerUpdates *connect.Client[v1.CheckForContainerUpdatesRequest, v1.CheckForContainerUpdatesResponse]
	changeDaemonVersion      *connect.Client[v1.ChangeDaemonVersionRequest, v1.ChangeDaemonVersionResponse]
	installOSUpdate          *connect.Client[v1.InstallOSUpdateRequest, v1.InstallOSUpdateResponse]
	setSystemImage           *connect.Client[v1.SetSystemImageRequest, v1.SetSystemImageResponse]
	appsHealthCheck          *connect.Client[v1.AppsHealthCheckRequest, v1.AppsHealthCheckResponse]
	getSystemStats           *connect.Client[v1.GetSystemStatsRequest, v1.GetSystemStatsResponse]
	isDeviceSetup            *connect.Client[v1.IsDeviceSetupRequest, v1.IsDeviceSetupResponse]
	initializeDevice         *connect.Client[v1.InitializeDeviceRequest, v1.InitializeDeviceResponse]
	login                    *connect.Client[v1.LoginRequest, v1.LoginResponse]
	getAppsInStore           *connect.Client[v1.GetAppsInStoreRequest, v1.GetAppsInStoreResponse]
	getDeviceSettings        *connect.Client[v1.GetDeviceSettingsRequest, v1.GetDeviceSettingsResponse]
	setDeviceSettings        *connect.Client[v1.SetDeviceSettingsRequest, v1.SetDeviceSettingsResponse]
	getAppStorage            *connect.Client[v1.GetAppStorageRequest, v1.GetAppStorageResponse]
	enableSecureTunnelling   *connect.Client[v1.EnableSecureTunnellingRequest, v1.EnableSecureTunnellingResponse]
	disableSecureTunnelling  *connect.Client[v1.DisableSecureTunnellingRequest, v1.DisableSecureTunnellingResponse]
	registerToLocator        *connect.Client[v1.RegisterToLocatorRequest, v1.RegisterToLocatorResponse]
	deregisterFromLocator    *connect.Client[v1.DeregisterFromLocatorRequest, v1.DeregisterFromLocatorResponse]
	registerPeer             *connect.Client[v1.RegisterPeerRequest, v1.RegisterPeerResponse]
	getComponentVersions     *connect.Client[v1.GetComponentVersionsRequest, v1.GetComponentVersionsResponse]
	subscribe                *connect.Client[v1.SubscribeRequest, v1.ServerEvent]
}

// ShutdownHost calls platform.server.v1.WebService.ShutdownHost.
func (c *webServiceClient) ShutdownHost(ctx context.Context, req *connect.Request[v1.ShutdownHostRequest]) (*connect.Response[v1.ShutdownHostResponse], error) {
	return c.shutdownHost.CallUnary(ctx, req)
}

// RestartHost calls platform.server.v1.WebService.RestartHost.
func (c *webServiceClient) RestartHost(ctx context.Context, req *connect.Request[v1.RestartHostRequest]) (*connect.Response[v1.RestartHostResponse], error) {
	return c.restartHost.CallUnary(ctx, req)
}

// InstallApp calls platform.server.v1.WebService.InstallApp.
func (c *webServiceClient) InstallApp(ctx context.Context, req *connect.Request[v1.InstallAppRequest]) (*connect.Response[v1.InstallAppResponse], error) {
	return c.installApp.CallUnary(ctx, req)
}

// DeleteApp calls platform.server.v1.WebService.DeleteApp.
func (c *webServiceClient) DeleteApp(ctx context.Context, req *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error) {
	return c.deleteApp.CallUnary(ctx, req)
}

// UpdateApp calls platform.server.v1.WebService.UpdateApp.
func (c *webServiceClient) UpdateApp(ctx context.Context, req *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return c.updateApp.CallUnary(ctx, req)
}

// CheckForSystemUpdates calls platform.server.v1.WebService.CheckForSystemUpdates.
func (c *webServiceClient) CheckForSystemUpdates(ctx context.Context, req *connect.Request[v1.CheckForSystemUpdatesRequest]) (*connect.Response[v1.CheckForSystemUpdatesResponse], error) {
	return c.checkForSystemUpdates.CallUnary(ctx, req)
}

// CheckForContainerUpdates calls platform.server.v1.WebService.CheckForContainerUpdates.
func (c *webServiceClient) CheckForContainerUpdates(ctx context.Context, req *connect.Request[v1.CheckForContainerUpdatesRequest]) (*connect.Response[v1.CheckForContainerUpdatesResponse], error) {
	return c.checkForContainerUpdates.CallUnary(ctx, req)
}

// ChangeDaemonVersion calls platform.server.v1.WebService.ChangeDaemonVersion.
func (c *webServiceClient) ChangeDaemonVersion(ctx context.Context, req *connect.Request[v1.ChangeDaemonVersionRequest]) (*connect.Response[v1.ChangeDaemonVersionResponse], error) {
	return c.changeDaemonVersion.CallUnary(ctx, req)
}

// InstallOSUpdate calls platform.server.v1.WebService.InstallOSUpdate.
func (c *webServiceClient) InstallOSUpdate(ctx context.Context, req *connect.Request[v1.InstallOSUpdateRequest]) (*connect.Response[v1.InstallOSUpdateResponse], error) {
	return c.installOSUpdate.CallUnary(ctx, req)
}

// SetSystemImage calls platform.server.v1.WebService.SetSystemImage.
func (c *webServiceClient) SetSystemImage(ctx context.Context, req *connect.Request[v1.SetSystemImageRequest]) (*connect.Response[v1.SetSystemImageResponse], error) {
	return c.setSystemImage.CallUnary(ctx, req)
}

// AppsHealthCheck calls platform.server.v1.WebService.AppsHealthCheck.
func (c *webServiceClient) AppsHealthCheck(ctx context.Context, req *connect.Request[v1.AppsHealthCheckRequest]) (*connect.Response[v1.AppsHealthCheckResponse], error) {
	return c.appsHealthCheck.CallUnary(ctx, req)
}

// GetSystemStats calls platform.server.v1.WebService.GetSystemStats.
func (c *webServiceClient) GetSystemStats(ctx context.Context, req *connect.Request[v1.GetSystemStatsRequest]) (*connect.Response[v1.GetSystemStatsResponse], error) {
	return c.getSystemStats.CallUnary(ctx, req)
}

// IsDeviceSetup calls platform.server.v1.WebService.IsDeviceSetup.
func (c *webServiceClient) IsDeviceSetup(ctx context.Context, req *connect.Request[v1.IsDeviceSetupRequest]) (*connect.Response[v1.IsDeviceSetupResponse], error) {
	return c.isDeviceSetup.CallUnary(ctx, req)
}

// InitializeDevice calls platform.server.v1.WebService.InitializeDevice.
func (c *webServiceClient) InitializeDevice(ctx context.Context, req *connect.Request[v1.InitializeDeviceRequest]) (*connect.Response[v1.InitializeDeviceResponse], error) {
	return c.initializeDevice.CallUnary(ctx, req)
}

// Login calls platform.server.v1.WebService.Login.
func (c *webServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// GetAppsInStore calls platform.server.v1.WebService.GetAppsInStore.
func (c *webServiceClient) GetAppsInStore(ctx context.Context, req *connect.Request[v1.GetAppsInStoreRequest]) (*connect.Response[v1.GetAppsInStoreResponse], error) {
	return c.getAppsInStore.CallUnary(ctx, req)
}

// GetDeviceSettings calls platform.server.v1.WebService.GetDeviceSettings.
func (c *webServiceClient) GetDeviceSettings(ctx context.Context, req *connect.Request[v1.GetDeviceSettingsRequest]) (*connect.Response[v1.GetDeviceSettingsResponse], error) {
	return c.getDeviceSettings.CallUnary(ctx, req)
}

// SetDeviceSettings calls platform.server.v1.WebService.SetDeviceSettings.
func (c *webServiceClient) SetDeviceSettings(ctx context.Context, req *connect.Request[v1.SetDeviceSettingsRequest]) (*connect.Response[v1.SetDeviceSettingsResponse], error) {
	return c.setDeviceSettings.CallUnary(ctx, req)
}

// GetAppStorage calls platform.server.v1.WebService.GetAppStorage.
func (c *webServiceClient) GetAppStorage(ctx context.Context, req *connect.Request[v1.GetAppStorageRequest]) (*connect.Response[v1.GetAppStorageResponse], error) {
	return c.getAppStorage.CallUnary(ctx, req)
}

// EnableSecureTunnelling calls platform.server.v1.WebService.EnableSecureTunnelling.
func (c *webServiceClient) EnableSecureTunnelling(ctx context.Context, req *connect.Request[v1.EnableSecureTunnellingRequest]) (*connect.Response[v1.EnableSecureTunnellingResponse], error) {
	return c.enableSecureTunnelling.CallUnary(ctx, req)
}

// DisableSecureTunnelling calls platform.server.v1.WebService.DisableSecureTunnelling.
func (c *webServiceClient) DisableSecureTunnelling(ctx context.Context, req *connect.Request[v1.DisableSecureTunnellingRequest]) (*connect.Response[v1.DisableSecureTunnellingResponse], error) {
	return c.disableSecureTunnelling.CallUnary(ctx, req)
}

// RegisterToLocator calls platform.server.v1.WebService.RegisterToLocator.
func (c *webServiceClient) RegisterToLocator(ctx context.Context, req *connect.Request[v1.RegisterToLocatorRequest]) (*connect.Response[v1.RegisterToLocatorResponse], error) {
	return c.registerToLocator.CallUnary(ctx, req)
}

// DeregisterFromLocator calls platform.server.v1.WebService.DeregisterFromLocator.
func (c *webServiceClient) DeregisterFromLocator(ctx context.Context, req *connect.Request[v1.DeregisterFromLocatorRequest]) (*connect.Response[v1.DeregisterFromLocatorResponse], error) {
	return c.deregisterFromLocator.CallUnary(ctx, req)
}

// RegisterPeer calls platform.server.v1.WebService.RegisterPeer.
func (c *webServiceClient) RegisterPeer(ctx context.Context, req *connect.Request[v1.RegisterPeerRequest]) (*connect.Response[v1.RegisterPeerResponse], error) {
	return c.registerPeer.CallUnary(ctx, req)
}

// GetComponentVersions calls platform.server.v1.WebService.GetComponentVersions.
func (c *webServiceClient) GetComponentVersions(ctx context.Context, req *connect.Request[v1.GetComponentVersionsRequest]) (*connect.Response[v1.GetComponentVersionsResponse], error) {
	return c.getComponentVersions.CallUnary(ctx, req)
}

// Subscribe calls platform.server.v1.WebService.Subscribe.
func (c *webServiceClient) Subscribe(ctx context.Context, req *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.ServerEvent], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// WebServiceHandler is an implementation of the platform.server.v1.WebService service.
type WebServiceHandler interface {
	// Shutdown the host machine running Home Cloud
	ShutdownHost(context.Context, *connect.Request[v1.ShutdownHostRequest]) (*connect.Response[v1.ShutdownHostResponse], error)
	// Restart the host machine running Home Cloud
	RestartHost(context.Context, *connect.Request[v1.RestartHostRequest]) (*connect.Response[v1.RestartHostResponse], error)
	// Install a Home Cloud application
	InstallApp(context.Context, *connect.Request[v1.InstallAppRequest]) (*connect.Response[v1.InstallAppResponse], error)
	// Delete a Home Cloud application
	DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error)
	// Update a Home Cloud application
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	// Check for available NixOS and Daemon updates
	CheckForSystemUpdates(context.Context, *connect.Request[v1.CheckForSystemUpdatesRequest]) (*connect.Response[v1.CheckForSystemUpdatesResponse], error)
	// Check for available system (draft and home cloud) container updates
	CheckForContainerUpdates(context.Context, *connect.Request[v1.CheckForContainerUpdatesRequest]) (*connect.Response[v1.CheckForContainerUpdatesResponse], error)
	// Change the currently installed Daemon version
	ChangeDaemonVersion(context.Context, *connect.Request[v1.ChangeDaemonVersionRequest]) (*connect.Response[v1.ChangeDaemonVersionResponse], error)
	// Install available NixOS updates (call after calling CheckForSystemUpdates)
	InstallOSUpdate(context.Context, *connect.Request[v1.InstallOSUpdateRequest]) (*connect.Response[v1.InstallOSUpdateResponse], error)
	// Set a system (draft and home cloud) container image (used for updating images)
	SetSystemImage(context.Context, *connect.Request[v1.SetSystemImageRequest]) (*connect.Response[v1.SetSystemImageResponse], error)
	// Check the current health of all installed Home Cloud applications
	AppsHealthCheck(context.Context, *connect.Request[v1.AppsHealthCheckRequest]) (*connect.Response[v1.AppsHealthCheckResponse], error)
	// Get the current host machine stats (cpu, memory, drives)
	GetSystemStats(context.Context, *connect.Request[v1.GetSystemStatsRequest]) (*connect.Response[v1.GetSystemStatsResponse], error)
	// Check to validate if the device has gone through the onboarding process
	IsDeviceSetup(context.Context, *connect.Request[v1.IsDeviceSetupRequest]) (*connect.Response[v1.IsDeviceSetupResponse], error)
	// Initialize the device with the user's credentials and settings
	InitializeDevice(context.Context, *connect.Request[v1.InitializeDeviceRequest]) (*connect.Response[v1.InitializeDeviceResponse], error)
	// Login to the device
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	// Get all apps available in the store
	GetAppsInStore(context.Context, *connect.Request[v1.GetAppsInStoreRequest]) (*connect.Response[v1.GetAppsInStoreResponse], error)
	// Get the device settings
	GetDeviceSettings(context.Context, *connect.Request[v1.GetDeviceSettingsRequest]) (*connect.Response[v1.GetDeviceSettingsResponse], error)
	// Set the device settings
	SetDeviceSettings(context.Context, *connect.Request[v1.SetDeviceSettingsRequest]) (*connect.Response[v1.SetDeviceSettingsResponse], error)
	// Get all installed app storage volumes
	GetAppStorage(context.Context, *connect.Request[v1.GetAppStorageRequest]) (*connect.Response[v1.GetAppStorageResponse], error)
	// Enables the remote access feature
	EnableSecureTunnelling(context.Context, *connect.Request[v1.EnableSecureTunnellingRequest]) (*connect.Response[v1.EnableSecureTunnellingResponse], error)
	// Disables the remote access feature
	DisableSecureTunnelling(context.Context, *connect.Request[v1.DisableSecureTunnellingRequest]) (*connect.Response[v1.DisableSecureTunnellingResponse], error)
	// Register the server with the given Locator service
	RegisterToLocator(context.Context, *connect.Request[v1.RegisterToLocatorRequest]) (*connect.Response[v1.RegisterToLocatorResponse], error)
	// Deregister the server from the given Locator service
	DeregisterFromLocator(context.Context, *connect.Request[v1.DeregisterFromLocatorRequest]) (*connect.Response[v1.DeregisterFromLocatorResponse], error)
	// RegisterPeer is used to connect a client to the home-cloud overlay network
	RegisterPeer(context.Context, *connect.Request[v1.RegisterPeerRequest]) (*connect.Response[v1.RegisterPeerResponse], error)
	// GetComponentVersions returns the versions of all system components (daemon, server, etc.)
	GetComponentVersions(context.Context, *connect.Request[v1.GetComponentVersionsRequest]) (*connect.Response[v1.GetComponentVersionsResponse], error)
	// Subscribe to the server for events
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.ServerEvent]) error
}

// NewWebServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWebServiceHandler(svc WebServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	webServiceShutdownHostHandler := connect.NewUnaryHandler(
		WebServiceShutdownHostProcedure,
		svc.ShutdownHost,
		connect.WithSchema(webServiceShutdownHostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceRestartHostHandler := connect.NewUnaryHandler(
		WebServiceRestartHostProcedure,
		svc.RestartHost,
		connect.WithSchema(webServiceRestartHostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceInstallAppHandler := connect.NewUnaryHandler(
		WebServiceInstallAppProcedure,
		svc.InstallApp,
		connect.WithSchema(webServiceInstallAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceDeleteAppHandler := connect.NewUnaryHandler(
		WebServiceDeleteAppProcedure,
		svc.DeleteApp,
		connect.WithSchema(webServiceDeleteAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceUpdateAppHandler := connect.NewUnaryHandler(
		WebServiceUpdateAppProcedure,
		svc.UpdateApp,
		connect.WithSchema(webServiceUpdateAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceCheckForSystemUpdatesHandler := connect.NewUnaryHandler(
		WebServiceCheckForSystemUpdatesProcedure,
		svc.CheckForSystemUpdates,
		connect.WithSchema(webServiceCheckForSystemUpdatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceCheckForContainerUpdatesHandler := connect.NewUnaryHandler(
		WebServiceCheckForContainerUpdatesProcedure,
		svc.CheckForContainerUpdates,
		connect.WithSchema(webServiceCheckForContainerUpdatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceChangeDaemonVersionHandler := connect.NewUnaryHandler(
		WebServiceChangeDaemonVersionProcedure,
		svc.ChangeDaemonVersion,
		connect.WithSchema(webServiceChangeDaemonVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceInstallOSUpdateHandler := connect.NewUnaryHandler(
		WebServiceInstallOSUpdateProcedure,
		svc.InstallOSUpdate,
		connect.WithSchema(webServiceInstallOSUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceSetSystemImageHandler := connect.NewUnaryHandler(
		WebServiceSetSystemImageProcedure,
		svc.SetSystemImage,
		connect.WithSchema(webServiceSetSystemImageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceAppsHealthCheckHandler := connect.NewUnaryHandler(
		WebServiceAppsHealthCheckProcedure,
		svc.AppsHealthCheck,
		connect.WithSchema(webServiceAppsHealthCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceGetSystemStatsHandler := connect.NewUnaryHandler(
		WebServiceGetSystemStatsProcedure,
		svc.GetSystemStats,
		connect.WithSchema(webServiceGetSystemStatsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceIsDeviceSetupHandler := connect.NewUnaryHandler(
		WebServiceIsDeviceSetupProcedure,
		svc.IsDeviceSetup,
		connect.WithSchema(webServiceIsDeviceSetupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceInitializeDeviceHandler := connect.NewUnaryHandler(
		WebServiceInitializeDeviceProcedure,
		svc.InitializeDevice,
		connect.WithSchema(webServiceInitializeDeviceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceLoginHandler := connect.NewUnaryHandler(
		WebServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(webServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceGetAppsInStoreHandler := connect.NewUnaryHandler(
		WebServiceGetAppsInStoreProcedure,
		svc.GetAppsInStore,
		connect.WithSchema(webServiceGetAppsInStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceGetDeviceSettingsHandler := connect.NewUnaryHandler(
		WebServiceGetDeviceSettingsProcedure,
		svc.GetDeviceSettings,
		connect.WithSchema(webServiceGetDeviceSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceSetDeviceSettingsHandler := connect.NewUnaryHandler(
		WebServiceSetDeviceSettingsProcedure,
		svc.SetDeviceSettings,
		connect.WithSchema(webServiceSetDeviceSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceGetAppStorageHandler := connect.NewUnaryHandler(
		WebServiceGetAppStorageProcedure,
		svc.GetAppStorage,
		connect.WithSchema(webServiceGetAppStorageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceEnableSecureTunnellingHandler := connect.NewUnaryHandler(
		WebServiceEnableSecureTunnellingProcedure,
		svc.EnableSecureTunnelling,
		connect.WithSchema(webServiceEnableSecureTunnellingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceDisableSecureTunnellingHandler := connect.NewUnaryHandler(
		WebServiceDisableSecureTunnellingProcedure,
		svc.DisableSecureTunnelling,
		connect.WithSchema(webServiceDisableSecureTunnellingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceRegisterToLocatorHandler := connect.NewUnaryHandler(
		WebServiceRegisterToLocatorProcedure,
		svc.RegisterToLocator,
		connect.WithSchema(webServiceRegisterToLocatorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceDeregisterFromLocatorHandler := connect.NewUnaryHandler(
		WebServiceDeregisterFromLocatorProcedure,
		svc.DeregisterFromLocator,
		connect.WithSchema(webServiceDeregisterFromLocatorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceRegisterPeerHandler := connect.NewUnaryHandler(
		WebServiceRegisterPeerProcedure,
		svc.RegisterPeer,
		connect.WithSchema(webServiceRegisterPeerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceGetComponentVersionsHandler := connect.NewUnaryHandler(
		WebServiceGetComponentVersionsProcedure,
		svc.GetComponentVersions,
		connect.WithSchema(webServiceGetComponentVersionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	webServiceSubscribeHandler := connect.NewServerStreamHandler(
		WebServiceSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(webServiceSubscribeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/platform.server.v1.WebService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WebServiceShutdownHostProcedure:
			webServiceShutdownHostHandler.ServeHTTP(w, r)
		case WebServiceRestartHostProcedure:
			webServiceRestartHostHandler.ServeHTTP(w, r)
		case WebServiceInstallAppProcedure:
			webServiceInstallAppHandler.ServeHTTP(w, r)
		case WebServiceDeleteAppProcedure:
			webServiceDeleteAppHandler.ServeHTTP(w, r)
		case WebServiceUpdateAppProcedure:
			webServiceUpdateAppHandler.ServeHTTP(w, r)
		case WebServiceCheckForSystemUpdatesProcedure:
			webServiceCheckForSystemUpdatesHandler.ServeHTTP(w, r)
		case WebServiceCheckForContainerUpdatesProcedure:
			webServiceCheckForContainerUpdatesHandler.ServeHTTP(w, r)
		case WebServiceChangeDaemonVersionProcedure:
			webServiceChangeDaemonVersionHandler.ServeHTTP(w, r)
		case WebServiceInstallOSUpdateProcedure:
			webServiceInstallOSUpdateHandler.ServeHTTP(w, r)
		case WebServiceSetSystemImageProcedure:
			webServiceSetSystemImageHandler.ServeHTTP(w, r)
		case WebServiceAppsHealthCheckProcedure:
			webServiceAppsHealthCheckHandler.ServeHTTP(w, r)
		case WebServiceGetSystemStatsProcedure:
			webServiceGetSystemStatsHandler.ServeHTTP(w, r)
		case WebServiceIsDeviceSetupProcedure:
			webServiceIsDeviceSetupHandler.ServeHTTP(w, r)
		case WebServiceInitializeDeviceProcedure:
			webServiceInitializeDeviceHandler.ServeHTTP(w, r)
		case WebServiceLoginProcedure:
			webServiceLoginHandler.ServeHTTP(w, r)
		case WebServiceGetAppsInStoreProcedure:
			webServiceGetAppsInStoreHandler.ServeHTTP(w, r)
		case WebServiceGetDeviceSettingsProcedure:
			webServiceGetDeviceSettingsHandler.ServeHTTP(w, r)
		case WebServiceSetDeviceSettingsProcedure:
			webServiceSetDeviceSettingsHandler.ServeHTTP(w, r)
		case WebServiceGetAppStorageProcedure:
			webServiceGetAppStorageHandler.ServeHTTP(w, r)
		case WebServiceEnableSecureTunnellingProcedure:
			webServiceEnableSecureTunnellingHandler.ServeHTTP(w, r)
		case WebServiceDisableSecureTunnellingProcedure:
			webServiceDisableSecureTunnellingHandler.ServeHTTP(w, r)
		case WebServiceRegisterToLocatorProcedure:
			webServiceRegisterToLocatorHandler.ServeHTTP(w, r)
		case WebServiceDeregisterFromLocatorProcedure:
			webServiceDeregisterFromLocatorHandler.ServeHTTP(w, r)
		case WebServiceRegisterPeerProcedure:
			webServiceRegisterPeerHandler.ServeHTTP(w, r)
		case WebServiceGetComponentVersionsProcedure:
			webServiceGetComponentVersionsHandler.ServeHTTP(w, r)
		case WebServiceSubscribeProcedure:
			webServiceSubscribeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWebServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWebServiceHandler struct{}

func (UnimplementedWebServiceHandler) ShutdownHost(context.Context, *connect.Request[v1.ShutdownHostRequest]) (*connect.Response[v1.ShutdownHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.ShutdownHost is not implemented"))
}

func (UnimplementedWebServiceHandler) RestartHost(context.Context, *connect.Request[v1.RestartHostRequest]) (*connect.Response[v1.RestartHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.RestartHost is not implemented"))
}

func (UnimplementedWebServiceHandler) InstallApp(context.Context, *connect.Request[v1.InstallAppRequest]) (*connect.Response[v1.InstallAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.InstallApp is not implemented"))
}

func (UnimplementedWebServiceHandler) DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.DeleteApp is not implemented"))
}

func (UnimplementedWebServiceHandler) UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.UpdateApp is not implemented"))
}

func (UnimplementedWebServiceHandler) CheckForSystemUpdates(context.Context, *connect.Request[v1.CheckForSystemUpdatesRequest]) (*connect.Response[v1.CheckForSystemUpdatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.CheckForSystemUpdates is not implemented"))
}

func (UnimplementedWebServiceHandler) CheckForContainerUpdates(context.Context, *connect.Request[v1.CheckForContainerUpdatesRequest]) (*connect.Response[v1.CheckForContainerUpdatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.CheckForContainerUpdates is not implemented"))
}

func (UnimplementedWebServiceHandler) ChangeDaemonVersion(context.Context, *connect.Request[v1.ChangeDaemonVersionRequest]) (*connect.Response[v1.ChangeDaemonVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.ChangeDaemonVersion is not implemented"))
}

func (UnimplementedWebServiceHandler) InstallOSUpdate(context.Context, *connect.Request[v1.InstallOSUpdateRequest]) (*connect.Response[v1.InstallOSUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.InstallOSUpdate is not implemented"))
}

func (UnimplementedWebServiceHandler) SetSystemImage(context.Context, *connect.Request[v1.SetSystemImageRequest]) (*connect.Response[v1.SetSystemImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.SetSystemImage is not implemented"))
}

func (UnimplementedWebServiceHandler) AppsHealthCheck(context.Context, *connect.Request[v1.AppsHealthCheckRequest]) (*connect.Response[v1.AppsHealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.AppsHealthCheck is not implemented"))
}

func (UnimplementedWebServiceHandler) GetSystemStats(context.Context, *connect.Request[v1.GetSystemStatsRequest]) (*connect.Response[v1.GetSystemStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.GetSystemStats is not implemented"))
}

func (UnimplementedWebServiceHandler) IsDeviceSetup(context.Context, *connect.Request[v1.IsDeviceSetupRequest]) (*connect.Response[v1.IsDeviceSetupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.IsDeviceSetup is not implemented"))
}

func (UnimplementedWebServiceHandler) InitializeDevice(context.Context, *connect.Request[v1.InitializeDeviceRequest]) (*connect.Response[v1.InitializeDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.InitializeDevice is not implemented"))
}

func (UnimplementedWebServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.Login is not implemented"))
}

func (UnimplementedWebServiceHandler) GetAppsInStore(context.Context, *connect.Request[v1.GetAppsInStoreRequest]) (*connect.Response[v1.GetAppsInStoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.GetAppsInStore is not implemented"))
}

func (UnimplementedWebServiceHandler) GetDeviceSettings(context.Context, *connect.Request[v1.GetDeviceSettingsRequest]) (*connect.Response[v1.GetDeviceSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.GetDeviceSettings is not implemented"))
}

func (UnimplementedWebServiceHandler) SetDeviceSettings(context.Context, *connect.Request[v1.SetDeviceSettingsRequest]) (*connect.Response[v1.SetDeviceSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.SetDeviceSettings is not implemented"))
}

func (UnimplementedWebServiceHandler) GetAppStorage(context.Context, *connect.Request[v1.GetAppStorageRequest]) (*connect.Response[v1.GetAppStorageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.GetAppStorage is not implemented"))
}

func (UnimplementedWebServiceHandler) EnableSecureTunnelling(context.Context, *connect.Request[v1.EnableSecureTunnellingRequest]) (*connect.Response[v1.EnableSecureTunnellingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.EnableSecureTunnelling is not implemented"))
}

func (UnimplementedWebServiceHandler) DisableSecureTunnelling(context.Context, *connect.Request[v1.DisableSecureTunnellingRequest]) (*connect.Response[v1.DisableSecureTunnellingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.DisableSecureTunnelling is not implemented"))
}

func (UnimplementedWebServiceHandler) RegisterToLocator(context.Context, *connect.Request[v1.RegisterToLocatorRequest]) (*connect.Response[v1.RegisterToLocatorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.RegisterToLocator is not implemented"))
}

func (UnimplementedWebServiceHandler) DeregisterFromLocator(context.Context, *connect.Request[v1.DeregisterFromLocatorRequest]) (*connect.Response[v1.DeregisterFromLocatorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.DeregisterFromLocator is not implemented"))
}

func (UnimplementedWebServiceHandler) RegisterPeer(context.Context, *connect.Request[v1.RegisterPeerRequest]) (*connect.Response[v1.RegisterPeerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.RegisterPeer is not implemented"))
}

func (UnimplementedWebServiceHandler) GetComponentVersions(context.Context, *connect.Request[v1.GetComponentVersionsRequest]) (*connect.Response[v1.GetComponentVersionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.GetComponentVersions is not implemented"))
}

func (UnimplementedWebServiceHandler) Subscribe(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.ServerEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("platform.server.v1.WebService.Subscribe is not implemented"))
}
