// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file platform/server/v1/internal.proto (package platform.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message platform.server.v1.AddMdnsHostRequest
 */
export class AddMdnsHostRequest extends Message<AddMdnsHostRequest> {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname = "";

  constructor(data?: PartialMessage<AddMdnsHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.AddMdnsHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMdnsHostRequest {
    return new AddMdnsHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMdnsHostRequest {
    return new AddMdnsHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMdnsHostRequest {
    return new AddMdnsHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddMdnsHostRequest | PlainMessage<AddMdnsHostRequest> | undefined, b: AddMdnsHostRequest | PlainMessage<AddMdnsHostRequest> | undefined): boolean {
    return proto3.util.equals(AddMdnsHostRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.AddMdnsHostResponse
 */
export class AddMdnsHostResponse extends Message<AddMdnsHostResponse> {
  constructor(data?: PartialMessage<AddMdnsHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.AddMdnsHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMdnsHostResponse {
    return new AddMdnsHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMdnsHostResponse {
    return new AddMdnsHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMdnsHostResponse {
    return new AddMdnsHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddMdnsHostResponse | PlainMessage<AddMdnsHostResponse> | undefined, b: AddMdnsHostResponse | PlainMessage<AddMdnsHostResponse> | undefined): boolean {
    return proto3.util.equals(AddMdnsHostResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RemoveMdnsHostRequest
 */
export class RemoveMdnsHostRequest extends Message<RemoveMdnsHostRequest> {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname = "";

  constructor(data?: PartialMessage<RemoveMdnsHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RemoveMdnsHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hostname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveMdnsHostRequest {
    return new RemoveMdnsHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveMdnsHostRequest {
    return new RemoveMdnsHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveMdnsHostRequest {
    return new RemoveMdnsHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveMdnsHostRequest | PlainMessage<RemoveMdnsHostRequest> | undefined, b: RemoveMdnsHostRequest | PlainMessage<RemoveMdnsHostRequest> | undefined): boolean {
    return proto3.util.equals(RemoveMdnsHostRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RemoveMdnsHostResponse
 */
export class RemoveMdnsHostResponse extends Message<RemoveMdnsHostResponse> {
  constructor(data?: PartialMessage<RemoveMdnsHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RemoveMdnsHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveMdnsHostResponse {
    return new RemoveMdnsHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveMdnsHostResponse {
    return new RemoveMdnsHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveMdnsHostResponse {
    return new RemoveMdnsHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveMdnsHostResponse | PlainMessage<RemoveMdnsHostResponse> | undefined, b: RemoveMdnsHostResponse | PlainMessage<RemoveMdnsHostResponse> | undefined): boolean {
    return proto3.util.equals(RemoveMdnsHostResponse, a, b);
  }
}

