syntax = "proto3";

package platform.server.v1;

option go_package = "github.com/home-cloud-io/core/api/platform/server/v1";

import "tagger/tagger.proto";
import "platform/daemon/v1/system.proto";

service WebService {
  // Shutdown the host machine running Home Cloud
  rpc ShutdownHost(ShutdownHostRequest) returns (ShutdownHostResponse) {}
  // Restart the host machine running Home Cloud
  rpc RestartHost(RestartHostRequest) returns (RestartHostResponse) {}
  // Install a Home Cloud application
  rpc InstallApp(InstallAppRequest) returns (InstallAppResponse) {}
  // Delete a Home Cloud application
  rpc DeleteApp(DeleteAppRequest) returns (DeleteAppResponse) {}
  // Update a Home Cloud application
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse) {}
  // Check for available NixOS and Daemon updates
  rpc CheckForSystemUpdates(CheckForSystemUpdatesRequest) returns (CheckForSystemUpdatesResponse) {}
  // Check for available system (draft and home cloud) container updates
  rpc CheckForContainerUpdates(CheckForContainerUpdatesRequest) returns (CheckForContainerUpdatesResponse) {}
  // Change the currently installed Daemon version
  rpc ChangeDaemonVersion(ChangeDaemonVersionRequest) returns (ChangeDaemonVersionResponse) {}
  // Install available NixOS updates (call after calling CheckForSystemUpdates)
  rpc InstallOSUpdate(InstallOSUpdateRequest) returns (InstallOSUpdateResponse) {}
  // Set a system (draft and home cloud) container image (used for updating images)
  rpc SetSystemImage(SetSystemImageRequest) returns (SetSystemImageResponse) {}
  // Check the current health of all installed Home Cloud applications
  rpc AppsHealthCheck(AppsHealthCheckRequest) returns (AppsHealthCheckResponse) {}
  // Get the current host machine stats (cpu, memory, drives)
  rpc GetSystemStats(GetSystemStatsRequest) returns (GetSystemStatsResponse) {}
  // Check to validate if the device has gone through the onboarding process
  rpc IsDeviceSetup(IsDeviceSetupRequest) returns (IsDeviceSetupResponse) {}
  // Initialize the device with the user's credentials and settings
  rpc InitializeDevice(InitializeDeviceRequest) returns (InitializeDeviceResponse) {}
  // Login to the device
  rpc Login(LoginRequest) returns (LoginResponse) {}
  // Get all apps available in the store
  rpc GetAppsInStore(GetAppsInStoreRequest) returns (GetAppsInStoreResponse) {}
  // Get the device settings
  rpc GetDeviceSettings(GetDeviceSettingsRequest) returns (GetDeviceSettingsResponse) {}
}

message ShutdownHostRequest {}

message ShutdownHostResponse {}

message RestartHostRequest {}

message RestartHostResponse {}

message InstallAppRequest {
  string chart = 1;
  string repo = 2;
  string release = 3;
  string values = 4;
  string version = 5;
}

message InstallAppResponse {}

message DeleteAppRequest {
  string release = 1;
}

message DeleteAppResponse {}

message UpdateAppRequest {
  string chart = 1;
  string repo = 2;
  string release = 3;
  string values = 4;
  string version = 5;
}

message UpdateAppResponse {}

message CheckForSystemUpdatesRequest {}

message CheckForSystemUpdatesResponse {
  DaemonVersions daemon_versions = 1;
  // os_diff is the result of the `nvd diff` command
  string os_diff = 2;
}

message DaemonVersions {
  string current = 1;
  string latest = 2;
}

message CheckForContainerUpdatesRequest {}

message CheckForContainerUpdatesResponse {
  repeated ImageVersion image_versions = 1;
}

message ImageVersion {
  string image = 1;
  string current = 2;
  string latest = 3;
}

message ChangeDaemonVersionRequest {
  string version = 1;
  string vendor_hash = 2;
  string src_hash = 3;
}

message ChangeDaemonVersionResponse {}

message InstallOSUpdateRequest {}

message InstallOSUpdateResponse {}

message SetSystemImageRequest {
  string current_image = 1;
  string requested_image = 2;
}

message SetSystemImageResponse {}

message AppsHealthCheckRequest {}

message AppsHealthCheckResponse {
  repeated AppHealth checks = 1;
}

message AppHealth {
  string name = 1;
  AppStatus status = 2;
}

enum AppStatus {
  APP_STATUS_UNSPECIFIED = 0;
  APP_STATUS_HEALTHY = 1;
  APP_STATUS_UNHEALTHY = 2;
}

message GetSystemStatsRequest {}

message GetSystemStatsResponse {
  platform.daemon.v1.SystemStats stats = 1;
}

message IsDeviceSetupRequest {}
message IsDeviceSetupResponse {
  // If false the device is not setup, and the user should be redirected into the onboarding flow
  bool setup = 1;
}

message InitializeDeviceRequest {
  string username = 1;
  string password = 2;
  string timezone = 3;
  bool auto_update_apps = 4;
  bool auto_update_os = 5;
  repeated string default_apps = 6;
}

message InitializeDeviceResponse {
  bool setup = 1;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
}

message GetAppsInStoreRequest {}
message GetAppsInStoreResponse {
  repeated App apps = 1;
}

message GetDeviceSettingsRequest {}
message GetDeviceSettingsResponse {
  DeviceSettings settings = 1;
}

//////////////////////////////////////////////////////////////////////////
// MODELS
// All the structs used in the service and that are stored in the database
//////////////////////////////////////////////////////////////////////////

message Apps {
  repeated App apps = 1;
}

// Model used for the store and installed apps
// NOTE: that this must match the shape of the `entries` from a Helm repo
// index: e.g. https://apps.home-cloud.io/index.yaml
message App {
  string name = 1;
  string version = 2;
  string app_version = 3;
  string description = 4;
  string icon = 5;
  string created = 6;
  string digest = 7;
  string type = 8;
  repeated string urls = 9;
  repeated AppDependency dependencies = 10;
}

message AppDependency {
  string name = 1;
  string version = 2;
  string repository = 3;
}

message AppRunningStatus {
  string name = 1;
  string version = 2;
  AppStatus status = 3;
}

message Entries {
  repeated App apps = 1;
}

// Aggregate model for the installed apps saved in blueprint
message InstalledApp {
  App application = 1;
  AppRunningStatus status = 2;
}

// Model to cache the apps available in the store: https://apps.home-cloud.io/index.yaml
// A backround thread in the server will fetch the index and update the
// cache at startup and then every 24 hours
message AppStoreEntries {
  string api_version = 1;
  string generated = 2;
  map<string, Apps> entries = 3;
}

// User settings for the device

message DeviceSettings {
  User admin_user = 1;
  string timezone = 2;
  bool auto_update_apps = 3;
  bool auto_update_os = 4;
}

message DiskStats {
  int64 total = 1;
  int64 used = 2;
  int64 free = 3;
}

message User {
  string username = 1;
  string password = 2;
}