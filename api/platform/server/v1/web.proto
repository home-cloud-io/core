syntax = "proto3";

package platform.server.v1;

option go_package = "github.com/home-cloud-io/core/api/platform/server/v1";

import "validate/validate.proto";
import "platform/daemon/v1/system.proto";
import "platform/daemon/v1/wireguard.proto";

service WebService {
  // Shutdown the host machine running Home Cloud
  rpc ShutdownHost(ShutdownHostRequest) returns (ShutdownHostResponse) {}
  // Restart the host machine running Home Cloud
  rpc RestartHost(RestartHostRequest) returns (RestartHostResponse) {}
  // Install a Home Cloud application
  rpc InstallApp(InstallAppRequest) returns (InstallAppResponse) {}
  // Delete a Home Cloud application
  rpc DeleteApp(DeleteAppRequest) returns (DeleteAppResponse) {}
  // Update a Home Cloud application
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse) {}
  // Check for available NixOS and Daemon updates
  rpc CheckForSystemUpdates(CheckForSystemUpdatesRequest) returns (CheckForSystemUpdatesResponse) {}
  // Check for available system (draft and home cloud) container updates
  rpc CheckForContainerUpdates(CheckForContainerUpdatesRequest) returns (CheckForContainerUpdatesResponse) {}
  // Change the currently installed Daemon version
  rpc ChangeDaemonVersion(ChangeDaemonVersionRequest) returns (ChangeDaemonVersionResponse) {}
  // Install available NixOS updates (call after calling CheckForSystemUpdates)
  rpc InstallOSUpdate(InstallOSUpdateRequest) returns (InstallOSUpdateResponse) {}
  // Set a system (draft and home cloud) container image (used for updating images)
  rpc SetSystemImage(SetSystemImageRequest) returns (SetSystemImageResponse) {}
  // Check the current health of all installed Home Cloud applications
  rpc AppsHealthCheck(AppsHealthCheckRequest) returns (AppsHealthCheckResponse) {}
  // Get the current host machine stats (cpu, memory, drives)
  rpc GetSystemStats(GetSystemStatsRequest) returns (GetSystemStatsResponse) {}
  // Check to validate if the device has gone through the onboarding process
  rpc IsDeviceSetup(IsDeviceSetupRequest) returns (IsDeviceSetupResponse) {}
  // Initialize the device with the user's credentials and settings
  rpc InitializeDevice(InitializeDeviceRequest) returns (InitializeDeviceResponse) {}
  // Login to the device
  rpc Login(LoginRequest) returns (LoginResponse) {}
  // Get all apps available in the store
  rpc GetAppsInStore(GetAppsInStoreRequest) returns (GetAppsInStoreResponse) {}
  // Get the device settings
  rpc GetDeviceSettings(GetDeviceSettingsRequest) returns (GetDeviceSettingsResponse) {}
  // Set the device settings
  rpc SetDeviceSettings(SetDeviceSettingsRequest) returns (SetDeviceSettingsResponse) {}
  // Get all installed app storage volumes
  rpc GetAppStorage(GetAppStorageRequest) returns (GetAppStorageResponse) {}
  // Enables the remote access feature
  rpc EnableSecureTunnelling(EnableSecureTunnellingRequest) returns (EnableSecureTunnellingResponse) {}
  // Disables the remote access feature
  rpc DisableSecureTunnelling(DisableSecureTunnellingRequest) returns (DisableSecureTunnellingResponse) {}
  // Register the server with the given Locator service
  rpc RegisterToLocator(RegisterToLocatorRequest) returns (RegisterToLocatorResponse) {}
  // Deregister the server from the given Locator service
  rpc DeregisterFromLocator(DeregisterFromLocatorRequest) returns (DeregisterFromLocatorResponse) {}
  // RegisterPeer is used to connect a client to the home-cloud overlay network
  rpc RegisterPeer(RegisterPeerRequest) returns (RegisterPeerResponse) {}
  // GetComponentVersions returns the versions of all system components (daemon, server, etc.)
  rpc GetComponentVersions(GetComponentVersionsRequest) returns (GetComponentVersionsResponse) {}

  // Subscribe to the server for events
  rpc Subscribe(SubscribeRequest) returns (stream ServerEvent) {}
}

message ShutdownHostRequest {}

message ShutdownHostResponse {}

message RestartHostRequest {}

message RestartHostResponse {}

message InstallAppRequest {
  string chart = 1;
  string repo = 2;
  string release = 3;
  string values = 4;
  string version = 5;
}

message InstallAppResponse {}

message DeleteAppRequest {
  string release = 1;
}

message DeleteAppResponse {}

message UpdateAppRequest {
  string chart = 1;
  string repo = 2;
  string release = 3;
  string values = 4;
  string version = 5;
}

message UpdateAppResponse {}

message CheckForSystemUpdatesRequest {}

message CheckForSystemUpdatesResponse {
  DaemonVersions daemon_versions = 1;
  // os_diff is the result of the `nvd diff` command
  string os_diff = 2;
}

message DaemonVersions {
  DaemonVersion current = 1;
  DaemonVersion latest = 2;
}

message DaemonVersion {
  string version = 1;
  string vendor_hash = 2;
  string src_hash = 3;
}

message CheckForContainerUpdatesRequest {}

message CheckForContainerUpdatesResponse {
  repeated ImageVersion image_versions = 1;
}

message ImageVersion {
  string image = 1;
  string current = 2;
  string latest = 3;
}

message ChangeDaemonVersionRequest {
  string version = 1;
  string vendor_hash = 2;
  string src_hash = 3;
}

message ChangeDaemonVersionResponse {}

message InstallOSUpdateRequest {}

message InstallOSUpdateResponse {}

message SetSystemImageRequest {
  string current_image = 1;
  string requested_image = 2;
}

message SetSystemImageResponse {}

message AppsHealthCheckRequest {}

message AppsHealthCheckResponse {
  repeated AppHealth checks = 1;
}

message AppHealth {
  string name = 1;
  AppStatus status = 2;
  AppDisplay display = 3;
}

enum AppStatus {
  APP_STATUS_UNSPECIFIED = 0;
  APP_STATUS_HEALTHY = 1;
  APP_STATUS_UNHEALTHY = 2;
}

message AppDisplay {
  string name = 1;
  string icon_url = 2;
  string description = 3;
}

message GetSystemStatsRequest {}

message GetSystemStatsResponse {
  platform.daemon.v1.SystemStats stats = 1;
}

message IsDeviceSetupRequest {}
message IsDeviceSetupResponse {
  // If false the device is not setup, and the user should be redirected into the onboarding flow
  bool setup = 1;
}

message InitializeDeviceRequest {
  string username = 1 [(validate.rules).string.min_len = 4];
  string password = 2 [(validate.rules).string.min_len = 4];
  // validate timezone is at least not empty
  string timezone = 3 [(validate.rules).string.min_len = 7];
  bool auto_update_apps = 4;
  bool auto_update_os = 5;
}

message InitializeDeviceResponse {
  bool setup = 1;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
}

message GetAppsInStoreRequest {}
message GetAppsInStoreResponse {
  repeated App apps = 1;
}

message GetDeviceSettingsRequest {}
message GetDeviceSettingsResponse {
  DeviceSettings settings = 1;
}

message SetDeviceSettingsRequest {
  DeviceSettings settings = 1;
}
message SetDeviceSettingsResponse {}

message GetAppStorageRequest {}
message GetAppStorageResponse {
  repeated AppStorage apps = 1;
}
message AppStorage {
  string app_name = 1;
  repeated string volumes = 2;
}

message EnableSecureTunnellingRequest {}
message EnableSecureTunnellingResponse {}

message DisableSecureTunnellingRequest {}
message DisableSecureTunnellingResponse {}

message RegisterToLocatorRequest {
  string locator_address = 1;
  // TODO: eventually this is where the access key will be included that the user receives after purchasing the locator subscription
}
message RegisterToLocatorResponse {
  platform.daemon.v1.Locator locator = 1;
}

message DeregisterFromLocatorRequest {
  string locator_address = 1;
}
message DeregisterFromLocatorResponse {
  string locator_address = 1;
}

message GetComponentVersionsRequest {
}

message GetComponentVersionsResponse {
  repeated platform.daemon.v1.ComponentVersion platform = 1;
  repeated platform.daemon.v1.ComponentVersion system = 2;
}

//////////////////////////////////////////////////////////////////////////
// MODELS
// All the structs used in the service and that are stored in the database
//////////////////////////////////////////////////////////////////////////

message Apps {
  repeated App apps = 1;
}

// Model used for the store and installed apps
// NOTE: that this must match the shape of the `entries` from a Helm repo
// index: e.g. https://apps.home-cloud.io/index.yaml
message App {
  string name = 1;
  string version = 2;
  string app_version = 3;
  string description = 4;
  string icon = 5;
  string created = 6;
  string digest = 7;
  string type = 8;
  repeated string urls = 9;
  repeated AppDependency dependencies = 10;
  string home = 11;
  repeated string sources = 12;
  map<string, string> annotations = 13;
  // readme is not from the index but is added by the server from
  // the README.md of the chart.
  string readme = 14;
  // installed denotes whether or not the app is installed on the server
  bool installed = 15;
}

message AppDependency {
  string name = 1;
  string version = 2;
  string repository = 3;
}

message AppRunningStatus {
  string name = 1;
  string version = 2;
  AppStatus status = 3;
}

message Entries {
  repeated App apps = 1;
}

// Aggregate model for the installed apps saved in blueprint
message InstalledApp {
  App application = 1;
  AppRunningStatus status = 2;
}

// Model to cache the apps available in the store: https://apps.home-cloud.io/index.yaml
// A backround thread in the server will fetch the index and update the
// cache at startup and then every 24 hours
message AppStoreEntries {
  string api_version = 1;
  string generated = 2;
  map<string, Apps> entries = 3;
}

// User settings for the device
message DeviceSettings {
  User admin_user = 1 [(validate.rules).message.required = true];
  string timezone = 2 [(validate.rules).string.min_len = 7];
  bool auto_update_apps = 3;
  bool auto_update_os = 4;
  bool enable_ssh = 5;
  repeated string trusted_ssh_keys = 6;
  LocatorSettings locator_settings = 7;
}

message LocatorSettings {
  bool enabled = 1;
  repeated platform.daemon.v1.Locator locators = 2;
  string stun_server_address = 3;
}

message User {
  string username = 1;
  string password = 2;
}

// Subscription events

message SubscribeRequest {}

message ServerEvent {
  oneof event {
    HeartbeatEvent heartbeat = 1;
    ErrorEvent error = 2;
    AppInstalledEvent app_installed = 3;
  }
}

message HeartbeatEvent {}

message ErrorEvent {
  string error = 1;
}

message AppInstalledEvent {
  string name = 1;
}

message RegisterPeerRequest {}
message RegisterPeerResponse{
  // client config
  string private_key = 1;
  string public_key = 2;
  repeated string addresses = 3;
  repeated string dns_servers = 4;

  // server config
  string server_public_key = 5;
  string server_id = 6;
  string locator_url = 7;
}

// Model to store config in key/val store
message PeerConfiguration {
  string id = 1;
  string public_key = 2;
  string private_key = 3;
  ClientRegistrationDetails client_details = 4;
}

message ClientRegistrationDetails {
  string server_address = 1;
  string locator_address = 2;
}
