// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file platform/server/v1/web.proto (package platform.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message platform.server.v1.ShutdownHostRequest
 */
export class ShutdownHostRequest extends Message<ShutdownHostRequest> {
  constructor(data?: PartialMessage<ShutdownHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ShutdownHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownHostRequest | PlainMessage<ShutdownHostRequest> | undefined, b: ShutdownHostRequest | PlainMessage<ShutdownHostRequest> | undefined): boolean {
    return proto3.util.equals(ShutdownHostRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ShutdownHostResponse
 */
export class ShutdownHostResponse extends Message<ShutdownHostResponse> {
  constructor(data?: PartialMessage<ShutdownHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ShutdownHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownHostResponse | PlainMessage<ShutdownHostResponse> | undefined, b: ShutdownHostResponse | PlainMessage<ShutdownHostResponse> | undefined): boolean {
    return proto3.util.equals(ShutdownHostResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RestartHostRequest
 */
export class RestartHostRequest extends Message<RestartHostRequest> {
  constructor(data?: PartialMessage<RestartHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RestartHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartHostRequest {
    return new RestartHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartHostRequest {
    return new RestartHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartHostRequest {
    return new RestartHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RestartHostRequest | PlainMessage<RestartHostRequest> | undefined, b: RestartHostRequest | PlainMessage<RestartHostRequest> | undefined): boolean {
    return proto3.util.equals(RestartHostRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RestartHostResponse
 */
export class RestartHostResponse extends Message<RestartHostResponse> {
  constructor(data?: PartialMessage<RestartHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RestartHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartHostResponse {
    return new RestartHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartHostResponse {
    return new RestartHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartHostResponse {
    return new RestartHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RestartHostResponse | PlainMessage<RestartHostResponse> | undefined, b: RestartHostResponse | PlainMessage<RestartHostResponse> | undefined): boolean {
    return proto3.util.equals(RestartHostResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InstallAppRequest
 */
export class InstallAppRequest extends Message<InstallAppRequest> {
  /**
   * @generated from field: string chart = 1;
   */
  chart = "";

  /**
   * @generated from field: string repo = 2;
   */
  repo = "";

  /**
   * @generated from field: string release = 3;
   */
  release = "";

  /**
   * @generated from field: string values = 4;
   */
  values = "";

  constructor(data?: PartialMessage<InstallAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InstallAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chart", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "release", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallAppRequest {
    return new InstallAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallAppRequest {
    return new InstallAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallAppRequest {
    return new InstallAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InstallAppRequest | PlainMessage<InstallAppRequest> | undefined, b: InstallAppRequest | PlainMessage<InstallAppRequest> | undefined): boolean {
    return proto3.util.equals(InstallAppRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InstallAppResponse
 */
export class InstallAppResponse extends Message<InstallAppResponse> {
  constructor(data?: PartialMessage<InstallAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InstallAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallAppResponse {
    return new InstallAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallAppResponse {
    return new InstallAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallAppResponse {
    return new InstallAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InstallAppResponse | PlainMessage<InstallAppResponse> | undefined, b: InstallAppResponse | PlainMessage<InstallAppResponse> | undefined): boolean {
    return proto3.util.equals(InstallAppResponse, a, b);
  }
}

