// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file platform/server/v1/web.proto (package platform.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ComponentVersion, Log, SystemStats } from "../../daemon/v1/system_pb.js";
import { Locator } from "../../daemon/v1/wireguard_pb.js";

/**
 * @generated from enum platform.server.v1.AppStatus
 */
export enum AppStatus {
  /**
   * @generated from enum value: APP_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: APP_STATUS_HEALTHY = 1;
   */
  HEALTHY = 1,

  /**
   * @generated from enum value: APP_STATUS_UNHEALTHY = 2;
   */
  UNHEALTHY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AppStatus)
proto3.util.setEnumType(AppStatus, "platform.server.v1.AppStatus", [
  { no: 0, name: "APP_STATUS_UNSPECIFIED" },
  { no: 1, name: "APP_STATUS_HEALTHY" },
  { no: 2, name: "APP_STATUS_UNHEALTHY" },
]);

/**
 * @generated from message platform.server.v1.ShutdownHostRequest
 */
export class ShutdownHostRequest extends Message<ShutdownHostRequest> {
  constructor(data?: PartialMessage<ShutdownHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ShutdownHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownHostRequest | PlainMessage<ShutdownHostRequest> | undefined, b: ShutdownHostRequest | PlainMessage<ShutdownHostRequest> | undefined): boolean {
    return proto3.util.equals(ShutdownHostRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ShutdownHostResponse
 */
export class ShutdownHostResponse extends Message<ShutdownHostResponse> {
  constructor(data?: PartialMessage<ShutdownHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ShutdownHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownHostResponse | PlainMessage<ShutdownHostResponse> | undefined, b: ShutdownHostResponse | PlainMessage<ShutdownHostResponse> | undefined): boolean {
    return proto3.util.equals(ShutdownHostResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RestartHostRequest
 */
export class RestartHostRequest extends Message<RestartHostRequest> {
  constructor(data?: PartialMessage<RestartHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RestartHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartHostRequest {
    return new RestartHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartHostRequest {
    return new RestartHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartHostRequest {
    return new RestartHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RestartHostRequest | PlainMessage<RestartHostRequest> | undefined, b: RestartHostRequest | PlainMessage<RestartHostRequest> | undefined): boolean {
    return proto3.util.equals(RestartHostRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RestartHostResponse
 */
export class RestartHostResponse extends Message<RestartHostResponse> {
  constructor(data?: PartialMessage<RestartHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RestartHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartHostResponse {
    return new RestartHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartHostResponse {
    return new RestartHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartHostResponse {
    return new RestartHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RestartHostResponse | PlainMessage<RestartHostResponse> | undefined, b: RestartHostResponse | PlainMessage<RestartHostResponse> | undefined): boolean {
    return proto3.util.equals(RestartHostResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InstallAppRequest
 */
export class InstallAppRequest extends Message<InstallAppRequest> {
  /**
   * @generated from field: string chart = 1;
   */
  chart = "";

  /**
   * @generated from field: string repo = 2;
   */
  repo = "";

  /**
   * @generated from field: string release = 3;
   */
  release = "";

  /**
   * @generated from field: string values = 4;
   */
  values = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  constructor(data?: PartialMessage<InstallAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InstallAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chart", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "release", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallAppRequest {
    return new InstallAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallAppRequest {
    return new InstallAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallAppRequest {
    return new InstallAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InstallAppRequest | PlainMessage<InstallAppRequest> | undefined, b: InstallAppRequest | PlainMessage<InstallAppRequest> | undefined): boolean {
    return proto3.util.equals(InstallAppRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InstallAppResponse
 */
export class InstallAppResponse extends Message<InstallAppResponse> {
  constructor(data?: PartialMessage<InstallAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InstallAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallAppResponse {
    return new InstallAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallAppResponse {
    return new InstallAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallAppResponse {
    return new InstallAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InstallAppResponse | PlainMessage<InstallAppResponse> | undefined, b: InstallAppResponse | PlainMessage<InstallAppResponse> | undefined): boolean {
    return proto3.util.equals(InstallAppResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.DeleteAppRequest
 */
export class DeleteAppRequest extends Message<DeleteAppRequest> {
  /**
   * @generated from field: string release = 1;
   */
  release = "";

  constructor(data?: PartialMessage<DeleteAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DeleteAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "release", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined, b: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAppRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.DeleteAppResponse
 */
export class DeleteAppResponse extends Message<DeleteAppResponse> {
  constructor(data?: PartialMessage<DeleteAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DeleteAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined, b: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAppResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.UpdateAppRequest
 */
export class UpdateAppRequest extends Message<UpdateAppRequest> {
  /**
   * @generated from field: string chart = 1;
   */
  chart = "";

  /**
   * @generated from field: string repo = 2;
   */
  repo = "";

  /**
   * @generated from field: string release = 3;
   */
  release = "";

  /**
   * @generated from field: string values = 4;
   */
  values = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  constructor(data?: PartialMessage<UpdateAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.UpdateAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chart", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "release", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined, b: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAppRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.UpdateAppResponse
 */
export class UpdateAppResponse extends Message<UpdateAppResponse> {
  constructor(data?: PartialMessage<UpdateAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.UpdateAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined, b: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAppResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.CheckForSystemUpdatesRequest
 */
export class CheckForSystemUpdatesRequest extends Message<CheckForSystemUpdatesRequest> {
  constructor(data?: PartialMessage<CheckForSystemUpdatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.CheckForSystemUpdatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckForSystemUpdatesRequest {
    return new CheckForSystemUpdatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckForSystemUpdatesRequest {
    return new CheckForSystemUpdatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckForSystemUpdatesRequest {
    return new CheckForSystemUpdatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckForSystemUpdatesRequest | PlainMessage<CheckForSystemUpdatesRequest> | undefined, b: CheckForSystemUpdatesRequest | PlainMessage<CheckForSystemUpdatesRequest> | undefined): boolean {
    return proto3.util.equals(CheckForSystemUpdatesRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.CheckForSystemUpdatesResponse
 */
export class CheckForSystemUpdatesResponse extends Message<CheckForSystemUpdatesResponse> {
  /**
   * @generated from field: platform.server.v1.DaemonVersions daemon_versions = 1;
   */
  daemonVersions?: DaemonVersions;

  /**
   * os_diff is the result of the `nvd diff` command
   *
   * @generated from field: string os_diff = 2;
   */
  osDiff = "";

  constructor(data?: PartialMessage<CheckForSystemUpdatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.CheckForSystemUpdatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "daemon_versions", kind: "message", T: DaemonVersions },
    { no: 2, name: "os_diff", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckForSystemUpdatesResponse {
    return new CheckForSystemUpdatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckForSystemUpdatesResponse {
    return new CheckForSystemUpdatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckForSystemUpdatesResponse {
    return new CheckForSystemUpdatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckForSystemUpdatesResponse | PlainMessage<CheckForSystemUpdatesResponse> | undefined, b: CheckForSystemUpdatesResponse | PlainMessage<CheckForSystemUpdatesResponse> | undefined): boolean {
    return proto3.util.equals(CheckForSystemUpdatesResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.DaemonVersions
 */
export class DaemonVersions extends Message<DaemonVersions> {
  /**
   * @generated from field: platform.server.v1.DaemonVersion current = 1;
   */
  current?: DaemonVersion;

  /**
   * @generated from field: platform.server.v1.DaemonVersion latest = 2;
   */
  latest?: DaemonVersion;

  constructor(data?: PartialMessage<DaemonVersions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DaemonVersions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current", kind: "message", T: DaemonVersion },
    { no: 2, name: "latest", kind: "message", T: DaemonVersion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaemonVersions {
    return new DaemonVersions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaemonVersions {
    return new DaemonVersions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaemonVersions {
    return new DaemonVersions().fromJsonString(jsonString, options);
  }

  static equals(a: DaemonVersions | PlainMessage<DaemonVersions> | undefined, b: DaemonVersions | PlainMessage<DaemonVersions> | undefined): boolean {
    return proto3.util.equals(DaemonVersions, a, b);
  }
}

/**
 * @generated from message platform.server.v1.DaemonVersion
 */
export class DaemonVersion extends Message<DaemonVersion> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string vendor_hash = 2;
   */
  vendorHash = "";

  /**
   * @generated from field: string src_hash = 3;
   */
  srcHash = "";

  constructor(data?: PartialMessage<DaemonVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DaemonVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vendor_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "src_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaemonVersion {
    return new DaemonVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaemonVersion {
    return new DaemonVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaemonVersion {
    return new DaemonVersion().fromJsonString(jsonString, options);
  }

  static equals(a: DaemonVersion | PlainMessage<DaemonVersion> | undefined, b: DaemonVersion | PlainMessage<DaemonVersion> | undefined): boolean {
    return proto3.util.equals(DaemonVersion, a, b);
  }
}

/**
 * @generated from message platform.server.v1.CheckForContainerUpdatesRequest
 */
export class CheckForContainerUpdatesRequest extends Message<CheckForContainerUpdatesRequest> {
  constructor(data?: PartialMessage<CheckForContainerUpdatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.CheckForContainerUpdatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckForContainerUpdatesRequest {
    return new CheckForContainerUpdatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckForContainerUpdatesRequest {
    return new CheckForContainerUpdatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckForContainerUpdatesRequest {
    return new CheckForContainerUpdatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckForContainerUpdatesRequest | PlainMessage<CheckForContainerUpdatesRequest> | undefined, b: CheckForContainerUpdatesRequest | PlainMessage<CheckForContainerUpdatesRequest> | undefined): boolean {
    return proto3.util.equals(CheckForContainerUpdatesRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.CheckForContainerUpdatesResponse
 */
export class CheckForContainerUpdatesResponse extends Message<CheckForContainerUpdatesResponse> {
  /**
   * @generated from field: repeated platform.server.v1.ImageVersion image_versions = 1;
   */
  imageVersions: ImageVersion[] = [];

  constructor(data?: PartialMessage<CheckForContainerUpdatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.CheckForContainerUpdatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image_versions", kind: "message", T: ImageVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckForContainerUpdatesResponse {
    return new CheckForContainerUpdatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckForContainerUpdatesResponse {
    return new CheckForContainerUpdatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckForContainerUpdatesResponse {
    return new CheckForContainerUpdatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckForContainerUpdatesResponse | PlainMessage<CheckForContainerUpdatesResponse> | undefined, b: CheckForContainerUpdatesResponse | PlainMessage<CheckForContainerUpdatesResponse> | undefined): boolean {
    return proto3.util.equals(CheckForContainerUpdatesResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ImageVersion
 */
export class ImageVersion extends Message<ImageVersion> {
  /**
   * @generated from field: string image = 1;
   */
  image = "";

  /**
   * @generated from field: string current = 2;
   */
  current = "";

  /**
   * @generated from field: string latest = 3;
   */
  latest = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  constructor(data?: PartialMessage<ImageVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ImageVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "latest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImageVersion {
    return new ImageVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImageVersion {
    return new ImageVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImageVersion {
    return new ImageVersion().fromJsonString(jsonString, options);
  }

  static equals(a: ImageVersion | PlainMessage<ImageVersion> | undefined, b: ImageVersion | PlainMessage<ImageVersion> | undefined): boolean {
    return proto3.util.equals(ImageVersion, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ChangeDaemonVersionRequest
 */
export class ChangeDaemonVersionRequest extends Message<ChangeDaemonVersionRequest> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string vendor_hash = 2;
   */
  vendorHash = "";

  /**
   * @generated from field: string src_hash = 3;
   */
  srcHash = "";

  constructor(data?: PartialMessage<ChangeDaemonVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ChangeDaemonVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vendor_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "src_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeDaemonVersionRequest {
    return new ChangeDaemonVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeDaemonVersionRequest {
    return new ChangeDaemonVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeDaemonVersionRequest {
    return new ChangeDaemonVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeDaemonVersionRequest | PlainMessage<ChangeDaemonVersionRequest> | undefined, b: ChangeDaemonVersionRequest | PlainMessage<ChangeDaemonVersionRequest> | undefined): boolean {
    return proto3.util.equals(ChangeDaemonVersionRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ChangeDaemonVersionResponse
 */
export class ChangeDaemonVersionResponse extends Message<ChangeDaemonVersionResponse> {
  constructor(data?: PartialMessage<ChangeDaemonVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ChangeDaemonVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeDaemonVersionResponse {
    return new ChangeDaemonVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeDaemonVersionResponse {
    return new ChangeDaemonVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeDaemonVersionResponse {
    return new ChangeDaemonVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeDaemonVersionResponse | PlainMessage<ChangeDaemonVersionResponse> | undefined, b: ChangeDaemonVersionResponse | PlainMessage<ChangeDaemonVersionResponse> | undefined): boolean {
    return proto3.util.equals(ChangeDaemonVersionResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InstallOSUpdateRequest
 */
export class InstallOSUpdateRequest extends Message<InstallOSUpdateRequest> {
  constructor(data?: PartialMessage<InstallOSUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InstallOSUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallOSUpdateRequest {
    return new InstallOSUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallOSUpdateRequest {
    return new InstallOSUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallOSUpdateRequest {
    return new InstallOSUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InstallOSUpdateRequest | PlainMessage<InstallOSUpdateRequest> | undefined, b: InstallOSUpdateRequest | PlainMessage<InstallOSUpdateRequest> | undefined): boolean {
    return proto3.util.equals(InstallOSUpdateRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InstallOSUpdateResponse
 */
export class InstallOSUpdateResponse extends Message<InstallOSUpdateResponse> {
  constructor(data?: PartialMessage<InstallOSUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InstallOSUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallOSUpdateResponse {
    return new InstallOSUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallOSUpdateResponse {
    return new InstallOSUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallOSUpdateResponse {
    return new InstallOSUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InstallOSUpdateResponse | PlainMessage<InstallOSUpdateResponse> | undefined, b: InstallOSUpdateResponse | PlainMessage<InstallOSUpdateResponse> | undefined): boolean {
    return proto3.util.equals(InstallOSUpdateResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.SetSystemImageRequest
 */
export class SetSystemImageRequest extends Message<SetSystemImageRequest> {
  /**
   * @generated from field: string current_image = 1;
   */
  currentImage = "";

  /**
   * @generated from field: string requested_image = 2;
   */
  requestedImage = "";

  constructor(data?: PartialMessage<SetSystemImageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.SetSystemImageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "requested_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSystemImageRequest {
    return new SetSystemImageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSystemImageRequest {
    return new SetSystemImageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSystemImageRequest {
    return new SetSystemImageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetSystemImageRequest | PlainMessage<SetSystemImageRequest> | undefined, b: SetSystemImageRequest | PlainMessage<SetSystemImageRequest> | undefined): boolean {
    return proto3.util.equals(SetSystemImageRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.SetSystemImageResponse
 */
export class SetSystemImageResponse extends Message<SetSystemImageResponse> {
  constructor(data?: PartialMessage<SetSystemImageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.SetSystemImageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSystemImageResponse {
    return new SetSystemImageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSystemImageResponse {
    return new SetSystemImageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSystemImageResponse {
    return new SetSystemImageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetSystemImageResponse | PlainMessage<SetSystemImageResponse> | undefined, b: SetSystemImageResponse | PlainMessage<SetSystemImageResponse> | undefined): boolean {
    return proto3.util.equals(SetSystemImageResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.AppsHealthCheckRequest
 */
export class AppsHealthCheckRequest extends Message<AppsHealthCheckRequest> {
  constructor(data?: PartialMessage<AppsHealthCheckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.AppsHealthCheckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppsHealthCheckRequest {
    return new AppsHealthCheckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppsHealthCheckRequest {
    return new AppsHealthCheckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppsHealthCheckRequest {
    return new AppsHealthCheckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AppsHealthCheckRequest | PlainMessage<AppsHealthCheckRequest> | undefined, b: AppsHealthCheckRequest | PlainMessage<AppsHealthCheckRequest> | undefined): boolean {
    return proto3.util.equals(AppsHealthCheckRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.AppsHealthCheckResponse
 */
export class AppsHealthCheckResponse extends Message<AppsHealthCheckResponse> {
  /**
   * @generated from field: repeated platform.server.v1.AppHealth checks = 1;
   */
  checks: AppHealth[] = [];

  constructor(data?: PartialMessage<AppsHealthCheckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.AppsHealthCheckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "checks", kind: "message", T: AppHealth, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppsHealthCheckResponse {
    return new AppsHealthCheckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppsHealthCheckResponse {
    return new AppsHealthCheckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppsHealthCheckResponse {
    return new AppsHealthCheckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AppsHealthCheckResponse | PlainMessage<AppsHealthCheckResponse> | undefined, b: AppsHealthCheckResponse | PlainMessage<AppsHealthCheckResponse> | undefined): boolean {
    return proto3.util.equals(AppsHealthCheckResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.AppHealth
 */
export class AppHealth extends Message<AppHealth> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: platform.server.v1.AppStatus status = 2;
   */
  status = AppStatus.UNSPECIFIED;

  /**
   * @generated from field: platform.server.v1.AppDisplay display = 3;
   */
  display?: AppDisplay;

  constructor(data?: PartialMessage<AppHealth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.AppHealth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(AppStatus) },
    { no: 3, name: "display", kind: "message", T: AppDisplay },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppHealth {
    return new AppHealth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppHealth {
    return new AppHealth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppHealth {
    return new AppHealth().fromJsonString(jsonString, options);
  }

  static equals(a: AppHealth | PlainMessage<AppHealth> | undefined, b: AppHealth | PlainMessage<AppHealth> | undefined): boolean {
    return proto3.util.equals(AppHealth, a, b);
  }
}

/**
 * @generated from message platform.server.v1.AppDisplay
 */
export class AppDisplay extends Message<AppDisplay> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string icon_url = 2;
   */
  iconUrl = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<AppDisplay>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.AppDisplay";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "icon_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppDisplay {
    return new AppDisplay().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppDisplay {
    return new AppDisplay().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppDisplay {
    return new AppDisplay().fromJsonString(jsonString, options);
  }

  static equals(a: AppDisplay | PlainMessage<AppDisplay> | undefined, b: AppDisplay | PlainMessage<AppDisplay> | undefined): boolean {
    return proto3.util.equals(AppDisplay, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetSystemStatsRequest
 */
export class GetSystemStatsRequest extends Message<GetSystemStatsRequest> {
  constructor(data?: PartialMessage<GetSystemStatsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetSystemStatsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemStatsRequest {
    return new GetSystemStatsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemStatsRequest {
    return new GetSystemStatsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemStatsRequest {
    return new GetSystemStatsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemStatsRequest | PlainMessage<GetSystemStatsRequest> | undefined, b: GetSystemStatsRequest | PlainMessage<GetSystemStatsRequest> | undefined): boolean {
    return proto3.util.equals(GetSystemStatsRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetSystemStatsResponse
 */
export class GetSystemStatsResponse extends Message<GetSystemStatsResponse> {
  /**
   * @generated from field: platform.daemon.v1.SystemStats stats = 1;
   */
  stats?: SystemStats;

  constructor(data?: PartialMessage<GetSystemStatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetSystemStatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stats", kind: "message", T: SystemStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemStatsResponse {
    return new GetSystemStatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemStatsResponse {
    return new GetSystemStatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemStatsResponse {
    return new GetSystemStatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemStatsResponse | PlainMessage<GetSystemStatsResponse> | undefined, b: GetSystemStatsResponse | PlainMessage<GetSystemStatsResponse> | undefined): boolean {
    return proto3.util.equals(GetSystemStatsResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.IsDeviceSetupRequest
 */
export class IsDeviceSetupRequest extends Message<IsDeviceSetupRequest> {
  constructor(data?: PartialMessage<IsDeviceSetupRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.IsDeviceSetupRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsDeviceSetupRequest {
    return new IsDeviceSetupRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsDeviceSetupRequest {
    return new IsDeviceSetupRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsDeviceSetupRequest {
    return new IsDeviceSetupRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IsDeviceSetupRequest | PlainMessage<IsDeviceSetupRequest> | undefined, b: IsDeviceSetupRequest | PlainMessage<IsDeviceSetupRequest> | undefined): boolean {
    return proto3.util.equals(IsDeviceSetupRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.IsDeviceSetupResponse
 */
export class IsDeviceSetupResponse extends Message<IsDeviceSetupResponse> {
  /**
   * If false the device is not setup, and the user should be redirected into the onboarding flow
   *
   * @generated from field: bool setup = 1;
   */
  setup = false;

  constructor(data?: PartialMessage<IsDeviceSetupResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.IsDeviceSetupResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "setup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsDeviceSetupResponse {
    return new IsDeviceSetupResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsDeviceSetupResponse {
    return new IsDeviceSetupResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsDeviceSetupResponse {
    return new IsDeviceSetupResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsDeviceSetupResponse | PlainMessage<IsDeviceSetupResponse> | undefined, b: IsDeviceSetupResponse | PlainMessage<IsDeviceSetupResponse> | undefined): boolean {
    return proto3.util.equals(IsDeviceSetupResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InitializeDeviceRequest
 */
export class InitializeDeviceRequest extends Message<InitializeDeviceRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * validate timezone is at least not empty
   *
   * @generated from field: string timezone = 3;
   */
  timezone = "";

  /**
   * @generated from field: bool auto_update_apps = 4;
   */
  autoUpdateApps = false;

  /**
   * @generated from field: bool auto_update_os = 5;
   */
  autoUpdateOs = false;

  constructor(data?: PartialMessage<InitializeDeviceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InitializeDeviceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "auto_update_apps", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "auto_update_os", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeDeviceRequest {
    return new InitializeDeviceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeDeviceRequest {
    return new InitializeDeviceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeDeviceRequest {
    return new InitializeDeviceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeDeviceRequest | PlainMessage<InitializeDeviceRequest> | undefined, b: InitializeDeviceRequest | PlainMessage<InitializeDeviceRequest> | undefined): boolean {
    return proto3.util.equals(InitializeDeviceRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InitializeDeviceResponse
 */
export class InitializeDeviceResponse extends Message<InitializeDeviceResponse> {
  /**
   * @generated from field: bool setup = 1;
   */
  setup = false;

  constructor(data?: PartialMessage<InitializeDeviceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InitializeDeviceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "setup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeDeviceResponse {
    return new InitializeDeviceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeDeviceResponse {
    return new InitializeDeviceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeDeviceResponse {
    return new InitializeDeviceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeDeviceResponse | PlainMessage<InitializeDeviceResponse> | undefined, b: InitializeDeviceResponse | PlainMessage<InitializeDeviceResponse> | undefined): boolean {
    return proto3.util.equals(InitializeDeviceResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.LoginRequest
 */
export class LoginRequest extends Message<LoginRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<LoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.LoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest {
    return new LoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginRequest | PlainMessage<LoginRequest> | undefined, b: LoginRequest | PlainMessage<LoginRequest> | undefined): boolean {
    return proto3.util.equals(LoginRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.LoginResponse
 */
export class LoginResponse extends Message<LoginResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<LoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.LoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse {
    return new LoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginResponse | PlainMessage<LoginResponse> | undefined, b: LoginResponse | PlainMessage<LoginResponse> | undefined): boolean {
    return proto3.util.equals(LoginResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetAppsInStoreRequest
 */
export class GetAppsInStoreRequest extends Message<GetAppsInStoreRequest> {
  constructor(data?: PartialMessage<GetAppsInStoreRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetAppsInStoreRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppsInStoreRequest {
    return new GetAppsInStoreRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppsInStoreRequest {
    return new GetAppsInStoreRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppsInStoreRequest {
    return new GetAppsInStoreRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppsInStoreRequest | PlainMessage<GetAppsInStoreRequest> | undefined, b: GetAppsInStoreRequest | PlainMessage<GetAppsInStoreRequest> | undefined): boolean {
    return proto3.util.equals(GetAppsInStoreRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetAppsInStoreResponse
 */
export class GetAppsInStoreResponse extends Message<GetAppsInStoreResponse> {
  /**
   * @generated from field: repeated platform.server.v1.App apps = 1;
   */
  apps: App[] = [];

  constructor(data?: PartialMessage<GetAppsInStoreResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetAppsInStoreResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: App, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppsInStoreResponse {
    return new GetAppsInStoreResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppsInStoreResponse {
    return new GetAppsInStoreResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppsInStoreResponse {
    return new GetAppsInStoreResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppsInStoreResponse | PlainMessage<GetAppsInStoreResponse> | undefined, b: GetAppsInStoreResponse | PlainMessage<GetAppsInStoreResponse> | undefined): boolean {
    return proto3.util.equals(GetAppsInStoreResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetDeviceSettingsRequest
 */
export class GetDeviceSettingsRequest extends Message<GetDeviceSettingsRequest> {
  constructor(data?: PartialMessage<GetDeviceSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetDeviceSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeviceSettingsRequest {
    return new GetDeviceSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeviceSettingsRequest {
    return new GetDeviceSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeviceSettingsRequest {
    return new GetDeviceSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeviceSettingsRequest | PlainMessage<GetDeviceSettingsRequest> | undefined, b: GetDeviceSettingsRequest | PlainMessage<GetDeviceSettingsRequest> | undefined): boolean {
    return proto3.util.equals(GetDeviceSettingsRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetDeviceSettingsResponse
 */
export class GetDeviceSettingsResponse extends Message<GetDeviceSettingsResponse> {
  /**
   * @generated from field: platform.server.v1.DeviceSettings settings = 1;
   */
  settings?: DeviceSettings;

  constructor(data?: PartialMessage<GetDeviceSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetDeviceSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: DeviceSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDeviceSettingsResponse {
    return new GetDeviceSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDeviceSettingsResponse {
    return new GetDeviceSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDeviceSettingsResponse {
    return new GetDeviceSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDeviceSettingsResponse | PlainMessage<GetDeviceSettingsResponse> | undefined, b: GetDeviceSettingsResponse | PlainMessage<GetDeviceSettingsResponse> | undefined): boolean {
    return proto3.util.equals(GetDeviceSettingsResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.SetDeviceSettingsRequest
 */
export class SetDeviceSettingsRequest extends Message<SetDeviceSettingsRequest> {
  /**
   * @generated from field: platform.server.v1.DeviceSettings settings = 1;
   */
  settings?: DeviceSettings;

  constructor(data?: PartialMessage<SetDeviceSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.SetDeviceSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: DeviceSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetDeviceSettingsRequest {
    return new SetDeviceSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetDeviceSettingsRequest {
    return new SetDeviceSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetDeviceSettingsRequest {
    return new SetDeviceSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetDeviceSettingsRequest | PlainMessage<SetDeviceSettingsRequest> | undefined, b: SetDeviceSettingsRequest | PlainMessage<SetDeviceSettingsRequest> | undefined): boolean {
    return proto3.util.equals(SetDeviceSettingsRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.SetDeviceSettingsResponse
 */
export class SetDeviceSettingsResponse extends Message<SetDeviceSettingsResponse> {
  constructor(data?: PartialMessage<SetDeviceSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.SetDeviceSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetDeviceSettingsResponse {
    return new SetDeviceSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetDeviceSettingsResponse {
    return new SetDeviceSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetDeviceSettingsResponse {
    return new SetDeviceSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetDeviceSettingsResponse | PlainMessage<SetDeviceSettingsResponse> | undefined, b: SetDeviceSettingsResponse | PlainMessage<SetDeviceSettingsResponse> | undefined): boolean {
    return proto3.util.equals(SetDeviceSettingsResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetAppStorageRequest
 */
export class GetAppStorageRequest extends Message<GetAppStorageRequest> {
  constructor(data?: PartialMessage<GetAppStorageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetAppStorageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppStorageRequest {
    return new GetAppStorageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppStorageRequest {
    return new GetAppStorageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppStorageRequest {
    return new GetAppStorageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppStorageRequest | PlainMessage<GetAppStorageRequest> | undefined, b: GetAppStorageRequest | PlainMessage<GetAppStorageRequest> | undefined): boolean {
    return proto3.util.equals(GetAppStorageRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetAppStorageResponse
 */
export class GetAppStorageResponse extends Message<GetAppStorageResponse> {
  /**
   * @generated from field: repeated platform.server.v1.AppStorage apps = 1;
   */
  apps: AppStorage[] = [];

  constructor(data?: PartialMessage<GetAppStorageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetAppStorageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: AppStorage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppStorageResponse {
    return new GetAppStorageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppStorageResponse {
    return new GetAppStorageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppStorageResponse {
    return new GetAppStorageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppStorageResponse | PlainMessage<GetAppStorageResponse> | undefined, b: GetAppStorageResponse | PlainMessage<GetAppStorageResponse> | undefined): boolean {
    return proto3.util.equals(GetAppStorageResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.AppStorage
 */
export class AppStorage extends Message<AppStorage> {
  /**
   * @generated from field: string app_name = 1;
   */
  appName = "";

  /**
   * @generated from field: repeated string volumes = 2;
   */
  volumes: string[] = [];

  constructor(data?: PartialMessage<AppStorage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.AppStorage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "app_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "volumes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppStorage {
    return new AppStorage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppStorage {
    return new AppStorage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppStorage {
    return new AppStorage().fromJsonString(jsonString, options);
  }

  static equals(a: AppStorage | PlainMessage<AppStorage> | undefined, b: AppStorage | PlainMessage<AppStorage> | undefined): boolean {
    return proto3.util.equals(AppStorage, a, b);
  }
}

/**
 * @generated from message platform.server.v1.EnableSecureTunnellingRequest
 */
export class EnableSecureTunnellingRequest extends Message<EnableSecureTunnellingRequest> {
  constructor(data?: PartialMessage<EnableSecureTunnellingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.EnableSecureTunnellingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableSecureTunnellingRequest {
    return new EnableSecureTunnellingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableSecureTunnellingRequest {
    return new EnableSecureTunnellingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableSecureTunnellingRequest {
    return new EnableSecureTunnellingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EnableSecureTunnellingRequest | PlainMessage<EnableSecureTunnellingRequest> | undefined, b: EnableSecureTunnellingRequest | PlainMessage<EnableSecureTunnellingRequest> | undefined): boolean {
    return proto3.util.equals(EnableSecureTunnellingRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.EnableSecureTunnellingResponse
 */
export class EnableSecureTunnellingResponse extends Message<EnableSecureTunnellingResponse> {
  constructor(data?: PartialMessage<EnableSecureTunnellingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.EnableSecureTunnellingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnableSecureTunnellingResponse {
    return new EnableSecureTunnellingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnableSecureTunnellingResponse {
    return new EnableSecureTunnellingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnableSecureTunnellingResponse {
    return new EnableSecureTunnellingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EnableSecureTunnellingResponse | PlainMessage<EnableSecureTunnellingResponse> | undefined, b: EnableSecureTunnellingResponse | PlainMessage<EnableSecureTunnellingResponse> | undefined): boolean {
    return proto3.util.equals(EnableSecureTunnellingResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.DisableSecureTunnellingRequest
 */
export class DisableSecureTunnellingRequest extends Message<DisableSecureTunnellingRequest> {
  constructor(data?: PartialMessage<DisableSecureTunnellingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DisableSecureTunnellingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableSecureTunnellingRequest {
    return new DisableSecureTunnellingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableSecureTunnellingRequest {
    return new DisableSecureTunnellingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableSecureTunnellingRequest {
    return new DisableSecureTunnellingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DisableSecureTunnellingRequest | PlainMessage<DisableSecureTunnellingRequest> | undefined, b: DisableSecureTunnellingRequest | PlainMessage<DisableSecureTunnellingRequest> | undefined): boolean {
    return proto3.util.equals(DisableSecureTunnellingRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.DisableSecureTunnellingResponse
 */
export class DisableSecureTunnellingResponse extends Message<DisableSecureTunnellingResponse> {
  constructor(data?: PartialMessage<DisableSecureTunnellingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DisableSecureTunnellingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisableSecureTunnellingResponse {
    return new DisableSecureTunnellingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisableSecureTunnellingResponse {
    return new DisableSecureTunnellingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisableSecureTunnellingResponse {
    return new DisableSecureTunnellingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DisableSecureTunnellingResponse | PlainMessage<DisableSecureTunnellingResponse> | undefined, b: DisableSecureTunnellingResponse | PlainMessage<DisableSecureTunnellingResponse> | undefined): boolean {
    return proto3.util.equals(DisableSecureTunnellingResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RegisterToLocatorRequest
 */
export class RegisterToLocatorRequest extends Message<RegisterToLocatorRequest> {
  /**
   * TODO: eventually this is where the access key will be included that the user receives after purchasing the locator subscription
   *
   * @generated from field: string locator_address = 1;
   */
  locatorAddress = "";

  constructor(data?: PartialMessage<RegisterToLocatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RegisterToLocatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterToLocatorRequest {
    return new RegisterToLocatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterToLocatorRequest {
    return new RegisterToLocatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterToLocatorRequest {
    return new RegisterToLocatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterToLocatorRequest | PlainMessage<RegisterToLocatorRequest> | undefined, b: RegisterToLocatorRequest | PlainMessage<RegisterToLocatorRequest> | undefined): boolean {
    return proto3.util.equals(RegisterToLocatorRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RegisterToLocatorResponse
 */
export class RegisterToLocatorResponse extends Message<RegisterToLocatorResponse> {
  /**
   * @generated from field: platform.daemon.v1.Locator locator = 1;
   */
  locator?: Locator;

  constructor(data?: PartialMessage<RegisterToLocatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RegisterToLocatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locator", kind: "message", T: Locator },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterToLocatorResponse {
    return new RegisterToLocatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterToLocatorResponse {
    return new RegisterToLocatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterToLocatorResponse {
    return new RegisterToLocatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterToLocatorResponse | PlainMessage<RegisterToLocatorResponse> | undefined, b: RegisterToLocatorResponse | PlainMessage<RegisterToLocatorResponse> | undefined): boolean {
    return proto3.util.equals(RegisterToLocatorResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.DeregisterFromLocatorRequest
 */
export class DeregisterFromLocatorRequest extends Message<DeregisterFromLocatorRequest> {
  /**
   * @generated from field: string locator_address = 1;
   */
  locatorAddress = "";

  constructor(data?: PartialMessage<DeregisterFromLocatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DeregisterFromLocatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeregisterFromLocatorRequest {
    return new DeregisterFromLocatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeregisterFromLocatorRequest {
    return new DeregisterFromLocatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeregisterFromLocatorRequest {
    return new DeregisterFromLocatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeregisterFromLocatorRequest | PlainMessage<DeregisterFromLocatorRequest> | undefined, b: DeregisterFromLocatorRequest | PlainMessage<DeregisterFromLocatorRequest> | undefined): boolean {
    return proto3.util.equals(DeregisterFromLocatorRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.DeregisterFromLocatorResponse
 */
export class DeregisterFromLocatorResponse extends Message<DeregisterFromLocatorResponse> {
  /**
   * @generated from field: string locator_address = 1;
   */
  locatorAddress = "";

  constructor(data?: PartialMessage<DeregisterFromLocatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DeregisterFromLocatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeregisterFromLocatorResponse {
    return new DeregisterFromLocatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeregisterFromLocatorResponse {
    return new DeregisterFromLocatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeregisterFromLocatorResponse {
    return new DeregisterFromLocatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeregisterFromLocatorResponse | PlainMessage<DeregisterFromLocatorResponse> | undefined, b: DeregisterFromLocatorResponse | PlainMessage<DeregisterFromLocatorResponse> | undefined): boolean {
    return proto3.util.equals(DeregisterFromLocatorResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetComponentVersionsRequest
 */
export class GetComponentVersionsRequest extends Message<GetComponentVersionsRequest> {
  constructor(data?: PartialMessage<GetComponentVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetComponentVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetComponentVersionsRequest {
    return new GetComponentVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetComponentVersionsRequest {
    return new GetComponentVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetComponentVersionsRequest {
    return new GetComponentVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetComponentVersionsRequest | PlainMessage<GetComponentVersionsRequest> | undefined, b: GetComponentVersionsRequest | PlainMessage<GetComponentVersionsRequest> | undefined): boolean {
    return proto3.util.equals(GetComponentVersionsRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetComponentVersionsResponse
 */
export class GetComponentVersionsResponse extends Message<GetComponentVersionsResponse> {
  /**
   * @generated from field: repeated platform.daemon.v1.ComponentVersion platform = 1;
   */
  platform: ComponentVersion[] = [];

  /**
   * @generated from field: repeated platform.daemon.v1.ComponentVersion system = 2;
   */
  system: ComponentVersion[] = [];

  constructor(data?: PartialMessage<GetComponentVersionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetComponentVersionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform", kind: "message", T: ComponentVersion, repeated: true },
    { no: 2, name: "system", kind: "message", T: ComponentVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetComponentVersionsResponse {
    return new GetComponentVersionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetComponentVersionsResponse {
    return new GetComponentVersionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetComponentVersionsResponse {
    return new GetComponentVersionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetComponentVersionsResponse | PlainMessage<GetComponentVersionsResponse> | undefined, b: GetComponentVersionsResponse | PlainMessage<GetComponentVersionsResponse> | undefined): boolean {
    return proto3.util.equals(GetComponentVersionsResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetSystemLogsRequest
 */
export class GetSystemLogsRequest extends Message<GetSystemLogsRequest> {
  /**
   * A relative time in seconds before the current time from which to show logs.
   *
   * @generated from field: uint32 since_seconds = 1;
   */
  sinceSeconds = 0;

  constructor(data?: PartialMessage<GetSystemLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetSystemLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "since_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemLogsRequest {
    return new GetSystemLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemLogsRequest {
    return new GetSystemLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemLogsRequest {
    return new GetSystemLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemLogsRequest | PlainMessage<GetSystemLogsRequest> | undefined, b: GetSystemLogsRequest | PlainMessage<GetSystemLogsRequest> | undefined): boolean {
    return proto3.util.equals(GetSystemLogsRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetSystemLogsResponse
 */
export class GetSystemLogsResponse extends Message<GetSystemLogsResponse> {
  /**
   * @generated from field: repeated platform.daemon.v1.Log logs = 1;
   */
  logs: Log[] = [];

  /**
   * @generated from field: repeated string sources = 2;
   */
  sources: string[] = [];

  /**
   * @generated from field: repeated string namespaces = 3;
   */
  namespaces: string[] = [];

  /**
   * @generated from field: repeated string domains = 4;
   */
  domains: string[] = [];

  constructor(data?: PartialMessage<GetSystemLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetSystemLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: Log, repeated: true },
    { no: 2, name: "sources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "namespaces", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "domains", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemLogsResponse {
    return new GetSystemLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemLogsResponse {
    return new GetSystemLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemLogsResponse {
    return new GetSystemLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemLogsResponse | PlainMessage<GetSystemLogsResponse> | undefined, b: GetSystemLogsResponse | PlainMessage<GetSystemLogsResponse> | undefined): boolean {
    return proto3.util.equals(GetSystemLogsResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.Apps
 */
export class Apps extends Message<Apps> {
  /**
   * @generated from field: repeated platform.server.v1.App apps = 1;
   */
  apps: App[] = [];

  constructor(data?: PartialMessage<Apps>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.Apps";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: App, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Apps {
    return new Apps().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Apps {
    return new Apps().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Apps {
    return new Apps().fromJsonString(jsonString, options);
  }

  static equals(a: Apps | PlainMessage<Apps> | undefined, b: Apps | PlainMessage<Apps> | undefined): boolean {
    return proto3.util.equals(Apps, a, b);
  }
}

/**
 * Model used for the store and installed apps
 * NOTE: that this must match the shape of the `entries` from a Helm repo
 * index: e.g. https://apps.home-cloud.io/index.yaml
 *
 * @generated from message platform.server.v1.App
 */
export class App extends Message<App> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: string app_version = 3;
   */
  appVersion = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: string icon = 5;
   */
  icon = "";

  /**
   * @generated from field: string created = 6;
   */
  created = "";

  /**
   * @generated from field: string digest = 7;
   */
  digest = "";

  /**
   * @generated from field: string type = 8;
   */
  type = "";

  /**
   * @generated from field: repeated string urls = 9;
   */
  urls: string[] = [];

  /**
   * @generated from field: repeated platform.server.v1.AppDependency dependencies = 10;
   */
  dependencies: AppDependency[] = [];

  /**
   * @generated from field: string home = 11;
   */
  home = "";

  /**
   * @generated from field: repeated string sources = 12;
   */
  sources: string[] = [];

  /**
   * @generated from field: map<string, string> annotations = 13;
   */
  annotations: { [key: string]: string } = {};

  /**
   * readme is not from the index but is added by the server from
   * the README.md of the chart.
   *
   * @generated from field: string readme = 14;
   */
  readme = "";

  /**
   * installed denotes whether or not the app is installed on the server
   *
   * @generated from field: bool installed = 15;
   */
  installed = false;

  constructor(data?: PartialMessage<App>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.App";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "app_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "dependencies", kind: "message", T: AppDependency, repeated: true },
    { no: 11, name: "home", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "sources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 14, name: "readme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "installed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): App {
    return new App().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): App {
    return new App().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): App {
    return new App().fromJsonString(jsonString, options);
  }

  static equals(a: App | PlainMessage<App> | undefined, b: App | PlainMessage<App> | undefined): boolean {
    return proto3.util.equals(App, a, b);
  }
}

/**
 * @generated from message platform.server.v1.AppDependency
 */
export class AppDependency extends Message<AppDependency> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: string repository = 3;
   */
  repository = "";

  constructor(data?: PartialMessage<AppDependency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.AppDependency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "repository", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppDependency {
    return new AppDependency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppDependency {
    return new AppDependency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppDependency {
    return new AppDependency().fromJsonString(jsonString, options);
  }

  static equals(a: AppDependency | PlainMessage<AppDependency> | undefined, b: AppDependency | PlainMessage<AppDependency> | undefined): boolean {
    return proto3.util.equals(AppDependency, a, b);
  }
}

/**
 * @generated from message platform.server.v1.AppRunningStatus
 */
export class AppRunningStatus extends Message<AppRunningStatus> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: platform.server.v1.AppStatus status = 3;
   */
  status = AppStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<AppRunningStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.AppRunningStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(AppStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppRunningStatus {
    return new AppRunningStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppRunningStatus {
    return new AppRunningStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppRunningStatus {
    return new AppRunningStatus().fromJsonString(jsonString, options);
  }

  static equals(a: AppRunningStatus | PlainMessage<AppRunningStatus> | undefined, b: AppRunningStatus | PlainMessage<AppRunningStatus> | undefined): boolean {
    return proto3.util.equals(AppRunningStatus, a, b);
  }
}

/**
 * @generated from message platform.server.v1.Entries
 */
export class Entries extends Message<Entries> {
  /**
   * @generated from field: repeated platform.server.v1.App apps = 1;
   */
  apps: App[] = [];

  constructor(data?: PartialMessage<Entries>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.Entries";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apps", kind: "message", T: App, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entries {
    return new Entries().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entries {
    return new Entries().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entries {
    return new Entries().fromJsonString(jsonString, options);
  }

  static equals(a: Entries | PlainMessage<Entries> | undefined, b: Entries | PlainMessage<Entries> | undefined): boolean {
    return proto3.util.equals(Entries, a, b);
  }
}

/**
 * Aggregate model for the installed apps saved in blueprint
 *
 * @generated from message platform.server.v1.InstalledApp
 */
export class InstalledApp extends Message<InstalledApp> {
  /**
   * @generated from field: platform.server.v1.App application = 1;
   */
  application?: App;

  /**
   * @generated from field: platform.server.v1.AppRunningStatus status = 2;
   */
  status?: AppRunningStatus;

  constructor(data?: PartialMessage<InstalledApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InstalledApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application", kind: "message", T: App },
    { no: 2, name: "status", kind: "message", T: AppRunningStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstalledApp {
    return new InstalledApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstalledApp {
    return new InstalledApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstalledApp {
    return new InstalledApp().fromJsonString(jsonString, options);
  }

  static equals(a: InstalledApp | PlainMessage<InstalledApp> | undefined, b: InstalledApp | PlainMessage<InstalledApp> | undefined): boolean {
    return proto3.util.equals(InstalledApp, a, b);
  }
}

/**
 * Model to cache the apps available in the store: https://apps.home-cloud.io/index.yaml
 * A backround thread in the server will fetch the index and update the
 * cache at startup and then every 24 hours
 *
 * @generated from message platform.server.v1.AppStoreEntries
 */
export class AppStoreEntries extends Message<AppStoreEntries> {
  /**
   * @generated from field: string api_version = 1;
   */
  apiVersion = "";

  /**
   * @generated from field: string generated = 2;
   */
  generated = "";

  /**
   * @generated from field: map<string, platform.server.v1.Apps> entries = 3;
   */
  entries: { [key: string]: Apps } = {};

  constructor(data?: PartialMessage<AppStoreEntries>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.AppStoreEntries";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "generated", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "entries", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Apps} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppStoreEntries {
    return new AppStoreEntries().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppStoreEntries {
    return new AppStoreEntries().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppStoreEntries {
    return new AppStoreEntries().fromJsonString(jsonString, options);
  }

  static equals(a: AppStoreEntries | PlainMessage<AppStoreEntries> | undefined, b: AppStoreEntries | PlainMessage<AppStoreEntries> | undefined): boolean {
    return proto3.util.equals(AppStoreEntries, a, b);
  }
}

/**
 * User settings for the device
 *
 * @generated from message platform.server.v1.DeviceSettings
 */
export class DeviceSettings extends Message<DeviceSettings> {
  /**
   * @generated from field: platform.server.v1.User admin_user = 1;
   */
  adminUser?: User;

  /**
   * @generated from field: string timezone = 2;
   */
  timezone = "";

  /**
   * @generated from field: bool auto_update_apps = 3;
   */
  autoUpdateApps = false;

  /**
   * @generated from field: bool auto_update_os = 4;
   */
  autoUpdateOs = false;

  /**
   * @generated from field: bool enable_ssh = 5;
   */
  enableSsh = false;

  /**
   * @generated from field: repeated string trusted_ssh_keys = 6;
   */
  trustedSshKeys: string[] = [];

  /**
   * @generated from field: platform.server.v1.LocatorSettings locator_settings = 7;
   */
  locatorSettings?: LocatorSettings;

  constructor(data?: PartialMessage<DeviceSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DeviceSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin_user", kind: "message", T: User },
    { no: 2, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "auto_update_apps", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "auto_update_os", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "enable_ssh", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "trusted_ssh_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "locator_settings", kind: "message", T: LocatorSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceSettings {
    return new DeviceSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceSettings {
    return new DeviceSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceSettings {
    return new DeviceSettings().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceSettings | PlainMessage<DeviceSettings> | undefined, b: DeviceSettings | PlainMessage<DeviceSettings> | undefined): boolean {
    return proto3.util.equals(DeviceSettings, a, b);
  }
}

/**
 * @generated from message platform.server.v1.LocatorSettings
 */
export class LocatorSettings extends Message<LocatorSettings> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * @generated from field: repeated platform.daemon.v1.Locator locators = 2;
   */
  locators: Locator[] = [];

  /**
   * @generated from field: string stun_server_address = 3;
   */
  stunServerAddress = "";

  constructor(data?: PartialMessage<LocatorSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.LocatorSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "locators", kind: "message", T: Locator, repeated: true },
    { no: 3, name: "stun_server_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocatorSettings {
    return new LocatorSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocatorSettings {
    return new LocatorSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocatorSettings {
    return new LocatorSettings().fromJsonString(jsonString, options);
  }

  static equals(a: LocatorSettings | PlainMessage<LocatorSettings> | undefined, b: LocatorSettings | PlainMessage<LocatorSettings> | undefined): boolean {
    return proto3.util.equals(LocatorSettings, a, b);
  }
}

/**
 * @generated from message platform.server.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message platform.server.v1.SubscribeRequest
 */
export class SubscribeRequest extends Message<SubscribeRequest> {
  constructor(data?: PartialMessage<SubscribeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.SubscribeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined, b: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ServerEvent
 */
export class ServerEvent extends Message<ServerEvent> {
  /**
   * @generated from oneof platform.server.v1.ServerEvent.event
   */
  event: {
    /**
     * @generated from field: platform.server.v1.HeartbeatEvent heartbeat = 1;
     */
    value: HeartbeatEvent;
    case: "heartbeat";
  } | {
    /**
     * @generated from field: platform.server.v1.ErrorEvent error = 2;
     */
    value: ErrorEvent;
    case: "error";
  } | {
    /**
     * @generated from field: platform.server.v1.AppInstalledEvent app_installed = 3;
     */
    value: AppInstalledEvent;
    case: "appInstalled";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ServerEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ServerEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "heartbeat", kind: "message", T: HeartbeatEvent, oneof: "event" },
    { no: 2, name: "error", kind: "message", T: ErrorEvent, oneof: "event" },
    { no: 3, name: "app_installed", kind: "message", T: AppInstalledEvent, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerEvent {
    return new ServerEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerEvent {
    return new ServerEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerEvent {
    return new ServerEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ServerEvent | PlainMessage<ServerEvent> | undefined, b: ServerEvent | PlainMessage<ServerEvent> | undefined): boolean {
    return proto3.util.equals(ServerEvent, a, b);
  }
}

/**
 * @generated from message platform.server.v1.HeartbeatEvent
 */
export class HeartbeatEvent extends Message<HeartbeatEvent> {
  constructor(data?: PartialMessage<HeartbeatEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.HeartbeatEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeartbeatEvent {
    return new HeartbeatEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeartbeatEvent {
    return new HeartbeatEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeartbeatEvent {
    return new HeartbeatEvent().fromJsonString(jsonString, options);
  }

  static equals(a: HeartbeatEvent | PlainMessage<HeartbeatEvent> | undefined, b: HeartbeatEvent | PlainMessage<HeartbeatEvent> | undefined): boolean {
    return proto3.util.equals(HeartbeatEvent, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ErrorEvent
 */
export class ErrorEvent extends Message<ErrorEvent> {
  /**
   * @generated from field: string error = 1;
   */
  error = "";

  constructor(data?: PartialMessage<ErrorEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ErrorEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ErrorEvent {
    return new ErrorEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ErrorEvent {
    return new ErrorEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ErrorEvent {
    return new ErrorEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ErrorEvent | PlainMessage<ErrorEvent> | undefined, b: ErrorEvent | PlainMessage<ErrorEvent> | undefined): boolean {
    return proto3.util.equals(ErrorEvent, a, b);
  }
}

/**
 * @generated from message platform.server.v1.AppInstalledEvent
 */
export class AppInstalledEvent extends Message<AppInstalledEvent> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<AppInstalledEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.AppInstalledEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppInstalledEvent {
    return new AppInstalledEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppInstalledEvent {
    return new AppInstalledEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppInstalledEvent {
    return new AppInstalledEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AppInstalledEvent | PlainMessage<AppInstalledEvent> | undefined, b: AppInstalledEvent | PlainMessage<AppInstalledEvent> | undefined): boolean {
    return proto3.util.equals(AppInstalledEvent, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RegisterPeerRequest
 */
export class RegisterPeerRequest extends Message<RegisterPeerRequest> {
  constructor(data?: PartialMessage<RegisterPeerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RegisterPeerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterPeerRequest {
    return new RegisterPeerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterPeerRequest {
    return new RegisterPeerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterPeerRequest {
    return new RegisterPeerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterPeerRequest | PlainMessage<RegisterPeerRequest> | undefined, b: RegisterPeerRequest | PlainMessage<RegisterPeerRequest> | undefined): boolean {
    return proto3.util.equals(RegisterPeerRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RegisterPeerResponse
 */
export class RegisterPeerResponse extends Message<RegisterPeerResponse> {
  /**
   * client config
   *
   * @generated from field: string private_key = 1;
   */
  privateKey = "";

  /**
   * @generated from field: string public_key = 2;
   */
  publicKey = "";

  /**
   * @generated from field: repeated string addresses = 3;
   */
  addresses: string[] = [];

  /**
   * @generated from field: repeated string dns_servers = 4;
   */
  dnsServers: string[] = [];

  /**
   * server config
   *
   * @generated from field: string server_public_key = 5;
   */
  serverPublicKey = "";

  /**
   * @generated from field: string server_id = 6;
   */
  serverId = "";

  /**
   * @generated from field: string locator_url = 7;
   */
  locatorUrl = "";

  constructor(data?: PartialMessage<RegisterPeerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RegisterPeerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "private_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "dns_servers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "server_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "server_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "locator_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterPeerResponse {
    return new RegisterPeerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterPeerResponse {
    return new RegisterPeerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterPeerResponse {
    return new RegisterPeerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterPeerResponse | PlainMessage<RegisterPeerResponse> | undefined, b: RegisterPeerResponse | PlainMessage<RegisterPeerResponse> | undefined): boolean {
    return proto3.util.equals(RegisterPeerResponse, a, b);
  }
}

/**
 * Model to store config in key/val store
 *
 * @generated from message platform.server.v1.PeerConfiguration
 */
export class PeerConfiguration extends Message<PeerConfiguration> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string public_key = 2;
   */
  publicKey = "";

  /**
   * @generated from field: string private_key = 3;
   */
  privateKey = "";

  /**
   * @generated from field: platform.server.v1.ClientRegistrationDetails client_details = 4;
   */
  clientDetails?: ClientRegistrationDetails;

  /**
   * @generated from field: string server_public_key = 5;
   */
  serverPublicKey = "";

  constructor(data?: PartialMessage<PeerConfiguration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.PeerConfiguration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "private_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "client_details", kind: "message", T: ClientRegistrationDetails },
    { no: 5, name: "server_public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerConfiguration {
    return new PeerConfiguration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerConfiguration {
    return new PeerConfiguration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerConfiguration {
    return new PeerConfiguration().fromJsonString(jsonString, options);
  }

  static equals(a: PeerConfiguration | PlainMessage<PeerConfiguration> | undefined, b: PeerConfiguration | PlainMessage<PeerConfiguration> | undefined): boolean {
    return proto3.util.equals(PeerConfiguration, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ClientRegistrationDetails
 */
export class ClientRegistrationDetails extends Message<ClientRegistrationDetails> {
  /**
   * @generated from field: string server_address = 1;
   */
  serverAddress = "";

  /**
   * @generated from field: string locator_address = 2;
   */
  locatorAddress = "";

  constructor(data?: PartialMessage<ClientRegistrationDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ClientRegistrationDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "server_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "locator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientRegistrationDetails {
    return new ClientRegistrationDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientRegistrationDetails {
    return new ClientRegistrationDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientRegistrationDetails {
    return new ClientRegistrationDetails().fromJsonString(jsonString, options);
  }

  static equals(a: ClientRegistrationDetails | PlainMessage<ClientRegistrationDetails> | undefined, b: ClientRegistrationDetails | PlainMessage<ClientRegistrationDetails> | undefined): boolean {
    return proto3.util.equals(ClientRegistrationDetails, a, b);
  }
}

