// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file platform/server/v1/web.proto (package platform.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { SystemStats } from "../../daemon/v1/system_pb.js";

/**
 * @generated from message platform.server.v1.ShutdownHostRequest
 */
export class ShutdownHostRequest extends Message<ShutdownHostRequest> {
  constructor(data?: PartialMessage<ShutdownHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ShutdownHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownHostRequest {
    return new ShutdownHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownHostRequest | PlainMessage<ShutdownHostRequest> | undefined, b: ShutdownHostRequest | PlainMessage<ShutdownHostRequest> | undefined): boolean {
    return proto3.util.equals(ShutdownHostRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ShutdownHostResponse
 */
export class ShutdownHostResponse extends Message<ShutdownHostResponse> {
  constructor(data?: PartialMessage<ShutdownHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ShutdownHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShutdownHostResponse {
    return new ShutdownHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ShutdownHostResponse | PlainMessage<ShutdownHostResponse> | undefined, b: ShutdownHostResponse | PlainMessage<ShutdownHostResponse> | undefined): boolean {
    return proto3.util.equals(ShutdownHostResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RestartHostRequest
 */
export class RestartHostRequest extends Message<RestartHostRequest> {
  constructor(data?: PartialMessage<RestartHostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RestartHostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartHostRequest {
    return new RestartHostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartHostRequest {
    return new RestartHostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartHostRequest {
    return new RestartHostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RestartHostRequest | PlainMessage<RestartHostRequest> | undefined, b: RestartHostRequest | PlainMessage<RestartHostRequest> | undefined): boolean {
    return proto3.util.equals(RestartHostRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.RestartHostResponse
 */
export class RestartHostResponse extends Message<RestartHostResponse> {
  constructor(data?: PartialMessage<RestartHostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.RestartHostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartHostResponse {
    return new RestartHostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartHostResponse {
    return new RestartHostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartHostResponse {
    return new RestartHostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RestartHostResponse | PlainMessage<RestartHostResponse> | undefined, b: RestartHostResponse | PlainMessage<RestartHostResponse> | undefined): boolean {
    return proto3.util.equals(RestartHostResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InstallAppRequest
 */
export class InstallAppRequest extends Message<InstallAppRequest> {
  /**
   * @generated from field: string chart = 1;
   */
  chart = "";

  /**
   * @generated from field: string repo = 2;
   */
  repo = "";

  /**
   * @generated from field: string release = 3;
   */
  release = "";

  /**
   * @generated from field: string values = 4;
   */
  values = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  constructor(data?: PartialMessage<InstallAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InstallAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chart", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "release", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallAppRequest {
    return new InstallAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallAppRequest {
    return new InstallAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallAppRequest {
    return new InstallAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InstallAppRequest | PlainMessage<InstallAppRequest> | undefined, b: InstallAppRequest | PlainMessage<InstallAppRequest> | undefined): boolean {
    return proto3.util.equals(InstallAppRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InstallAppResponse
 */
export class InstallAppResponse extends Message<InstallAppResponse> {
  constructor(data?: PartialMessage<InstallAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InstallAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallAppResponse {
    return new InstallAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallAppResponse {
    return new InstallAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallAppResponse {
    return new InstallAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InstallAppResponse | PlainMessage<InstallAppResponse> | undefined, b: InstallAppResponse | PlainMessage<InstallAppResponse> | undefined): boolean {
    return proto3.util.equals(InstallAppResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.DeleteAppRequest
 */
export class DeleteAppRequest extends Message<DeleteAppRequest> {
  /**
   * @generated from field: string release = 1;
   */
  release = "";

  constructor(data?: PartialMessage<DeleteAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DeleteAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "release", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppRequest {
    return new DeleteAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined, b: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAppRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.DeleteAppResponse
 */
export class DeleteAppResponse extends Message<DeleteAppResponse> {
  constructor(data?: PartialMessage<DeleteAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DeleteAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppResponse {
    return new DeleteAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined, b: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAppResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.UpdateAppRequest
 */
export class UpdateAppRequest extends Message<UpdateAppRequest> {
  /**
   * @generated from field: string chart = 1;
   */
  chart = "";

  /**
   * @generated from field: string repo = 2;
   */
  repo = "";

  /**
   * @generated from field: string release = 3;
   */
  release = "";

  /**
   * @generated from field: string values = 4;
   */
  values = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  constructor(data?: PartialMessage<UpdateAppRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.UpdateAppRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chart", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "release", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppRequest {
    return new UpdateAppRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined, b: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAppRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.UpdateAppResponse
 */
export class UpdateAppResponse extends Message<UpdateAppResponse> {
  constructor(data?: PartialMessage<UpdateAppResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.UpdateAppResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppResponse {
    return new UpdateAppResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined, b: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAppResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.CheckForSystemUpdatesRequest
 */
export class CheckForSystemUpdatesRequest extends Message<CheckForSystemUpdatesRequest> {
  constructor(data?: PartialMessage<CheckForSystemUpdatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.CheckForSystemUpdatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckForSystemUpdatesRequest {
    return new CheckForSystemUpdatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckForSystemUpdatesRequest {
    return new CheckForSystemUpdatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckForSystemUpdatesRequest {
    return new CheckForSystemUpdatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckForSystemUpdatesRequest | PlainMessage<CheckForSystemUpdatesRequest> | undefined, b: CheckForSystemUpdatesRequest | PlainMessage<CheckForSystemUpdatesRequest> | undefined): boolean {
    return proto3.util.equals(CheckForSystemUpdatesRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.CheckForSystemUpdatesResponse
 */
export class CheckForSystemUpdatesResponse extends Message<CheckForSystemUpdatesResponse> {
  /**
   * @generated from field: platform.server.v1.DaemonVersions daemon_versions = 1;
   */
  daemonVersions?: DaemonVersions;

  /**
   * os_diff is the result of the `nvd diff` command
   *
   * @generated from field: string os_diff = 2;
   */
  osDiff = "";

  constructor(data?: PartialMessage<CheckForSystemUpdatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.CheckForSystemUpdatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "daemon_versions", kind: "message", T: DaemonVersions },
    { no: 2, name: "os_diff", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckForSystemUpdatesResponse {
    return new CheckForSystemUpdatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckForSystemUpdatesResponse {
    return new CheckForSystemUpdatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckForSystemUpdatesResponse {
    return new CheckForSystemUpdatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckForSystemUpdatesResponse | PlainMessage<CheckForSystemUpdatesResponse> | undefined, b: CheckForSystemUpdatesResponse | PlainMessage<CheckForSystemUpdatesResponse> | undefined): boolean {
    return proto3.util.equals(CheckForSystemUpdatesResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.DaemonVersions
 */
export class DaemonVersions extends Message<DaemonVersions> {
  /**
   * @generated from field: string current = 1;
   */
  current = "";

  /**
   * @generated from field: string latest = 2;
   */
  latest = "";

  constructor(data?: PartialMessage<DaemonVersions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.DaemonVersions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "latest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaemonVersions {
    return new DaemonVersions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaemonVersions {
    return new DaemonVersions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaemonVersions {
    return new DaemonVersions().fromJsonString(jsonString, options);
  }

  static equals(a: DaemonVersions | PlainMessage<DaemonVersions> | undefined, b: DaemonVersions | PlainMessage<DaemonVersions> | undefined): boolean {
    return proto3.util.equals(DaemonVersions, a, b);
  }
}

/**
 * @generated from message platform.server.v1.CheckForContainerUpdatesRequest
 */
export class CheckForContainerUpdatesRequest extends Message<CheckForContainerUpdatesRequest> {
  constructor(data?: PartialMessage<CheckForContainerUpdatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.CheckForContainerUpdatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckForContainerUpdatesRequest {
    return new CheckForContainerUpdatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckForContainerUpdatesRequest {
    return new CheckForContainerUpdatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckForContainerUpdatesRequest {
    return new CheckForContainerUpdatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckForContainerUpdatesRequest | PlainMessage<CheckForContainerUpdatesRequest> | undefined, b: CheckForContainerUpdatesRequest | PlainMessage<CheckForContainerUpdatesRequest> | undefined): boolean {
    return proto3.util.equals(CheckForContainerUpdatesRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.CheckForContainerUpdatesResponse
 */
export class CheckForContainerUpdatesResponse extends Message<CheckForContainerUpdatesResponse> {
  /**
   * @generated from field: repeated platform.server.v1.ImageVersion image_versions = 1;
   */
  imageVersions: ImageVersion[] = [];

  constructor(data?: PartialMessage<CheckForContainerUpdatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.CheckForContainerUpdatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image_versions", kind: "message", T: ImageVersion, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckForContainerUpdatesResponse {
    return new CheckForContainerUpdatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckForContainerUpdatesResponse {
    return new CheckForContainerUpdatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckForContainerUpdatesResponse {
    return new CheckForContainerUpdatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckForContainerUpdatesResponse | PlainMessage<CheckForContainerUpdatesResponse> | undefined, b: CheckForContainerUpdatesResponse | PlainMessage<CheckForContainerUpdatesResponse> | undefined): boolean {
    return proto3.util.equals(CheckForContainerUpdatesResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ImageVersion
 */
export class ImageVersion extends Message<ImageVersion> {
  /**
   * @generated from field: string image = 1;
   */
  image = "";

  /**
   * @generated from field: string current = 2;
   */
  current = "";

  /**
   * @generated from field: string latest = 3;
   */
  latest = "";

  constructor(data?: PartialMessage<ImageVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ImageVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "latest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImageVersion {
    return new ImageVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImageVersion {
    return new ImageVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImageVersion {
    return new ImageVersion().fromJsonString(jsonString, options);
  }

  static equals(a: ImageVersion | PlainMessage<ImageVersion> | undefined, b: ImageVersion | PlainMessage<ImageVersion> | undefined): boolean {
    return proto3.util.equals(ImageVersion, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ChangeDaemonVersionRequest
 */
export class ChangeDaemonVersionRequest extends Message<ChangeDaemonVersionRequest> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string vendor_hash = 2;
   */
  vendorHash = "";

  /**
   * @generated from field: string src_hash = 3;
   */
  srcHash = "";

  constructor(data?: PartialMessage<ChangeDaemonVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ChangeDaemonVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vendor_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "src_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeDaemonVersionRequest {
    return new ChangeDaemonVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeDaemonVersionRequest {
    return new ChangeDaemonVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeDaemonVersionRequest {
    return new ChangeDaemonVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeDaemonVersionRequest | PlainMessage<ChangeDaemonVersionRequest> | undefined, b: ChangeDaemonVersionRequest | PlainMessage<ChangeDaemonVersionRequest> | undefined): boolean {
    return proto3.util.equals(ChangeDaemonVersionRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.ChangeDaemonVersionResponse
 */
export class ChangeDaemonVersionResponse extends Message<ChangeDaemonVersionResponse> {
  constructor(data?: PartialMessage<ChangeDaemonVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.ChangeDaemonVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeDaemonVersionResponse {
    return new ChangeDaemonVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeDaemonVersionResponse {
    return new ChangeDaemonVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeDaemonVersionResponse {
    return new ChangeDaemonVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeDaemonVersionResponse | PlainMessage<ChangeDaemonVersionResponse> | undefined, b: ChangeDaemonVersionResponse | PlainMessage<ChangeDaemonVersionResponse> | undefined): boolean {
    return proto3.util.equals(ChangeDaemonVersionResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InstallOSUpdateRequest
 */
export class InstallOSUpdateRequest extends Message<InstallOSUpdateRequest> {
  constructor(data?: PartialMessage<InstallOSUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InstallOSUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallOSUpdateRequest {
    return new InstallOSUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallOSUpdateRequest {
    return new InstallOSUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallOSUpdateRequest {
    return new InstallOSUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InstallOSUpdateRequest | PlainMessage<InstallOSUpdateRequest> | undefined, b: InstallOSUpdateRequest | PlainMessage<InstallOSUpdateRequest> | undefined): boolean {
    return proto3.util.equals(InstallOSUpdateRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.InstallOSUpdateResponse
 */
export class InstallOSUpdateResponse extends Message<InstallOSUpdateResponse> {
  constructor(data?: PartialMessage<InstallOSUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.InstallOSUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallOSUpdateResponse {
    return new InstallOSUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallOSUpdateResponse {
    return new InstallOSUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallOSUpdateResponse {
    return new InstallOSUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InstallOSUpdateResponse | PlainMessage<InstallOSUpdateResponse> | undefined, b: InstallOSUpdateResponse | PlainMessage<InstallOSUpdateResponse> | undefined): boolean {
    return proto3.util.equals(InstallOSUpdateResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.SetSystemImageRequest
 */
export class SetSystemImageRequest extends Message<SetSystemImageRequest> {
  /**
   * @generated from field: string current_image = 1;
   */
  currentImage = "";

  /**
   * @generated from field: string requested_image = 2;
   */
  requestedImage = "";

  constructor(data?: PartialMessage<SetSystemImageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.SetSystemImageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "requested_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSystemImageRequest {
    return new SetSystemImageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSystemImageRequest {
    return new SetSystemImageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSystemImageRequest {
    return new SetSystemImageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetSystemImageRequest | PlainMessage<SetSystemImageRequest> | undefined, b: SetSystemImageRequest | PlainMessage<SetSystemImageRequest> | undefined): boolean {
    return proto3.util.equals(SetSystemImageRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.SetSystemImageResponse
 */
export class SetSystemImageResponse extends Message<SetSystemImageResponse> {
  constructor(data?: PartialMessage<SetSystemImageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.SetSystemImageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSystemImageResponse {
    return new SetSystemImageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSystemImageResponse {
    return new SetSystemImageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSystemImageResponse {
    return new SetSystemImageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetSystemImageResponse | PlainMessage<SetSystemImageResponse> | undefined, b: SetSystemImageResponse | PlainMessage<SetSystemImageResponse> | undefined): boolean {
    return proto3.util.equals(SetSystemImageResponse, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetSystemStatsRequest
 */
export class GetSystemStatsRequest extends Message<GetSystemStatsRequest> {
  constructor(data?: PartialMessage<GetSystemStatsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetSystemStatsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemStatsRequest {
    return new GetSystemStatsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemStatsRequest {
    return new GetSystemStatsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemStatsRequest {
    return new GetSystemStatsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemStatsRequest | PlainMessage<GetSystemStatsRequest> | undefined, b: GetSystemStatsRequest | PlainMessage<GetSystemStatsRequest> | undefined): boolean {
    return proto3.util.equals(GetSystemStatsRequest, a, b);
  }
}

/**
 * @generated from message platform.server.v1.GetSystemStatsResponse
 */
export class GetSystemStatsResponse extends Message<GetSystemStatsResponse> {
  /**
   * @generated from field: platform.daemon.v1.SystemStats stats = 1;
   */
  stats?: SystemStats;

  constructor(data?: PartialMessage<GetSystemStatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "platform.server.v1.GetSystemStatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stats", kind: "message", T: SystemStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemStatsResponse {
    return new GetSystemStatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemStatsResponse {
    return new GetSystemStatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemStatsResponse {
    return new GetSystemStatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemStatsResponse | PlainMessage<GetSystemStatsResponse> | undefined, b: GetSystemStatsResponse | PlainMessage<GetSystemStatsResponse> | undefined): boolean {
    return proto3.util.equals(GetSystemStatsResponse, a, b);
  }
}

