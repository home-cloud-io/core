// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/server/v1/web.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ShutdownHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShutdownHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShutdownHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShutdownHostRequestMultiError, or nil if none found.
func (m *ShutdownHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShutdownHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShutdownHostRequestMultiError(errors)
	}

	return nil
}

// ShutdownHostRequestMultiError is an error wrapping multiple validation
// errors returned by ShutdownHostRequest.ValidateAll() if the designated
// constraints aren't met.
type ShutdownHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShutdownHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShutdownHostRequestMultiError) AllErrors() []error { return m }

// ShutdownHostRequestValidationError is the validation error returned by
// ShutdownHostRequest.Validate if the designated constraints aren't met.
type ShutdownHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownHostRequestValidationError) ErrorName() string {
	return "ShutdownHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShutdownHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownHostRequestValidationError{}

// Validate checks the field values on ShutdownHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShutdownHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShutdownHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShutdownHostResponseMultiError, or nil if none found.
func (m *ShutdownHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShutdownHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShutdownHostResponseMultiError(errors)
	}

	return nil
}

// ShutdownHostResponseMultiError is an error wrapping multiple validation
// errors returned by ShutdownHostResponse.ValidateAll() if the designated
// constraints aren't met.
type ShutdownHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShutdownHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShutdownHostResponseMultiError) AllErrors() []error { return m }

// ShutdownHostResponseValidationError is the validation error returned by
// ShutdownHostResponse.Validate if the designated constraints aren't met.
type ShutdownHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownHostResponseValidationError) ErrorName() string {
	return "ShutdownHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShutdownHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownHostResponseValidationError{}

// Validate checks the field values on RestartHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartHostRequestMultiError, or nil if none found.
func (m *RestartHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartHostRequestMultiError(errors)
	}

	return nil
}

// RestartHostRequestMultiError is an error wrapping multiple validation errors
// returned by RestartHostRequest.ValidateAll() if the designated constraints
// aren't met.
type RestartHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartHostRequestMultiError) AllErrors() []error { return m }

// RestartHostRequestValidationError is the validation error returned by
// RestartHostRequest.Validate if the designated constraints aren't met.
type RestartHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartHostRequestValidationError) ErrorName() string {
	return "RestartHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestartHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartHostRequestValidationError{}

// Validate checks the field values on RestartHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartHostResponseMultiError, or nil if none found.
func (m *RestartHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartHostResponseMultiError(errors)
	}

	return nil
}

// RestartHostResponseMultiError is an error wrapping multiple validation
// errors returned by RestartHostResponse.ValidateAll() if the designated
// constraints aren't met.
type RestartHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartHostResponseMultiError) AllErrors() []error { return m }

// RestartHostResponseValidationError is the validation error returned by
// RestartHostResponse.Validate if the designated constraints aren't met.
type RestartHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartHostResponseValidationError) ErrorName() string {
	return "RestartHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestartHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartHostResponseValidationError{}

// Validate checks the field values on InstallAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstallAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallAppRequestMultiError, or nil if none found.
func (m *InstallAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chart

	// no validation rules for Repo

	// no validation rules for Release

	// no validation rules for Values

	// no validation rules for Version

	if len(errors) > 0 {
		return InstallAppRequestMultiError(errors)
	}

	return nil
}

// InstallAppRequestMultiError is an error wrapping multiple validation errors
// returned by InstallAppRequest.ValidateAll() if the designated constraints
// aren't met.
type InstallAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallAppRequestMultiError) AllErrors() []error { return m }

// InstallAppRequestValidationError is the validation error returned by
// InstallAppRequest.Validate if the designated constraints aren't met.
type InstallAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallAppRequestValidationError) ErrorName() string {
	return "InstallAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstallAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallAppRequestValidationError{}

// Validate checks the field values on InstallAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallAppResponseMultiError, or nil if none found.
func (m *InstallAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InstallAppResponseMultiError(errors)
	}

	return nil
}

// InstallAppResponseMultiError is an error wrapping multiple validation errors
// returned by InstallAppResponse.ValidateAll() if the designated constraints
// aren't met.
type InstallAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallAppResponseMultiError) AllErrors() []error { return m }

// InstallAppResponseValidationError is the validation error returned by
// InstallAppResponse.Validate if the designated constraints aren't met.
type InstallAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallAppResponseValidationError) ErrorName() string {
	return "InstallAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstallAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallAppResponseValidationError{}

// Validate checks the field values on DeleteAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAppRequestMultiError, or nil if none found.
func (m *DeleteAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Release

	if len(errors) > 0 {
		return DeleteAppRequestMultiError(errors)
	}

	return nil
}

// DeleteAppRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAppRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAppRequestMultiError) AllErrors() []error { return m }

// DeleteAppRequestValidationError is the validation error returned by
// DeleteAppRequest.Validate if the designated constraints aren't met.
type DeleteAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppRequestValidationError) ErrorName() string { return "DeleteAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppRequestValidationError{}

// Validate checks the field values on DeleteAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAppResponseMultiError, or nil if none found.
func (m *DeleteAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAppResponseMultiError(errors)
	}

	return nil
}

// DeleteAppResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteAppResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAppResponseMultiError) AllErrors() []error { return m }

// DeleteAppResponseValidationError is the validation error returned by
// DeleteAppResponse.Validate if the designated constraints aren't met.
type DeleteAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppResponseValidationError) ErrorName() string {
	return "DeleteAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppResponseValidationError{}

// Validate checks the field values on UpdateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppRequestMultiError, or nil if none found.
func (m *UpdateAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chart

	// no validation rules for Repo

	// no validation rules for Release

	// no validation rules for Values

	// no validation rules for Version

	if len(errors) > 0 {
		return UpdateAppRequestMultiError(errors)
	}

	return nil
}

// UpdateAppRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAppRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppRequestMultiError) AllErrors() []error { return m }

// UpdateAppRequestValidationError is the validation error returned by
// UpdateAppRequest.Validate if the designated constraints aren't met.
type UpdateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppRequestValidationError) ErrorName() string { return "UpdateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppRequestValidationError{}

// Validate checks the field values on UpdateAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppResponseMultiError, or nil if none found.
func (m *UpdateAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAppResponseMultiError(errors)
	}

	return nil
}

// UpdateAppResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateAppResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppResponseMultiError) AllErrors() []error { return m }

// UpdateAppResponseValidationError is the validation error returned by
// UpdateAppResponse.Validate if the designated constraints aren't met.
type UpdateAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppResponseValidationError) ErrorName() string {
	return "UpdateAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppResponseValidationError{}

// Validate checks the field values on CheckForSystemUpdatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckForSystemUpdatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckForSystemUpdatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckForSystemUpdatesRequestMultiError, or nil if none found.
func (m *CheckForSystemUpdatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckForSystemUpdatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckForSystemUpdatesRequestMultiError(errors)
	}

	return nil
}

// CheckForSystemUpdatesRequestMultiError is an error wrapping multiple
// validation errors returned by CheckForSystemUpdatesRequest.ValidateAll() if
// the designated constraints aren't met.
type CheckForSystemUpdatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckForSystemUpdatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckForSystemUpdatesRequestMultiError) AllErrors() []error { return m }

// CheckForSystemUpdatesRequestValidationError is the validation error returned
// by CheckForSystemUpdatesRequest.Validate if the designated constraints
// aren't met.
type CheckForSystemUpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckForSystemUpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckForSystemUpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckForSystemUpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckForSystemUpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckForSystemUpdatesRequestValidationError) ErrorName() string {
	return "CheckForSystemUpdatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckForSystemUpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckForSystemUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckForSystemUpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckForSystemUpdatesRequestValidationError{}

// Validate checks the field values on CheckForSystemUpdatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckForSystemUpdatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckForSystemUpdatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckForSystemUpdatesResponseMultiError, or nil if none found.
func (m *CheckForSystemUpdatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckForSystemUpdatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDaemonVersions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckForSystemUpdatesResponseValidationError{
					field:  "DaemonVersions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckForSystemUpdatesResponseValidationError{
					field:  "DaemonVersions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDaemonVersions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckForSystemUpdatesResponseValidationError{
				field:  "DaemonVersions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OsDiff

	if len(errors) > 0 {
		return CheckForSystemUpdatesResponseMultiError(errors)
	}

	return nil
}

// CheckForSystemUpdatesResponseMultiError is an error wrapping multiple
// validation errors returned by CheckForSystemUpdatesResponse.ValidateAll()
// if the designated constraints aren't met.
type CheckForSystemUpdatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckForSystemUpdatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckForSystemUpdatesResponseMultiError) AllErrors() []error { return m }

// CheckForSystemUpdatesResponseValidationError is the validation error
// returned by CheckForSystemUpdatesResponse.Validate if the designated
// constraints aren't met.
type CheckForSystemUpdatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckForSystemUpdatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckForSystemUpdatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckForSystemUpdatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckForSystemUpdatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckForSystemUpdatesResponseValidationError) ErrorName() string {
	return "CheckForSystemUpdatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckForSystemUpdatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckForSystemUpdatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckForSystemUpdatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckForSystemUpdatesResponseValidationError{}

// Validate checks the field values on DaemonVersions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DaemonVersions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonVersions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DaemonVersionsMultiError,
// or nil if none found.
func (m *DaemonVersions) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonVersions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Current

	// no validation rules for Latest

	if len(errors) > 0 {
		return DaemonVersionsMultiError(errors)
	}

	return nil
}

// DaemonVersionsMultiError is an error wrapping multiple validation errors
// returned by DaemonVersions.ValidateAll() if the designated constraints
// aren't met.
type DaemonVersionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonVersionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonVersionsMultiError) AllErrors() []error { return m }

// DaemonVersionsValidationError is the validation error returned by
// DaemonVersions.Validate if the designated constraints aren't met.
type DaemonVersionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonVersionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonVersionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonVersionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonVersionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonVersionsValidationError) ErrorName() string { return "DaemonVersionsValidationError" }

// Error satisfies the builtin error interface
func (e DaemonVersionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonVersions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonVersionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonVersionsValidationError{}

// Validate checks the field values on CheckForContainerUpdatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckForContainerUpdatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckForContainerUpdatesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckForContainerUpdatesRequestMultiError, or nil if none found.
func (m *CheckForContainerUpdatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckForContainerUpdatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckForContainerUpdatesRequestMultiError(errors)
	}

	return nil
}

// CheckForContainerUpdatesRequestMultiError is an error wrapping multiple
// validation errors returned by CheckForContainerUpdatesRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckForContainerUpdatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckForContainerUpdatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckForContainerUpdatesRequestMultiError) AllErrors() []error { return m }

// CheckForContainerUpdatesRequestValidationError is the validation error
// returned by CheckForContainerUpdatesRequest.Validate if the designated
// constraints aren't met.
type CheckForContainerUpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckForContainerUpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckForContainerUpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckForContainerUpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckForContainerUpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckForContainerUpdatesRequestValidationError) ErrorName() string {
	return "CheckForContainerUpdatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckForContainerUpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckForContainerUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckForContainerUpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckForContainerUpdatesRequestValidationError{}

// Validate checks the field values on CheckForContainerUpdatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CheckForContainerUpdatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckForContainerUpdatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckForContainerUpdatesResponseMultiError, or nil if none found.
func (m *CheckForContainerUpdatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckForContainerUpdatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetImageVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckForContainerUpdatesResponseValidationError{
						field:  fmt.Sprintf("ImageVersions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckForContainerUpdatesResponseValidationError{
						field:  fmt.Sprintf("ImageVersions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckForContainerUpdatesResponseValidationError{
					field:  fmt.Sprintf("ImageVersions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckForContainerUpdatesResponseMultiError(errors)
	}

	return nil
}

// CheckForContainerUpdatesResponseMultiError is an error wrapping multiple
// validation errors returned by
// CheckForContainerUpdatesResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckForContainerUpdatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckForContainerUpdatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckForContainerUpdatesResponseMultiError) AllErrors() []error { return m }

// CheckForContainerUpdatesResponseValidationError is the validation error
// returned by CheckForContainerUpdatesResponse.Validate if the designated
// constraints aren't met.
type CheckForContainerUpdatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckForContainerUpdatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckForContainerUpdatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckForContainerUpdatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckForContainerUpdatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckForContainerUpdatesResponseValidationError) ErrorName() string {
	return "CheckForContainerUpdatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckForContainerUpdatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckForContainerUpdatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckForContainerUpdatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckForContainerUpdatesResponseValidationError{}

// Validate checks the field values on ImageVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageVersionMultiError, or
// nil if none found.
func (m *ImageVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	// no validation rules for Current

	// no validation rules for Latest

	if len(errors) > 0 {
		return ImageVersionMultiError(errors)
	}

	return nil
}

// ImageVersionMultiError is an error wrapping multiple validation errors
// returned by ImageVersion.ValidateAll() if the designated constraints aren't met.
type ImageVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageVersionMultiError) AllErrors() []error { return m }

// ImageVersionValidationError is the validation error returned by
// ImageVersion.Validate if the designated constraints aren't met.
type ImageVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageVersionValidationError) ErrorName() string { return "ImageVersionValidationError" }

// Error satisfies the builtin error interface
func (e ImageVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageVersionValidationError{}

// Validate checks the field values on ChangeDaemonVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeDaemonVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeDaemonVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeDaemonVersionRequestMultiError, or nil if none found.
func (m *ChangeDaemonVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeDaemonVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VendorHash

	// no validation rules for SrcHash

	if len(errors) > 0 {
		return ChangeDaemonVersionRequestMultiError(errors)
	}

	return nil
}

// ChangeDaemonVersionRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeDaemonVersionRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeDaemonVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeDaemonVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeDaemonVersionRequestMultiError) AllErrors() []error { return m }

// ChangeDaemonVersionRequestValidationError is the validation error returned
// by ChangeDaemonVersionRequest.Validate if the designated constraints aren't met.
type ChangeDaemonVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeDaemonVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeDaemonVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeDaemonVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeDaemonVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeDaemonVersionRequestValidationError) ErrorName() string {
	return "ChangeDaemonVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeDaemonVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeDaemonVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeDaemonVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeDaemonVersionRequestValidationError{}

// Validate checks the field values on ChangeDaemonVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeDaemonVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeDaemonVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeDaemonVersionResponseMultiError, or nil if none found.
func (m *ChangeDaemonVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeDaemonVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeDaemonVersionResponseMultiError(errors)
	}

	return nil
}

// ChangeDaemonVersionResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeDaemonVersionResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeDaemonVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeDaemonVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeDaemonVersionResponseMultiError) AllErrors() []error { return m }

// ChangeDaemonVersionResponseValidationError is the validation error returned
// by ChangeDaemonVersionResponse.Validate if the designated constraints
// aren't met.
type ChangeDaemonVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeDaemonVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeDaemonVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeDaemonVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeDaemonVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeDaemonVersionResponseValidationError) ErrorName() string {
	return "ChangeDaemonVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeDaemonVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeDaemonVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeDaemonVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeDaemonVersionResponseValidationError{}

// Validate checks the field values on InstallOSUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallOSUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallOSUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallOSUpdateRequestMultiError, or nil if none found.
func (m *InstallOSUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallOSUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InstallOSUpdateRequestMultiError(errors)
	}

	return nil
}

// InstallOSUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by InstallOSUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type InstallOSUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallOSUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallOSUpdateRequestMultiError) AllErrors() []error { return m }

// InstallOSUpdateRequestValidationError is the validation error returned by
// InstallOSUpdateRequest.Validate if the designated constraints aren't met.
type InstallOSUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallOSUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallOSUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallOSUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallOSUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallOSUpdateRequestValidationError) ErrorName() string {
	return "InstallOSUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstallOSUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallOSUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallOSUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallOSUpdateRequestValidationError{}

// Validate checks the field values on InstallOSUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallOSUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallOSUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallOSUpdateResponseMultiError, or nil if none found.
func (m *InstallOSUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallOSUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InstallOSUpdateResponseMultiError(errors)
	}

	return nil
}

// InstallOSUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by InstallOSUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type InstallOSUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallOSUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallOSUpdateResponseMultiError) AllErrors() []error { return m }

// InstallOSUpdateResponseValidationError is the validation error returned by
// InstallOSUpdateResponse.Validate if the designated constraints aren't met.
type InstallOSUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallOSUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallOSUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallOSUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallOSUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallOSUpdateResponseValidationError) ErrorName() string {
	return "InstallOSUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstallOSUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallOSUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallOSUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallOSUpdateResponseValidationError{}

// Validate checks the field values on SetSystemImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSystemImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSystemImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSystemImageRequestMultiError, or nil if none found.
func (m *SetSystemImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSystemImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrentImage

	// no validation rules for RequestedImage

	if len(errors) > 0 {
		return SetSystemImageRequestMultiError(errors)
	}

	return nil
}

// SetSystemImageRequestMultiError is an error wrapping multiple validation
// errors returned by SetSystemImageRequest.ValidateAll() if the designated
// constraints aren't met.
type SetSystemImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSystemImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSystemImageRequestMultiError) AllErrors() []error { return m }

// SetSystemImageRequestValidationError is the validation error returned by
// SetSystemImageRequest.Validate if the designated constraints aren't met.
type SetSystemImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSystemImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSystemImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSystemImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSystemImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSystemImageRequestValidationError) ErrorName() string {
	return "SetSystemImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSystemImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSystemImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSystemImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSystemImageRequestValidationError{}

// Validate checks the field values on SetSystemImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSystemImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSystemImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSystemImageResponseMultiError, or nil if none found.
func (m *SetSystemImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSystemImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetSystemImageResponseMultiError(errors)
	}

	return nil
}

// SetSystemImageResponseMultiError is an error wrapping multiple validation
// errors returned by SetSystemImageResponse.ValidateAll() if the designated
// constraints aren't met.
type SetSystemImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSystemImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSystemImageResponseMultiError) AllErrors() []error { return m }

// SetSystemImageResponseValidationError is the validation error returned by
// SetSystemImageResponse.Validate if the designated constraints aren't met.
type SetSystemImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSystemImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSystemImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSystemImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSystemImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSystemImageResponseValidationError) ErrorName() string {
	return "SetSystemImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetSystemImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSystemImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSystemImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSystemImageResponseValidationError{}
