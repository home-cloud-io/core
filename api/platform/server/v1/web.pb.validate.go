// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: platform/server/v1/web.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ShutdownHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShutdownHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShutdownHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShutdownHostRequestMultiError, or nil if none found.
func (m *ShutdownHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShutdownHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShutdownHostRequestMultiError(errors)
	}

	return nil
}

// ShutdownHostRequestMultiError is an error wrapping multiple validation
// errors returned by ShutdownHostRequest.ValidateAll() if the designated
// constraints aren't met.
type ShutdownHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShutdownHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShutdownHostRequestMultiError) AllErrors() []error { return m }

// ShutdownHostRequestValidationError is the validation error returned by
// ShutdownHostRequest.Validate if the designated constraints aren't met.
type ShutdownHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownHostRequestValidationError) ErrorName() string {
	return "ShutdownHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShutdownHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownHostRequestValidationError{}

// Validate checks the field values on ShutdownHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShutdownHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShutdownHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShutdownHostResponseMultiError, or nil if none found.
func (m *ShutdownHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShutdownHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShutdownHostResponseMultiError(errors)
	}

	return nil
}

// ShutdownHostResponseMultiError is an error wrapping multiple validation
// errors returned by ShutdownHostResponse.ValidateAll() if the designated
// constraints aren't met.
type ShutdownHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShutdownHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShutdownHostResponseMultiError) AllErrors() []error { return m }

// ShutdownHostResponseValidationError is the validation error returned by
// ShutdownHostResponse.Validate if the designated constraints aren't met.
type ShutdownHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownHostResponseValidationError) ErrorName() string {
	return "ShutdownHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShutdownHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownHostResponseValidationError{}

// Validate checks the field values on RestartHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartHostRequestMultiError, or nil if none found.
func (m *RestartHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartHostRequestMultiError(errors)
	}

	return nil
}

// RestartHostRequestMultiError is an error wrapping multiple validation errors
// returned by RestartHostRequest.ValidateAll() if the designated constraints
// aren't met.
type RestartHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartHostRequestMultiError) AllErrors() []error { return m }

// RestartHostRequestValidationError is the validation error returned by
// RestartHostRequest.Validate if the designated constraints aren't met.
type RestartHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartHostRequestValidationError) ErrorName() string {
	return "RestartHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestartHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartHostRequestValidationError{}

// Validate checks the field values on RestartHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartHostResponseMultiError, or nil if none found.
func (m *RestartHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartHostResponseMultiError(errors)
	}

	return nil
}

// RestartHostResponseMultiError is an error wrapping multiple validation
// errors returned by RestartHostResponse.ValidateAll() if the designated
// constraints aren't met.
type RestartHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartHostResponseMultiError) AllErrors() []error { return m }

// RestartHostResponseValidationError is the validation error returned by
// RestartHostResponse.Validate if the designated constraints aren't met.
type RestartHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartHostResponseValidationError) ErrorName() string {
	return "RestartHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestartHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartHostResponseValidationError{}

// Validate checks the field values on InstallAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstallAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallAppRequestMultiError, or nil if none found.
func (m *InstallAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chart

	// no validation rules for Repo

	// no validation rules for Release

	// no validation rules for Values

	// no validation rules for Version

	if len(errors) > 0 {
		return InstallAppRequestMultiError(errors)
	}

	return nil
}

// InstallAppRequestMultiError is an error wrapping multiple validation errors
// returned by InstallAppRequest.ValidateAll() if the designated constraints
// aren't met.
type InstallAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallAppRequestMultiError) AllErrors() []error { return m }

// InstallAppRequestValidationError is the validation error returned by
// InstallAppRequest.Validate if the designated constraints aren't met.
type InstallAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallAppRequestValidationError) ErrorName() string {
	return "InstallAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstallAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallAppRequestValidationError{}

// Validate checks the field values on InstallAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallAppResponseMultiError, or nil if none found.
func (m *InstallAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InstallAppResponseMultiError(errors)
	}

	return nil
}

// InstallAppResponseMultiError is an error wrapping multiple validation errors
// returned by InstallAppResponse.ValidateAll() if the designated constraints
// aren't met.
type InstallAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallAppResponseMultiError) AllErrors() []error { return m }

// InstallAppResponseValidationError is the validation error returned by
// InstallAppResponse.Validate if the designated constraints aren't met.
type InstallAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallAppResponseValidationError) ErrorName() string {
	return "InstallAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstallAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallAppResponseValidationError{}

// Validate checks the field values on DeleteAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAppRequestMultiError, or nil if none found.
func (m *DeleteAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Release

	if len(errors) > 0 {
		return DeleteAppRequestMultiError(errors)
	}

	return nil
}

// DeleteAppRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAppRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAppRequestMultiError) AllErrors() []error { return m }

// DeleteAppRequestValidationError is the validation error returned by
// DeleteAppRequest.Validate if the designated constraints aren't met.
type DeleteAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppRequestValidationError) ErrorName() string { return "DeleteAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppRequestValidationError{}

// Validate checks the field values on DeleteAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAppResponseMultiError, or nil if none found.
func (m *DeleteAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAppResponseMultiError(errors)
	}

	return nil
}

// DeleteAppResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteAppResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAppResponseMultiError) AllErrors() []error { return m }

// DeleteAppResponseValidationError is the validation error returned by
// DeleteAppResponse.Validate if the designated constraints aren't met.
type DeleteAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppResponseValidationError) ErrorName() string {
	return "DeleteAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppResponseValidationError{}

// Validate checks the field values on UpdateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppRequestMultiError, or nil if none found.
func (m *UpdateAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chart

	// no validation rules for Repo

	// no validation rules for Release

	// no validation rules for Values

	// no validation rules for Version

	if len(errors) > 0 {
		return UpdateAppRequestMultiError(errors)
	}

	return nil
}

// UpdateAppRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAppRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppRequestMultiError) AllErrors() []error { return m }

// UpdateAppRequestValidationError is the validation error returned by
// UpdateAppRequest.Validate if the designated constraints aren't met.
type UpdateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppRequestValidationError) ErrorName() string { return "UpdateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppRequestValidationError{}

// Validate checks the field values on UpdateAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppResponseMultiError, or nil if none found.
func (m *UpdateAppResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAppResponseMultiError(errors)
	}

	return nil
}

// UpdateAppResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateAppResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppResponseMultiError) AllErrors() []error { return m }

// UpdateAppResponseValidationError is the validation error returned by
// UpdateAppResponse.Validate if the designated constraints aren't met.
type UpdateAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppResponseValidationError) ErrorName() string {
	return "UpdateAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppResponseValidationError{}

// Validate checks the field values on CheckForSystemUpdatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckForSystemUpdatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckForSystemUpdatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckForSystemUpdatesRequestMultiError, or nil if none found.
func (m *CheckForSystemUpdatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckForSystemUpdatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckForSystemUpdatesRequestMultiError(errors)
	}

	return nil
}

// CheckForSystemUpdatesRequestMultiError is an error wrapping multiple
// validation errors returned by CheckForSystemUpdatesRequest.ValidateAll() if
// the designated constraints aren't met.
type CheckForSystemUpdatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckForSystemUpdatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckForSystemUpdatesRequestMultiError) AllErrors() []error { return m }

// CheckForSystemUpdatesRequestValidationError is the validation error returned
// by CheckForSystemUpdatesRequest.Validate if the designated constraints
// aren't met.
type CheckForSystemUpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckForSystemUpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckForSystemUpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckForSystemUpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckForSystemUpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckForSystemUpdatesRequestValidationError) ErrorName() string {
	return "CheckForSystemUpdatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckForSystemUpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckForSystemUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckForSystemUpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckForSystemUpdatesRequestValidationError{}

// Validate checks the field values on CheckForSystemUpdatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckForSystemUpdatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckForSystemUpdatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckForSystemUpdatesResponseMultiError, or nil if none found.
func (m *CheckForSystemUpdatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckForSystemUpdatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDaemonVersions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckForSystemUpdatesResponseValidationError{
					field:  "DaemonVersions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckForSystemUpdatesResponseValidationError{
					field:  "DaemonVersions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDaemonVersions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckForSystemUpdatesResponseValidationError{
				field:  "DaemonVersions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OsDiff

	if len(errors) > 0 {
		return CheckForSystemUpdatesResponseMultiError(errors)
	}

	return nil
}

// CheckForSystemUpdatesResponseMultiError is an error wrapping multiple
// validation errors returned by CheckForSystemUpdatesResponse.ValidateAll()
// if the designated constraints aren't met.
type CheckForSystemUpdatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckForSystemUpdatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckForSystemUpdatesResponseMultiError) AllErrors() []error { return m }

// CheckForSystemUpdatesResponseValidationError is the validation error
// returned by CheckForSystemUpdatesResponse.Validate if the designated
// constraints aren't met.
type CheckForSystemUpdatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckForSystemUpdatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckForSystemUpdatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckForSystemUpdatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckForSystemUpdatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckForSystemUpdatesResponseValidationError) ErrorName() string {
	return "CheckForSystemUpdatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckForSystemUpdatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckForSystemUpdatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckForSystemUpdatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckForSystemUpdatesResponseValidationError{}

// Validate checks the field values on DaemonVersions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DaemonVersions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonVersions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DaemonVersionsMultiError,
// or nil if none found.
func (m *DaemonVersions) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonVersions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCurrent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DaemonVersionsValidationError{
					field:  "Current",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DaemonVersionsValidationError{
					field:  "Current",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DaemonVersionsValidationError{
				field:  "Current",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLatest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DaemonVersionsValidationError{
					field:  "Latest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DaemonVersionsValidationError{
					field:  "Latest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DaemonVersionsValidationError{
				field:  "Latest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DaemonVersionsMultiError(errors)
	}

	return nil
}

// DaemonVersionsMultiError is an error wrapping multiple validation errors
// returned by DaemonVersions.ValidateAll() if the designated constraints
// aren't met.
type DaemonVersionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonVersionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonVersionsMultiError) AllErrors() []error { return m }

// DaemonVersionsValidationError is the validation error returned by
// DaemonVersions.Validate if the designated constraints aren't met.
type DaemonVersionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonVersionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonVersionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonVersionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonVersionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonVersionsValidationError) ErrorName() string { return "DaemonVersionsValidationError" }

// Error satisfies the builtin error interface
func (e DaemonVersionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonVersions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonVersionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonVersionsValidationError{}

// Validate checks the field values on DaemonVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DaemonVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DaemonVersionMultiError, or
// nil if none found.
func (m *DaemonVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VendorHash

	// no validation rules for SrcHash

	if len(errors) > 0 {
		return DaemonVersionMultiError(errors)
	}

	return nil
}

// DaemonVersionMultiError is an error wrapping multiple validation errors
// returned by DaemonVersion.ValidateAll() if the designated constraints
// aren't met.
type DaemonVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonVersionMultiError) AllErrors() []error { return m }

// DaemonVersionValidationError is the validation error returned by
// DaemonVersion.Validate if the designated constraints aren't met.
type DaemonVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonVersionValidationError) ErrorName() string { return "DaemonVersionValidationError" }

// Error satisfies the builtin error interface
func (e DaemonVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonVersionValidationError{}

// Validate checks the field values on CheckForContainerUpdatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckForContainerUpdatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckForContainerUpdatesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckForContainerUpdatesRequestMultiError, or nil if none found.
func (m *CheckForContainerUpdatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckForContainerUpdatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckForContainerUpdatesRequestMultiError(errors)
	}

	return nil
}

// CheckForContainerUpdatesRequestMultiError is an error wrapping multiple
// validation errors returned by CheckForContainerUpdatesRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckForContainerUpdatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckForContainerUpdatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckForContainerUpdatesRequestMultiError) AllErrors() []error { return m }

// CheckForContainerUpdatesRequestValidationError is the validation error
// returned by CheckForContainerUpdatesRequest.Validate if the designated
// constraints aren't met.
type CheckForContainerUpdatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckForContainerUpdatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckForContainerUpdatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckForContainerUpdatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckForContainerUpdatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckForContainerUpdatesRequestValidationError) ErrorName() string {
	return "CheckForContainerUpdatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckForContainerUpdatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckForContainerUpdatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckForContainerUpdatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckForContainerUpdatesRequestValidationError{}

// Validate checks the field values on CheckForContainerUpdatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CheckForContainerUpdatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckForContainerUpdatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckForContainerUpdatesResponseMultiError, or nil if none found.
func (m *CheckForContainerUpdatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckForContainerUpdatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetImageVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckForContainerUpdatesResponseValidationError{
						field:  fmt.Sprintf("ImageVersions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckForContainerUpdatesResponseValidationError{
						field:  fmt.Sprintf("ImageVersions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckForContainerUpdatesResponseValidationError{
					field:  fmt.Sprintf("ImageVersions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckForContainerUpdatesResponseMultiError(errors)
	}

	return nil
}

// CheckForContainerUpdatesResponseMultiError is an error wrapping multiple
// validation errors returned by
// CheckForContainerUpdatesResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckForContainerUpdatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckForContainerUpdatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckForContainerUpdatesResponseMultiError) AllErrors() []error { return m }

// CheckForContainerUpdatesResponseValidationError is the validation error
// returned by CheckForContainerUpdatesResponse.Validate if the designated
// constraints aren't met.
type CheckForContainerUpdatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckForContainerUpdatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckForContainerUpdatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckForContainerUpdatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckForContainerUpdatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckForContainerUpdatesResponseValidationError) ErrorName() string {
	return "CheckForContainerUpdatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckForContainerUpdatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckForContainerUpdatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckForContainerUpdatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckForContainerUpdatesResponseValidationError{}

// Validate checks the field values on ImageVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageVersionMultiError, or
// nil if none found.
func (m *ImageVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	// no validation rules for Current

	// no validation rules for Latest

	// no validation rules for Name

	if len(errors) > 0 {
		return ImageVersionMultiError(errors)
	}

	return nil
}

// ImageVersionMultiError is an error wrapping multiple validation errors
// returned by ImageVersion.ValidateAll() if the designated constraints aren't met.
type ImageVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageVersionMultiError) AllErrors() []error { return m }

// ImageVersionValidationError is the validation error returned by
// ImageVersion.Validate if the designated constraints aren't met.
type ImageVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageVersionValidationError) ErrorName() string { return "ImageVersionValidationError" }

// Error satisfies the builtin error interface
func (e ImageVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageVersionValidationError{}

// Validate checks the field values on ChangeDaemonVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeDaemonVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeDaemonVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeDaemonVersionRequestMultiError, or nil if none found.
func (m *ChangeDaemonVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeDaemonVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for VendorHash

	// no validation rules for SrcHash

	if len(errors) > 0 {
		return ChangeDaemonVersionRequestMultiError(errors)
	}

	return nil
}

// ChangeDaemonVersionRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeDaemonVersionRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeDaemonVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeDaemonVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeDaemonVersionRequestMultiError) AllErrors() []error { return m }

// ChangeDaemonVersionRequestValidationError is the validation error returned
// by ChangeDaemonVersionRequest.Validate if the designated constraints aren't met.
type ChangeDaemonVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeDaemonVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeDaemonVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeDaemonVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeDaemonVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeDaemonVersionRequestValidationError) ErrorName() string {
	return "ChangeDaemonVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeDaemonVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeDaemonVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeDaemonVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeDaemonVersionRequestValidationError{}

// Validate checks the field values on ChangeDaemonVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeDaemonVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeDaemonVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeDaemonVersionResponseMultiError, or nil if none found.
func (m *ChangeDaemonVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeDaemonVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeDaemonVersionResponseMultiError(errors)
	}

	return nil
}

// ChangeDaemonVersionResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeDaemonVersionResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeDaemonVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeDaemonVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeDaemonVersionResponseMultiError) AllErrors() []error { return m }

// ChangeDaemonVersionResponseValidationError is the validation error returned
// by ChangeDaemonVersionResponse.Validate if the designated constraints
// aren't met.
type ChangeDaemonVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeDaemonVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeDaemonVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeDaemonVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeDaemonVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeDaemonVersionResponseValidationError) ErrorName() string {
	return "ChangeDaemonVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeDaemonVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeDaemonVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeDaemonVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeDaemonVersionResponseValidationError{}

// Validate checks the field values on InstallOSUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallOSUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallOSUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallOSUpdateRequestMultiError, or nil if none found.
func (m *InstallOSUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallOSUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InstallOSUpdateRequestMultiError(errors)
	}

	return nil
}

// InstallOSUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by InstallOSUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type InstallOSUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallOSUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallOSUpdateRequestMultiError) AllErrors() []error { return m }

// InstallOSUpdateRequestValidationError is the validation error returned by
// InstallOSUpdateRequest.Validate if the designated constraints aren't met.
type InstallOSUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallOSUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallOSUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallOSUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallOSUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallOSUpdateRequestValidationError) ErrorName() string {
	return "InstallOSUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstallOSUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallOSUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallOSUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallOSUpdateRequestValidationError{}

// Validate checks the field values on InstallOSUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallOSUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallOSUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallOSUpdateResponseMultiError, or nil if none found.
func (m *InstallOSUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallOSUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InstallOSUpdateResponseMultiError(errors)
	}

	return nil
}

// InstallOSUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by InstallOSUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type InstallOSUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallOSUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallOSUpdateResponseMultiError) AllErrors() []error { return m }

// InstallOSUpdateResponseValidationError is the validation error returned by
// InstallOSUpdateResponse.Validate if the designated constraints aren't met.
type InstallOSUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallOSUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallOSUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallOSUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallOSUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallOSUpdateResponseValidationError) ErrorName() string {
	return "InstallOSUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstallOSUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallOSUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallOSUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallOSUpdateResponseValidationError{}

// Validate checks the field values on SetSystemImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSystemImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSystemImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSystemImageRequestMultiError, or nil if none found.
func (m *SetSystemImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSystemImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrentImage

	// no validation rules for RequestedImage

	if len(errors) > 0 {
		return SetSystemImageRequestMultiError(errors)
	}

	return nil
}

// SetSystemImageRequestMultiError is an error wrapping multiple validation
// errors returned by SetSystemImageRequest.ValidateAll() if the designated
// constraints aren't met.
type SetSystemImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSystemImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSystemImageRequestMultiError) AllErrors() []error { return m }

// SetSystemImageRequestValidationError is the validation error returned by
// SetSystemImageRequest.Validate if the designated constraints aren't met.
type SetSystemImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSystemImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSystemImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSystemImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSystemImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSystemImageRequestValidationError) ErrorName() string {
	return "SetSystemImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSystemImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSystemImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSystemImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSystemImageRequestValidationError{}

// Validate checks the field values on SetSystemImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSystemImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSystemImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSystemImageResponseMultiError, or nil if none found.
func (m *SetSystemImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSystemImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetSystemImageResponseMultiError(errors)
	}

	return nil
}

// SetSystemImageResponseMultiError is an error wrapping multiple validation
// errors returned by SetSystemImageResponse.ValidateAll() if the designated
// constraints aren't met.
type SetSystemImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSystemImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSystemImageResponseMultiError) AllErrors() []error { return m }

// SetSystemImageResponseValidationError is the validation error returned by
// SetSystemImageResponse.Validate if the designated constraints aren't met.
type SetSystemImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSystemImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSystemImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSystemImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSystemImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSystemImageResponseValidationError) ErrorName() string {
	return "SetSystemImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetSystemImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSystemImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSystemImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSystemImageResponseValidationError{}

// Validate checks the field values on AppsHealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppsHealthCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppsHealthCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppsHealthCheckRequestMultiError, or nil if none found.
func (m *AppsHealthCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppsHealthCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AppsHealthCheckRequestMultiError(errors)
	}

	return nil
}

// AppsHealthCheckRequestMultiError is an error wrapping multiple validation
// errors returned by AppsHealthCheckRequest.ValidateAll() if the designated
// constraints aren't met.
type AppsHealthCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppsHealthCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppsHealthCheckRequestMultiError) AllErrors() []error { return m }

// AppsHealthCheckRequestValidationError is the validation error returned by
// AppsHealthCheckRequest.Validate if the designated constraints aren't met.
type AppsHealthCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppsHealthCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppsHealthCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppsHealthCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppsHealthCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppsHealthCheckRequestValidationError) ErrorName() string {
	return "AppsHealthCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AppsHealthCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppsHealthCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppsHealthCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppsHealthCheckRequestValidationError{}

// Validate checks the field values on AppsHealthCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppsHealthCheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppsHealthCheckResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppsHealthCheckResponseMultiError, or nil if none found.
func (m *AppsHealthCheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AppsHealthCheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChecks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppsHealthCheckResponseValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppsHealthCheckResponseValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppsHealthCheckResponseValidationError{
					field:  fmt.Sprintf("Checks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AppsHealthCheckResponseMultiError(errors)
	}

	return nil
}

// AppsHealthCheckResponseMultiError is an error wrapping multiple validation
// errors returned by AppsHealthCheckResponse.ValidateAll() if the designated
// constraints aren't met.
type AppsHealthCheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppsHealthCheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppsHealthCheckResponseMultiError) AllErrors() []error { return m }

// AppsHealthCheckResponseValidationError is the validation error returned by
// AppsHealthCheckResponse.Validate if the designated constraints aren't met.
type AppsHealthCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppsHealthCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppsHealthCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppsHealthCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppsHealthCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppsHealthCheckResponseValidationError) ErrorName() string {
	return "AppsHealthCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AppsHealthCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppsHealthCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppsHealthCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppsHealthCheckResponseValidationError{}

// Validate checks the field values on AppHealth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppHealth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppHealth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppHealthMultiError, or nil
// if none found.
func (m *AppHealth) ValidateAll() error {
	return m.validate(true)
}

func (m *AppHealth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetDisplay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppHealthValidationError{
					field:  "Display",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppHealthValidationError{
					field:  "Display",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisplay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppHealthValidationError{
				field:  "Display",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppHealthMultiError(errors)
	}

	return nil
}

// AppHealthMultiError is an error wrapping multiple validation errors returned
// by AppHealth.ValidateAll() if the designated constraints aren't met.
type AppHealthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppHealthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppHealthMultiError) AllErrors() []error { return m }

// AppHealthValidationError is the validation error returned by
// AppHealth.Validate if the designated constraints aren't met.
type AppHealthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppHealthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppHealthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppHealthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppHealthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppHealthValidationError) ErrorName() string { return "AppHealthValidationError" }

// Error satisfies the builtin error interface
func (e AppHealthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppHealth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppHealthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppHealthValidationError{}

// Validate checks the field values on AppDisplay with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppDisplay) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppDisplay with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppDisplayMultiError, or
// nil if none found.
func (m *AppDisplay) ValidateAll() error {
	return m.validate(true)
}

func (m *AppDisplay) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for IconUrl

	// no validation rules for Description

	if len(errors) > 0 {
		return AppDisplayMultiError(errors)
	}

	return nil
}

// AppDisplayMultiError is an error wrapping multiple validation errors
// returned by AppDisplay.ValidateAll() if the designated constraints aren't met.
type AppDisplayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppDisplayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppDisplayMultiError) AllErrors() []error { return m }

// AppDisplayValidationError is the validation error returned by
// AppDisplay.Validate if the designated constraints aren't met.
type AppDisplayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppDisplayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppDisplayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppDisplayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppDisplayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppDisplayValidationError) ErrorName() string { return "AppDisplayValidationError" }

// Error satisfies the builtin error interface
func (e AppDisplayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppDisplay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppDisplayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppDisplayValidationError{}

// Validate checks the field values on GetSystemStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemStatsRequestMultiError, or nil if none found.
func (m *GetSystemStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSystemStatsRequestMultiError(errors)
	}

	return nil
}

// GetSystemStatsRequestMultiError is an error wrapping multiple validation
// errors returned by GetSystemStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSystemStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemStatsRequestMultiError) AllErrors() []error { return m }

// GetSystemStatsRequestValidationError is the validation error returned by
// GetSystemStatsRequest.Validate if the designated constraints aren't met.
type GetSystemStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemStatsRequestValidationError) ErrorName() string {
	return "GetSystemStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemStatsRequestValidationError{}

// Validate checks the field values on GetSystemStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemStatsResponseMultiError, or nil if none found.
func (m *GetSystemStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemStatsResponseValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSystemStatsResponseMultiError(errors)
	}

	return nil
}

// GetSystemStatsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSystemStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSystemStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemStatsResponseMultiError) AllErrors() []error { return m }

// GetSystemStatsResponseValidationError is the validation error returned by
// GetSystemStatsResponse.Validate if the designated constraints aren't met.
type GetSystemStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemStatsResponseValidationError) ErrorName() string {
	return "GetSystemStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemStatsResponseValidationError{}

// Validate checks the field values on IsDeviceSetupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsDeviceSetupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsDeviceSetupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsDeviceSetupRequestMultiError, or nil if none found.
func (m *IsDeviceSetupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsDeviceSetupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IsDeviceSetupRequestMultiError(errors)
	}

	return nil
}

// IsDeviceSetupRequestMultiError is an error wrapping multiple validation
// errors returned by IsDeviceSetupRequest.ValidateAll() if the designated
// constraints aren't met.
type IsDeviceSetupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsDeviceSetupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsDeviceSetupRequestMultiError) AllErrors() []error { return m }

// IsDeviceSetupRequestValidationError is the validation error returned by
// IsDeviceSetupRequest.Validate if the designated constraints aren't met.
type IsDeviceSetupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeviceSetupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeviceSetupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeviceSetupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeviceSetupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeviceSetupRequestValidationError) ErrorName() string {
	return "IsDeviceSetupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeviceSetupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeviceSetupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeviceSetupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeviceSetupRequestValidationError{}

// Validate checks the field values on IsDeviceSetupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsDeviceSetupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsDeviceSetupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsDeviceSetupResponseMultiError, or nil if none found.
func (m *IsDeviceSetupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsDeviceSetupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Setup

	if len(errors) > 0 {
		return IsDeviceSetupResponseMultiError(errors)
	}

	return nil
}

// IsDeviceSetupResponseMultiError is an error wrapping multiple validation
// errors returned by IsDeviceSetupResponse.ValidateAll() if the designated
// constraints aren't met.
type IsDeviceSetupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsDeviceSetupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsDeviceSetupResponseMultiError) AllErrors() []error { return m }

// IsDeviceSetupResponseValidationError is the validation error returned by
// IsDeviceSetupResponse.Validate if the designated constraints aren't met.
type IsDeviceSetupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsDeviceSetupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsDeviceSetupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsDeviceSetupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsDeviceSetupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsDeviceSetupResponseValidationError) ErrorName() string {
	return "IsDeviceSetupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsDeviceSetupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsDeviceSetupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsDeviceSetupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsDeviceSetupResponseValidationError{}

// Validate checks the field values on InitializeDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitializeDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitializeDeviceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitializeDeviceRequestMultiError, or nil if none found.
func (m *InitializeDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitializeDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 4 {
		err := InitializeDeviceRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 4 {
		err := InitializeDeviceRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTimezone()) < 7 {
		err := InitializeDeviceRequestValidationError{
			field:  "Timezone",
			reason: "value length must be at least 7 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AutoUpdateApps

	// no validation rules for AutoUpdateOs

	if len(errors) > 0 {
		return InitializeDeviceRequestMultiError(errors)
	}

	return nil
}

// InitializeDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by InitializeDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type InitializeDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitializeDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitializeDeviceRequestMultiError) AllErrors() []error { return m }

// InitializeDeviceRequestValidationError is the validation error returned by
// InitializeDeviceRequest.Validate if the designated constraints aren't met.
type InitializeDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitializeDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitializeDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitializeDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitializeDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitializeDeviceRequestValidationError) ErrorName() string {
	return "InitializeDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitializeDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitializeDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitializeDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitializeDeviceRequestValidationError{}

// Validate checks the field values on InitializeDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitializeDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitializeDeviceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitializeDeviceResponseMultiError, or nil if none found.
func (m *InitializeDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitializeDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Setup

	if len(errors) > 0 {
		return InitializeDeviceResponseMultiError(errors)
	}

	return nil
}

// InitializeDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by InitializeDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type InitializeDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitializeDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitializeDeviceResponseMultiError) AllErrors() []error { return m }

// InitializeDeviceResponseValidationError is the validation error returned by
// InitializeDeviceResponse.Validate if the designated constraints aren't met.
type InitializeDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitializeDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitializeDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitializeDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitializeDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitializeDeviceResponseValidationError) ErrorName() string {
	return "InitializeDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitializeDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitializeDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitializeDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitializeDeviceResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on GetAppsInStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppsInStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppsInStoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppsInStoreRequestMultiError, or nil if none found.
func (m *GetAppsInStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppsInStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAppsInStoreRequestMultiError(errors)
	}

	return nil
}

// GetAppsInStoreRequestMultiError is an error wrapping multiple validation
// errors returned by GetAppsInStoreRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAppsInStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppsInStoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppsInStoreRequestMultiError) AllErrors() []error { return m }

// GetAppsInStoreRequestValidationError is the validation error returned by
// GetAppsInStoreRequest.Validate if the designated constraints aren't met.
type GetAppsInStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppsInStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppsInStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppsInStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppsInStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppsInStoreRequestValidationError) ErrorName() string {
	return "GetAppsInStoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppsInStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppsInStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppsInStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppsInStoreRequestValidationError{}

// Validate checks the field values on GetAppsInStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppsInStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppsInStoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppsInStoreResponseMultiError, or nil if none found.
func (m *GetAppsInStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppsInStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppsInStoreResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppsInStoreResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppsInStoreResponseValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAppsInStoreResponseMultiError(errors)
	}

	return nil
}

// GetAppsInStoreResponseMultiError is an error wrapping multiple validation
// errors returned by GetAppsInStoreResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAppsInStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppsInStoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppsInStoreResponseMultiError) AllErrors() []error { return m }

// GetAppsInStoreResponseValidationError is the validation error returned by
// GetAppsInStoreResponse.Validate if the designated constraints aren't met.
type GetAppsInStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppsInStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppsInStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppsInStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppsInStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppsInStoreResponseValidationError) ErrorName() string {
	return "GetAppsInStoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppsInStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppsInStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppsInStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppsInStoreResponseValidationError{}

// Validate checks the field values on GetDeviceSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceSettingsRequestMultiError, or nil if none found.
func (m *GetDeviceSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDeviceSettingsRequestMultiError(errors)
	}

	return nil
}

// GetDeviceSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by GetDeviceSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDeviceSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceSettingsRequestMultiError) AllErrors() []error { return m }

// GetDeviceSettingsRequestValidationError is the validation error returned by
// GetDeviceSettingsRequest.Validate if the designated constraints aren't met.
type GetDeviceSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceSettingsRequestValidationError) ErrorName() string {
	return "GetDeviceSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceSettingsRequestValidationError{}

// Validate checks the field values on GetDeviceSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceSettingsResponseMultiError, or nil if none found.
func (m *GetDeviceSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeviceSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeviceSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeviceSettingsResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeviceSettingsResponseMultiError(errors)
	}

	return nil
}

// GetDeviceSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetDeviceSettingsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetDeviceSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceSettingsResponseMultiError) AllErrors() []error { return m }

// GetDeviceSettingsResponseValidationError is the validation error returned by
// GetDeviceSettingsResponse.Validate if the designated constraints aren't met.
type GetDeviceSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceSettingsResponseValidationError) ErrorName() string {
	return "GetDeviceSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceSettingsResponseValidationError{}

// Validate checks the field values on SetDeviceSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDeviceSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDeviceSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDeviceSettingsRequestMultiError, or nil if none found.
func (m *SetDeviceSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDeviceSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetDeviceSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetDeviceSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDeviceSettingsRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetDeviceSettingsRequestMultiError(errors)
	}

	return nil
}

// SetDeviceSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by SetDeviceSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetDeviceSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDeviceSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDeviceSettingsRequestMultiError) AllErrors() []error { return m }

// SetDeviceSettingsRequestValidationError is the validation error returned by
// SetDeviceSettingsRequest.Validate if the designated constraints aren't met.
type SetDeviceSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDeviceSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDeviceSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDeviceSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDeviceSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDeviceSettingsRequestValidationError) ErrorName() string {
	return "SetDeviceSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDeviceSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDeviceSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDeviceSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDeviceSettingsRequestValidationError{}

// Validate checks the field values on SetDeviceSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDeviceSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDeviceSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDeviceSettingsResponseMultiError, or nil if none found.
func (m *SetDeviceSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDeviceSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetDeviceSettingsResponseMultiError(errors)
	}

	return nil
}

// SetDeviceSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by SetDeviceSettingsResponse.ValidateAll() if the
// designated constraints aren't met.
type SetDeviceSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDeviceSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDeviceSettingsResponseMultiError) AllErrors() []error { return m }

// SetDeviceSettingsResponseValidationError is the validation error returned by
// SetDeviceSettingsResponse.Validate if the designated constraints aren't met.
type SetDeviceSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDeviceSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDeviceSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDeviceSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDeviceSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDeviceSettingsResponseValidationError) ErrorName() string {
	return "SetDeviceSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDeviceSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDeviceSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDeviceSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDeviceSettingsResponseValidationError{}

// Validate checks the field values on GetAppStorageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppStorageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppStorageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppStorageRequestMultiError, or nil if none found.
func (m *GetAppStorageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppStorageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAppStorageRequestMultiError(errors)
	}

	return nil
}

// GetAppStorageRequestMultiError is an error wrapping multiple validation
// errors returned by GetAppStorageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAppStorageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppStorageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppStorageRequestMultiError) AllErrors() []error { return m }

// GetAppStorageRequestValidationError is the validation error returned by
// GetAppStorageRequest.Validate if the designated constraints aren't met.
type GetAppStorageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppStorageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppStorageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppStorageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppStorageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppStorageRequestValidationError) ErrorName() string {
	return "GetAppStorageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppStorageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppStorageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppStorageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppStorageRequestValidationError{}

// Validate checks the field values on GetAppStorageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppStorageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppStorageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppStorageResponseMultiError, or nil if none found.
func (m *GetAppStorageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppStorageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppStorageResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppStorageResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppStorageResponseValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAppStorageResponseMultiError(errors)
	}

	return nil
}

// GetAppStorageResponseMultiError is an error wrapping multiple validation
// errors returned by GetAppStorageResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAppStorageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppStorageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppStorageResponseMultiError) AllErrors() []error { return m }

// GetAppStorageResponseValidationError is the validation error returned by
// GetAppStorageResponse.Validate if the designated constraints aren't met.
type GetAppStorageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppStorageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppStorageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppStorageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppStorageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppStorageResponseValidationError) ErrorName() string {
	return "GetAppStorageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppStorageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppStorageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppStorageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppStorageResponseValidationError{}

// Validate checks the field values on AppStorage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppStorage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppStorage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppStorageMultiError, or
// nil if none found.
func (m *AppStorage) ValidateAll() error {
	return m.validate(true)
}

func (m *AppStorage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppName

	if len(errors) > 0 {
		return AppStorageMultiError(errors)
	}

	return nil
}

// AppStorageMultiError is an error wrapping multiple validation errors
// returned by AppStorage.ValidateAll() if the designated constraints aren't met.
type AppStorageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppStorageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppStorageMultiError) AllErrors() []error { return m }

// AppStorageValidationError is the validation error returned by
// AppStorage.Validate if the designated constraints aren't met.
type AppStorageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppStorageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppStorageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppStorageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppStorageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppStorageValidationError) ErrorName() string { return "AppStorageValidationError" }

// Error satisfies the builtin error interface
func (e AppStorageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppStorage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppStorageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppStorageValidationError{}

// Validate checks the field values on EnableSecureTunnellingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableSecureTunnellingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableSecureTunnellingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EnableSecureTunnellingRequestMultiError, or nil if none found.
func (m *EnableSecureTunnellingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableSecureTunnellingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableSecureTunnellingRequestMultiError(errors)
	}

	return nil
}

// EnableSecureTunnellingRequestMultiError is an error wrapping multiple
// validation errors returned by EnableSecureTunnellingRequest.ValidateAll()
// if the designated constraints aren't met.
type EnableSecureTunnellingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableSecureTunnellingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableSecureTunnellingRequestMultiError) AllErrors() []error { return m }

// EnableSecureTunnellingRequestValidationError is the validation error
// returned by EnableSecureTunnellingRequest.Validate if the designated
// constraints aren't met.
type EnableSecureTunnellingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableSecureTunnellingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableSecureTunnellingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableSecureTunnellingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableSecureTunnellingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableSecureTunnellingRequestValidationError) ErrorName() string {
	return "EnableSecureTunnellingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableSecureTunnellingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableSecureTunnellingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableSecureTunnellingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableSecureTunnellingRequestValidationError{}

// Validate checks the field values on EnableSecureTunnellingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableSecureTunnellingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableSecureTunnellingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EnableSecureTunnellingResponseMultiError, or nil if none found.
func (m *EnableSecureTunnellingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableSecureTunnellingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableSecureTunnellingResponseMultiError(errors)
	}

	return nil
}

// EnableSecureTunnellingResponseMultiError is an error wrapping multiple
// validation errors returned by EnableSecureTunnellingResponse.ValidateAll()
// if the designated constraints aren't met.
type EnableSecureTunnellingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableSecureTunnellingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableSecureTunnellingResponseMultiError) AllErrors() []error { return m }

// EnableSecureTunnellingResponseValidationError is the validation error
// returned by EnableSecureTunnellingResponse.Validate if the designated
// constraints aren't met.
type EnableSecureTunnellingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableSecureTunnellingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableSecureTunnellingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableSecureTunnellingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableSecureTunnellingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableSecureTunnellingResponseValidationError) ErrorName() string {
	return "EnableSecureTunnellingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableSecureTunnellingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableSecureTunnellingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableSecureTunnellingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableSecureTunnellingResponseValidationError{}

// Validate checks the field values on DisableSecureTunnellingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableSecureTunnellingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableSecureTunnellingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DisableSecureTunnellingRequestMultiError, or nil if none found.
func (m *DisableSecureTunnellingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableSecureTunnellingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableSecureTunnellingRequestMultiError(errors)
	}

	return nil
}

// DisableSecureTunnellingRequestMultiError is an error wrapping multiple
// validation errors returned by DisableSecureTunnellingRequest.ValidateAll()
// if the designated constraints aren't met.
type DisableSecureTunnellingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableSecureTunnellingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableSecureTunnellingRequestMultiError) AllErrors() []error { return m }

// DisableSecureTunnellingRequestValidationError is the validation error
// returned by DisableSecureTunnellingRequest.Validate if the designated
// constraints aren't met.
type DisableSecureTunnellingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableSecureTunnellingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableSecureTunnellingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableSecureTunnellingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableSecureTunnellingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableSecureTunnellingRequestValidationError) ErrorName() string {
	return "DisableSecureTunnellingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableSecureTunnellingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableSecureTunnellingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableSecureTunnellingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableSecureTunnellingRequestValidationError{}

// Validate checks the field values on DisableSecureTunnellingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableSecureTunnellingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableSecureTunnellingResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DisableSecureTunnellingResponseMultiError, or nil if none found.
func (m *DisableSecureTunnellingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableSecureTunnellingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableSecureTunnellingResponseMultiError(errors)
	}

	return nil
}

// DisableSecureTunnellingResponseMultiError is an error wrapping multiple
// validation errors returned by DisableSecureTunnellingResponse.ValidateAll()
// if the designated constraints aren't met.
type DisableSecureTunnellingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableSecureTunnellingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableSecureTunnellingResponseMultiError) AllErrors() []error { return m }

// DisableSecureTunnellingResponseValidationError is the validation error
// returned by DisableSecureTunnellingResponse.Validate if the designated
// constraints aren't met.
type DisableSecureTunnellingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableSecureTunnellingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableSecureTunnellingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableSecureTunnellingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableSecureTunnellingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableSecureTunnellingResponseValidationError) ErrorName() string {
	return "DisableSecureTunnellingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableSecureTunnellingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableSecureTunnellingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableSecureTunnellingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableSecureTunnellingResponseValidationError{}

// Validate checks the field values on RegisterToLocatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterToLocatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterToLocatorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterToLocatorRequestMultiError, or nil if none found.
func (m *RegisterToLocatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterToLocatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocatorAddress

	if len(errors) > 0 {
		return RegisterToLocatorRequestMultiError(errors)
	}

	return nil
}

// RegisterToLocatorRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterToLocatorRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterToLocatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterToLocatorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterToLocatorRequestMultiError) AllErrors() []error { return m }

// RegisterToLocatorRequestValidationError is the validation error returned by
// RegisterToLocatorRequest.Validate if the designated constraints aren't met.
type RegisterToLocatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterToLocatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterToLocatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterToLocatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterToLocatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterToLocatorRequestValidationError) ErrorName() string {
	return "RegisterToLocatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterToLocatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterToLocatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterToLocatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterToLocatorRequestValidationError{}

// Validate checks the field values on RegisterToLocatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterToLocatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterToLocatorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterToLocatorResponseMultiError, or nil if none found.
func (m *RegisterToLocatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterToLocatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLocator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterToLocatorResponseValidationError{
					field:  "Locator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterToLocatorResponseValidationError{
					field:  "Locator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterToLocatorResponseValidationError{
				field:  "Locator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterToLocatorResponseMultiError(errors)
	}

	return nil
}

// RegisterToLocatorResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterToLocatorResponse.ValidateAll() if the
// designated constraints aren't met.
type RegisterToLocatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterToLocatorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterToLocatorResponseMultiError) AllErrors() []error { return m }

// RegisterToLocatorResponseValidationError is the validation error returned by
// RegisterToLocatorResponse.Validate if the designated constraints aren't met.
type RegisterToLocatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterToLocatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterToLocatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterToLocatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterToLocatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterToLocatorResponseValidationError) ErrorName() string {
	return "RegisterToLocatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterToLocatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterToLocatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterToLocatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterToLocatorResponseValidationError{}

// Validate checks the field values on DeregisterFromLocatorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeregisterFromLocatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeregisterFromLocatorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeregisterFromLocatorRequestMultiError, or nil if none found.
func (m *DeregisterFromLocatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeregisterFromLocatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocatorAddress

	if len(errors) > 0 {
		return DeregisterFromLocatorRequestMultiError(errors)
	}

	return nil
}

// DeregisterFromLocatorRequestMultiError is an error wrapping multiple
// validation errors returned by DeregisterFromLocatorRequest.ValidateAll() if
// the designated constraints aren't met.
type DeregisterFromLocatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeregisterFromLocatorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeregisterFromLocatorRequestMultiError) AllErrors() []error { return m }

// DeregisterFromLocatorRequestValidationError is the validation error returned
// by DeregisterFromLocatorRequest.Validate if the designated constraints
// aren't met.
type DeregisterFromLocatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeregisterFromLocatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeregisterFromLocatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeregisterFromLocatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeregisterFromLocatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeregisterFromLocatorRequestValidationError) ErrorName() string {
	return "DeregisterFromLocatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeregisterFromLocatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeregisterFromLocatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeregisterFromLocatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeregisterFromLocatorRequestValidationError{}

// Validate checks the field values on DeregisterFromLocatorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeregisterFromLocatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeregisterFromLocatorResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeregisterFromLocatorResponseMultiError, or nil if none found.
func (m *DeregisterFromLocatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeregisterFromLocatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocatorAddress

	if len(errors) > 0 {
		return DeregisterFromLocatorResponseMultiError(errors)
	}

	return nil
}

// DeregisterFromLocatorResponseMultiError is an error wrapping multiple
// validation errors returned by DeregisterFromLocatorResponse.ValidateAll()
// if the designated constraints aren't met.
type DeregisterFromLocatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeregisterFromLocatorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeregisterFromLocatorResponseMultiError) AllErrors() []error { return m }

// DeregisterFromLocatorResponseValidationError is the validation error
// returned by DeregisterFromLocatorResponse.Validate if the designated
// constraints aren't met.
type DeregisterFromLocatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeregisterFromLocatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeregisterFromLocatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeregisterFromLocatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeregisterFromLocatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeregisterFromLocatorResponseValidationError) ErrorName() string {
	return "DeregisterFromLocatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeregisterFromLocatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeregisterFromLocatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeregisterFromLocatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeregisterFromLocatorResponseValidationError{}

// Validate checks the field values on GetComponentVersionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetComponentVersionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetComponentVersionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetComponentVersionsRequestMultiError, or nil if none found.
func (m *GetComponentVersionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetComponentVersionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetComponentVersionsRequestMultiError(errors)
	}

	return nil
}

// GetComponentVersionsRequestMultiError is an error wrapping multiple
// validation errors returned by GetComponentVersionsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetComponentVersionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetComponentVersionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetComponentVersionsRequestMultiError) AllErrors() []error { return m }

// GetComponentVersionsRequestValidationError is the validation error returned
// by GetComponentVersionsRequest.Validate if the designated constraints
// aren't met.
type GetComponentVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetComponentVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetComponentVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetComponentVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetComponentVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetComponentVersionsRequestValidationError) ErrorName() string {
	return "GetComponentVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetComponentVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetComponentVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetComponentVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetComponentVersionsRequestValidationError{}

// Validate checks the field values on GetComponentVersionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetComponentVersionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetComponentVersionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetComponentVersionsResponseMultiError, or nil if none found.
func (m *GetComponentVersionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetComponentVersionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPlatform() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetComponentVersionsResponseValidationError{
						field:  fmt.Sprintf("Platform[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetComponentVersionsResponseValidationError{
						field:  fmt.Sprintf("Platform[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetComponentVersionsResponseValidationError{
					field:  fmt.Sprintf("Platform[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSystem() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetComponentVersionsResponseValidationError{
						field:  fmt.Sprintf("System[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetComponentVersionsResponseValidationError{
						field:  fmt.Sprintf("System[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetComponentVersionsResponseValidationError{
					field:  fmt.Sprintf("System[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetComponentVersionsResponseMultiError(errors)
	}

	return nil
}

// GetComponentVersionsResponseMultiError is an error wrapping multiple
// validation errors returned by GetComponentVersionsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetComponentVersionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetComponentVersionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetComponentVersionsResponseMultiError) AllErrors() []error { return m }

// GetComponentVersionsResponseValidationError is the validation error returned
// by GetComponentVersionsResponse.Validate if the designated constraints
// aren't met.
type GetComponentVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetComponentVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetComponentVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetComponentVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetComponentVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetComponentVersionsResponseValidationError) ErrorName() string {
	return "GetComponentVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetComponentVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetComponentVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetComponentVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetComponentVersionsResponseValidationError{}

// Validate checks the field values on Apps with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Apps) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Apps with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppsMultiError, or nil if none found.
func (m *Apps) ValidateAll() error {
	return m.validate(true)
}

func (m *Apps) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppsValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppsValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppsValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AppsMultiError(errors)
	}

	return nil
}

// AppsMultiError is an error wrapping multiple validation errors returned by
// Apps.ValidateAll() if the designated constraints aren't met.
type AppsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppsMultiError) AllErrors() []error { return m }

// AppsValidationError is the validation error returned by Apps.Validate if the
// designated constraints aren't met.
type AppsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppsValidationError) ErrorName() string { return "AppsValidationError" }

// Error satisfies the builtin error interface
func (e AppsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApps.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppsValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on App with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppMultiError, or nil if none found.
func (m *App) ValidateAll() error {
	return m.validate(true)
}

func (m *App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for AppVersion

	// no validation rules for Description

	// no validation rules for Icon

	// no validation rules for Created

	// no validation rules for Digest

	// no validation rules for Type

	for idx, item := range m.GetDependencies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppValidationError{
						field:  fmt.Sprintf("Dependencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppValidationError{
						field:  fmt.Sprintf("Dependencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppValidationError{
					field:  fmt.Sprintf("Dependencies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Home

	// no validation rules for Annotations

	// no validation rules for Readme

	// no validation rules for Installed

	if len(errors) > 0 {
		return AppMultiError(errors)
	}

	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.ValidateAll() if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on AppDependency with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppDependency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppDependency with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppDependencyMultiError, or
// nil if none found.
func (m *AppDependency) ValidateAll() error {
	return m.validate(true)
}

func (m *AppDependency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Repository

	if len(errors) > 0 {
		return AppDependencyMultiError(errors)
	}

	return nil
}

// AppDependencyMultiError is an error wrapping multiple validation errors
// returned by AppDependency.ValidateAll() if the designated constraints
// aren't met.
type AppDependencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppDependencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppDependencyMultiError) AllErrors() []error { return m }

// AppDependencyValidationError is the validation error returned by
// AppDependency.Validate if the designated constraints aren't met.
type AppDependencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppDependencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppDependencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppDependencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppDependencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppDependencyValidationError) ErrorName() string { return "AppDependencyValidationError" }

// Error satisfies the builtin error interface
func (e AppDependencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppDependency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppDependencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppDependencyValidationError{}

// Validate checks the field values on AppRunningStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppRunningStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppRunningStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppRunningStatusMultiError, or nil if none found.
func (m *AppRunningStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *AppRunningStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Status

	if len(errors) > 0 {
		return AppRunningStatusMultiError(errors)
	}

	return nil
}

// AppRunningStatusMultiError is an error wrapping multiple validation errors
// returned by AppRunningStatus.ValidateAll() if the designated constraints
// aren't met.
type AppRunningStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppRunningStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppRunningStatusMultiError) AllErrors() []error { return m }

// AppRunningStatusValidationError is the validation error returned by
// AppRunningStatus.Validate if the designated constraints aren't met.
type AppRunningStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppRunningStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppRunningStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppRunningStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppRunningStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppRunningStatusValidationError) ErrorName() string { return "AppRunningStatusValidationError" }

// Error satisfies the builtin error interface
func (e AppRunningStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppRunningStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppRunningStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppRunningStatusValidationError{}

// Validate checks the field values on Entries with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Entries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Entries with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EntriesMultiError, or nil if none found.
func (m *Entries) ValidateAll() error {
	return m.validate(true)
}

func (m *Entries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntriesValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntriesValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntriesValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EntriesMultiError(errors)
	}

	return nil
}

// EntriesMultiError is an error wrapping multiple validation errors returned
// by Entries.ValidateAll() if the designated constraints aren't met.
type EntriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntriesMultiError) AllErrors() []error { return m }

// EntriesValidationError is the validation error returned by Entries.Validate
// if the designated constraints aren't met.
type EntriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntriesValidationError) ErrorName() string { return "EntriesValidationError" }

// Error satisfies the builtin error interface
func (e EntriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntriesValidationError{}

// Validate checks the field values on InstalledApp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InstalledApp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstalledApp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstalledAppMultiError, or
// nil if none found.
func (m *InstalledApp) ValidateAll() error {
	return m.validate(true)
}

func (m *InstalledApp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstalledAppValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstalledAppValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstalledAppValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstalledAppValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstalledAppValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstalledAppValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstalledAppMultiError(errors)
	}

	return nil
}

// InstalledAppMultiError is an error wrapping multiple validation errors
// returned by InstalledApp.ValidateAll() if the designated constraints aren't met.
type InstalledAppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstalledAppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstalledAppMultiError) AllErrors() []error { return m }

// InstalledAppValidationError is the validation error returned by
// InstalledApp.Validate if the designated constraints aren't met.
type InstalledAppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstalledAppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstalledAppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstalledAppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstalledAppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstalledAppValidationError) ErrorName() string { return "InstalledAppValidationError" }

// Error satisfies the builtin error interface
func (e InstalledAppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstalledApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstalledAppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstalledAppValidationError{}

// Validate checks the field values on AppStoreEntries with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppStoreEntries) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppStoreEntries with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppStoreEntriesMultiError, or nil if none found.
func (m *AppStoreEntries) ValidateAll() error {
	return m.validate(true)
}

func (m *AppStoreEntries) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for Generated

	{
		sorted_keys := make([]string, len(m.GetEntries()))
		i := 0
		for key := range m.GetEntries() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEntries()[key]
			_ = val

			// no validation rules for Entries[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AppStoreEntriesValidationError{
							field:  fmt.Sprintf("Entries[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AppStoreEntriesValidationError{
							field:  fmt.Sprintf("Entries[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AppStoreEntriesValidationError{
						field:  fmt.Sprintf("Entries[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return AppStoreEntriesMultiError(errors)
	}

	return nil
}

// AppStoreEntriesMultiError is an error wrapping multiple validation errors
// returned by AppStoreEntries.ValidateAll() if the designated constraints
// aren't met.
type AppStoreEntriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppStoreEntriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppStoreEntriesMultiError) AllErrors() []error { return m }

// AppStoreEntriesValidationError is the validation error returned by
// AppStoreEntries.Validate if the designated constraints aren't met.
type AppStoreEntriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppStoreEntriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppStoreEntriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppStoreEntriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppStoreEntriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppStoreEntriesValidationError) ErrorName() string { return "AppStoreEntriesValidationError" }

// Error satisfies the builtin error interface
func (e AppStoreEntriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppStoreEntries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppStoreEntriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppStoreEntriesValidationError{}

// Validate checks the field values on DeviceSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceSettingsMultiError,
// or nil if none found.
func (m *DeviceSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAdminUser() == nil {
		err := DeviceSettingsValidationError{
			field:  "AdminUser",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAdminUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceSettingsValidationError{
					field:  "AdminUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceSettingsValidationError{
					field:  "AdminUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdminUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceSettingsValidationError{
				field:  "AdminUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetTimezone()) < 7 {
		err := DeviceSettingsValidationError{
			field:  "Timezone",
			reason: "value length must be at least 7 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AutoUpdateApps

	// no validation rules for AutoUpdateOs

	// no validation rules for EnableSsh

	if all {
		switch v := interface{}(m.GetLocatorSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceSettingsValidationError{
					field:  "LocatorSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceSettingsValidationError{
					field:  "LocatorSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocatorSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceSettingsValidationError{
				field:  "LocatorSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeviceSettingsMultiError(errors)
	}

	return nil
}

// DeviceSettingsMultiError is an error wrapping multiple validation errors
// returned by DeviceSettings.ValidateAll() if the designated constraints
// aren't met.
type DeviceSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceSettingsMultiError) AllErrors() []error { return m }

// DeviceSettingsValidationError is the validation error returned by
// DeviceSettings.Validate if the designated constraints aren't met.
type DeviceSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceSettingsValidationError) ErrorName() string { return "DeviceSettingsValidationError" }

// Error satisfies the builtin error interface
func (e DeviceSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceSettingsValidationError{}

// Validate checks the field values on LocatorSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LocatorSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocatorSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocatorSettingsMultiError, or nil if none found.
func (m *LocatorSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *LocatorSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	for idx, item := range m.GetLocators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocatorSettingsValidationError{
						field:  fmt.Sprintf("Locators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocatorSettingsValidationError{
						field:  fmt.Sprintf("Locators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocatorSettingsValidationError{
					field:  fmt.Sprintf("Locators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StunServerAddress

	if len(errors) > 0 {
		return LocatorSettingsMultiError(errors)
	}

	return nil
}

// LocatorSettingsMultiError is an error wrapping multiple validation errors
// returned by LocatorSettings.ValidateAll() if the designated constraints
// aren't met.
type LocatorSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocatorSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocatorSettingsMultiError) AllErrors() []error { return m }

// LocatorSettingsValidationError is the validation error returned by
// LocatorSettings.Validate if the designated constraints aren't met.
type LocatorSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocatorSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocatorSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocatorSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocatorSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocatorSettingsValidationError) ErrorName() string { return "LocatorSettingsValidationError" }

// Error satisfies the builtin error interface
func (e LocatorSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocatorSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocatorSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocatorSettingsValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on ServerEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerEventMultiError, or
// nil if none found.
func (m *ServerEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Event.(type) {
	case *ServerEvent_Heartbeat:
		if v == nil {
			err := ServerEventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeartbeat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerEventValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerEventValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeartbeat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerEventValidationError{
					field:  "Heartbeat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerEvent_Error:
		if v == nil {
			err := ServerEventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerEventValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerEventValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerEventValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerEvent_AppInstalled:
		if v == nil {
			err := ServerEventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAppInstalled()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerEventValidationError{
						field:  "AppInstalled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerEventValidationError{
						field:  "AppInstalled",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAppInstalled()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerEventValidationError{
					field:  "AppInstalled",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ServerEventMultiError(errors)
	}

	return nil
}

// ServerEventMultiError is an error wrapping multiple validation errors
// returned by ServerEvent.ValidateAll() if the designated constraints aren't met.
type ServerEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerEventMultiError) AllErrors() []error { return m }

// ServerEventValidationError is the validation error returned by
// ServerEvent.Validate if the designated constraints aren't met.
type ServerEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerEventValidationError) ErrorName() string { return "ServerEventValidationError" }

// Error satisfies the builtin error interface
func (e ServerEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerEventValidationError{}

// Validate checks the field values on HeartbeatEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HeartbeatEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeartbeatEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeartbeatEventMultiError,
// or nil if none found.
func (m *HeartbeatEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *HeartbeatEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeartbeatEventMultiError(errors)
	}

	return nil
}

// HeartbeatEventMultiError is an error wrapping multiple validation errors
// returned by HeartbeatEvent.ValidateAll() if the designated constraints
// aren't met.
type HeartbeatEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartbeatEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartbeatEventMultiError) AllErrors() []error { return m }

// HeartbeatEventValidationError is the validation error returned by
// HeartbeatEvent.Validate if the designated constraints aren't met.
type HeartbeatEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatEventValidationError) ErrorName() string { return "HeartbeatEventValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatEventValidationError{}

// Validate checks the field values on ErrorEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorEventMultiError, or
// nil if none found.
func (m *ErrorEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return ErrorEventMultiError(errors)
	}

	return nil
}

// ErrorEventMultiError is an error wrapping multiple validation errors
// returned by ErrorEvent.ValidateAll() if the designated constraints aren't met.
type ErrorEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorEventMultiError) AllErrors() []error { return m }

// ErrorEventValidationError is the validation error returned by
// ErrorEvent.Validate if the designated constraints aren't met.
type ErrorEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorEventValidationError) ErrorName() string { return "ErrorEventValidationError" }

// Error satisfies the builtin error interface
func (e ErrorEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorEventValidationError{}

// Validate checks the field values on AppInstalledEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppInstalledEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppInstalledEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppInstalledEventMultiError, or nil if none found.
func (m *AppInstalledEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *AppInstalledEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return AppInstalledEventMultiError(errors)
	}

	return nil
}

// AppInstalledEventMultiError is an error wrapping multiple validation errors
// returned by AppInstalledEvent.ValidateAll() if the designated constraints
// aren't met.
type AppInstalledEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppInstalledEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppInstalledEventMultiError) AllErrors() []error { return m }

// AppInstalledEventValidationError is the validation error returned by
// AppInstalledEvent.Validate if the designated constraints aren't met.
type AppInstalledEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppInstalledEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppInstalledEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppInstalledEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppInstalledEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppInstalledEventValidationError) ErrorName() string {
	return "AppInstalledEventValidationError"
}

// Error satisfies the builtin error interface
func (e AppInstalledEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppInstalledEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppInstalledEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppInstalledEventValidationError{}

// Validate checks the field values on RegisterPeerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterPeerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterPeerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterPeerRequestMultiError, or nil if none found.
func (m *RegisterPeerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterPeerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterPeerRequestMultiError(errors)
	}

	return nil
}

// RegisterPeerRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterPeerRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterPeerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterPeerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterPeerRequestMultiError) AllErrors() []error { return m }

// RegisterPeerRequestValidationError is the validation error returned by
// RegisterPeerRequest.Validate if the designated constraints aren't met.
type RegisterPeerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterPeerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterPeerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterPeerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterPeerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterPeerRequestValidationError) ErrorName() string {
	return "RegisterPeerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterPeerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterPeerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterPeerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterPeerRequestValidationError{}

// Validate checks the field values on RegisterPeerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterPeerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterPeerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterPeerResponseMultiError, or nil if none found.
func (m *RegisterPeerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterPeerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrivateKey

	// no validation rules for PublicKey

	// no validation rules for ServerPublicKey

	// no validation rules for ServerId

	// no validation rules for LocatorUrl

	if len(errors) > 0 {
		return RegisterPeerResponseMultiError(errors)
	}

	return nil
}

// RegisterPeerResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterPeerResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterPeerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterPeerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterPeerResponseMultiError) AllErrors() []error { return m }

// RegisterPeerResponseValidationError is the validation error returned by
// RegisterPeerResponse.Validate if the designated constraints aren't met.
type RegisterPeerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterPeerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterPeerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterPeerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterPeerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterPeerResponseValidationError) ErrorName() string {
	return "RegisterPeerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterPeerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterPeerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterPeerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterPeerResponseValidationError{}

// Validate checks the field values on PeerConfiguration with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PeerConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PeerConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PeerConfigurationMultiError, or nil if none found.
func (m *PeerConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *PeerConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PublicKey

	// no validation rules for PrivateKey

	if all {
		switch v := interface{}(m.GetClientDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PeerConfigurationValidationError{
					field:  "ClientDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PeerConfigurationValidationError{
					field:  "ClientDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClientDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeerConfigurationValidationError{
				field:  "ClientDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PeerConfigurationMultiError(errors)
	}

	return nil
}

// PeerConfigurationMultiError is an error wrapping multiple validation errors
// returned by PeerConfiguration.ValidateAll() if the designated constraints
// aren't met.
type PeerConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeerConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeerConfigurationMultiError) AllErrors() []error { return m }

// PeerConfigurationValidationError is the validation error returned by
// PeerConfiguration.Validate if the designated constraints aren't met.
type PeerConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerConfigurationValidationError) ErrorName() string {
	return "PeerConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e PeerConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeerConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerConfigurationValidationError{}

// Validate checks the field values on ClientRegistrationDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClientRegistrationDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientRegistrationDetails with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientRegistrationDetailsMultiError, or nil if none found.
func (m *ClientRegistrationDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientRegistrationDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerAddress

	// no validation rules for LocatorAddress

	if len(errors) > 0 {
		return ClientRegistrationDetailsMultiError(errors)
	}

	return nil
}

// ClientRegistrationDetailsMultiError is an error wrapping multiple validation
// errors returned by ClientRegistrationDetails.ValidateAll() if the
// designated constraints aren't met.
type ClientRegistrationDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientRegistrationDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientRegistrationDetailsMultiError) AllErrors() []error { return m }

// ClientRegistrationDetailsValidationError is the validation error returned by
// ClientRegistrationDetails.Validate if the designated constraints aren't met.
type ClientRegistrationDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientRegistrationDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientRegistrationDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientRegistrationDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientRegistrationDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientRegistrationDetailsValidationError) ErrorName() string {
	return "ClientRegistrationDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e ClientRegistrationDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientRegistrationDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientRegistrationDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientRegistrationDetailsValidationError{}

// Validate checks the field values on StreamSystemLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamSystemLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamSystemLogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamSystemLogsRequestMultiError, or nil if none found.
func (m *StreamSystemLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamSystemLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StreamSystemLogsRequestMultiError(errors)
	}

	return nil
}

// StreamSystemLogsRequestMultiError is an error wrapping multiple validation
// errors returned by StreamSystemLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamSystemLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamSystemLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamSystemLogsRequestMultiError) AllErrors() []error { return m }

// StreamSystemLogsRequestValidationError is the validation error returned by
// StreamSystemLogsRequest.Validate if the designated constraints aren't met.
type StreamSystemLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamSystemLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamSystemLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamSystemLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamSystemLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamSystemLogsRequestValidationError) ErrorName() string {
	return "StreamSystemLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamSystemLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamSystemLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamSystemLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamSystemLogsRequestValidationError{}

// Validate checks the field values on SystemLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemLog with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemLogMultiError, or nil
// if none found.
func (m *SystemLog) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Domain

	// no validation rules for Log

	if len(errors) > 0 {
		return SystemLogMultiError(errors)
	}

	return nil
}

// SystemLogMultiError is an error wrapping multiple validation errors returned
// by SystemLog.ValidateAll() if the designated constraints aren't met.
type SystemLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemLogMultiError) AllErrors() []error { return m }

// SystemLogValidationError is the validation error returned by
// SystemLog.Validate if the designated constraints aren't met.
type SystemLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemLogValidationError) ErrorName() string { return "SystemLogValidationError" }

// Error satisfies the builtin error interface
func (e SystemLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemLogValidationError{}
