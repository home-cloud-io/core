// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=js"
// @generated from file platform/server/v1/web.proto (package platform.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AppsHealthCheckRequest, AppsHealthCheckResponse, CheckForContainerUpdatesRequest, CheckForContainerUpdatesResponse, CheckForSystemUpdatesRequest, CheckForSystemUpdatesResponse, DeleteAppRequest, DeleteAppResponse, DeregisterFromLocatorRequest, DeregisterFromLocatorResponse, DisableSecureTunnellingRequest, DisableSecureTunnellingResponse, EnableSecureTunnellingRequest, EnableSecureTunnellingResponse, GetAppsInStoreRequest, GetAppsInStoreResponse, GetAppStorageRequest, GetAppStorageResponse, GetComponentVersionsRequest, GetComponentVersionsResponse, GetDeviceSettingsRequest, GetDeviceSettingsResponse, GetSystemLogsRequest, GetSystemLogsResponse, GetSystemStatsRequest, GetSystemStatsResponse, InitializeDeviceRequest, InitializeDeviceResponse, InstallAppRequest, InstallAppResponse, InstallOSUpdateRequest, InstallOSUpdateResponse, IsDeviceSetupRequest, IsDeviceSetupResponse, RegisterPeerRequest, RegisterPeerResponse, RegisterToLocatorRequest, RegisterToLocatorResponse, RestartHostRequest, RestartHostResponse, ServerEvent, SetDeviceSettingsRequest, SetDeviceSettingsResponse, ShutdownHostRequest, ShutdownHostResponse, SubscribeRequest, UpdateAppRequest, UpdateAppResponse } from "./web_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service platform.server.v1.WebService
 */
export const WebService = {
  typeName: "platform.server.v1.WebService",
  methods: {
    /**
     * Shutdown the host machine running Home Cloud
     *
     * @generated from rpc platform.server.v1.WebService.ShutdownHost
     */
    shutdownHost: {
      name: "ShutdownHost",
      I: ShutdownHostRequest,
      O: ShutdownHostResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restart the host machine running Home Cloud
     *
     * @generated from rpc platform.server.v1.WebService.RestartHost
     */
    restartHost: {
      name: "RestartHost",
      I: RestartHostRequest,
      O: RestartHostResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Install a Home Cloud application
     *
     * @generated from rpc platform.server.v1.WebService.InstallApp
     */
    installApp: {
      name: "InstallApp",
      I: InstallAppRequest,
      O: InstallAppResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a Home Cloud application
     *
     * @generated from rpc platform.server.v1.WebService.DeleteApp
     */
    deleteApp: {
      name: "DeleteApp",
      I: DeleteAppRequest,
      O: DeleteAppResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update a Home Cloud application
     *
     * @generated from rpc platform.server.v1.WebService.UpdateApp
     */
    updateApp: {
      name: "UpdateApp",
      I: UpdateAppRequest,
      O: UpdateAppResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Check for available NixOS and Daemon updates
     *
     * @generated from rpc platform.server.v1.WebService.CheckForSystemUpdates
     */
    checkForSystemUpdates: {
      name: "CheckForSystemUpdates",
      I: CheckForSystemUpdatesRequest,
      O: CheckForSystemUpdatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Check for available system (draft and home cloud) container updates
     *
     * @generated from rpc platform.server.v1.WebService.CheckForContainerUpdates
     */
    checkForContainerUpdates: {
      name: "CheckForContainerUpdates",
      I: CheckForContainerUpdatesRequest,
      O: CheckForContainerUpdatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Install available NixOS updates (call after calling CheckForSystemUpdates)
     *
     * @generated from rpc platform.server.v1.WebService.InstallOSUpdate
     */
    installOSUpdate: {
      name: "InstallOSUpdate",
      I: InstallOSUpdateRequest,
      O: InstallOSUpdateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Check the current health of all installed Home Cloud applications
     *
     * @generated from rpc platform.server.v1.WebService.AppsHealthCheck
     */
    appsHealthCheck: {
      name: "AppsHealthCheck",
      I: AppsHealthCheckRequest,
      O: AppsHealthCheckResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get the current host machine stats (cpu, memory, drives)
     *
     * @generated from rpc platform.server.v1.WebService.GetSystemStats
     */
    getSystemStats: {
      name: "GetSystemStats",
      I: GetSystemStatsRequest,
      O: GetSystemStatsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Check to validate if the device has gone through the onboarding process
     *
     * @generated from rpc platform.server.v1.WebService.IsDeviceSetup
     */
    isDeviceSetup: {
      name: "IsDeviceSetup",
      I: IsDeviceSetupRequest,
      O: IsDeviceSetupResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Initialize the device with the user's credentials and settings
     *
     * @generated from rpc platform.server.v1.WebService.InitializeDevice
     */
    initializeDevice: {
      name: "InitializeDevice",
      I: InitializeDeviceRequest,
      O: InitializeDeviceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get all apps available in the store
     *
     * @generated from rpc platform.server.v1.WebService.GetAppsInStore
     */
    getAppsInStore: {
      name: "GetAppsInStore",
      I: GetAppsInStoreRequest,
      O: GetAppsInStoreResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get the device settings
     *
     * @generated from rpc platform.server.v1.WebService.GetDeviceSettings
     */
    getDeviceSettings: {
      name: "GetDeviceSettings",
      I: GetDeviceSettingsRequest,
      O: GetDeviceSettingsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Set the device settings
     *
     * @generated from rpc platform.server.v1.WebService.SetDeviceSettings
     */
    setDeviceSettings: {
      name: "SetDeviceSettings",
      I: SetDeviceSettingsRequest,
      O: SetDeviceSettingsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get all installed app storage volumes
     *
     * @generated from rpc platform.server.v1.WebService.GetAppStorage
     */
    getAppStorage: {
      name: "GetAppStorage",
      I: GetAppStorageRequest,
      O: GetAppStorageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetComponentVersions returns the versions of all system components (daemon, server, etc.)
     *
     * @generated from rpc platform.server.v1.WebService.GetComponentVersions
     */
    getComponentVersions: {
      name: "GetComponentVersions",
      I: GetComponentVersionsRequest,
      O: GetComponentVersionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSystemLogs returns the past X seconds of system logs (daemon, server, fuse, etc.)
     *
     * @generated from rpc platform.server.v1.WebService.GetSystemLogs
     */
    getSystemLogs: {
      name: "GetSystemLogs",
      I: GetSystemLogsRequest,
      O: GetSystemLogsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Enables the remote access feature
     *
     * @generated from rpc platform.server.v1.WebService.EnableSecureTunnelling
     */
    enableSecureTunnelling: {
      name: "EnableSecureTunnelling",
      I: EnableSecureTunnellingRequest,
      O: EnableSecureTunnellingResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Disables the remote access feature
     *
     * @generated from rpc platform.server.v1.WebService.DisableSecureTunnelling
     */
    disableSecureTunnelling: {
      name: "DisableSecureTunnelling",
      I: DisableSecureTunnellingRequest,
      O: DisableSecureTunnellingResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Register the server with the given Locator service
     *
     * @generated from rpc platform.server.v1.WebService.RegisterToLocator
     */
    registerToLocator: {
      name: "RegisterToLocator",
      I: RegisterToLocatorRequest,
      O: RegisterToLocatorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deregister the server from the given Locator service
     *
     * @generated from rpc platform.server.v1.WebService.DeregisterFromLocator
     */
    deregisterFromLocator: {
      name: "DeregisterFromLocator",
      I: DeregisterFromLocatorRequest,
      O: DeregisterFromLocatorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RegisterPeer is used to connect a client to the home-cloud overlay network
     *
     * @generated from rpc platform.server.v1.WebService.RegisterPeer
     */
    registerPeer: {
      name: "RegisterPeer",
      I: RegisterPeerRequest,
      O: RegisterPeerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Subscribe to the server for events
     *
     * @generated from rpc platform.server.v1.WebService.Subscribe
     */
    subscribe: {
      name: "Subscribe",
      I: SubscribeRequest,
      O: ServerEvent,
      kind: MethodKind.ServerStreaming,
    },
  }
};

